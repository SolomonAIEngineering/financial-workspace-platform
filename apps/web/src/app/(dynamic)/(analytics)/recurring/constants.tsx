"use client";

import type { DataTableFilterField } from "@/components/data-table/types";
import type { RecurringTransactionSchema } from "./schema";
import { addBusinessDays } from "date-fns";

// Sample recurring transaction data
export const sampleRecurringTransactions: RecurringTransactionSchema[] = [
    {
        id: "rt_1",
        bankAccountId: "acct_1",
        amount: 9.99,
        currency: "USD",
        frequency: "MONTHLY",
        interval: 1,
        title: "Netflix Subscription",
        description: "Monthly Netflix subscription",
        nextScheduledDate: addBusinessDays(new Date(), 5),
        lastExecutedAt: addBusinessDays(new Date(), -25),
        startDate: addBusinessDays(new Date(), -55),
        endDate: null,
        status: "active",
        transactionType: "subscription",
        importanceLevel: "medium",
        merchantId: "merch_1",
        merchantName: "Netflix",
        requiresApproval: false,
        executionCount: 12,
        totalExecuted: 119.88,
        affectAvailableBalance: true,
        isAutomated: true,
        isVariable: false,
    },
    {
        id: "rt_2",
        bankAccountId: "acct_1",
        amount: 49.99,
        currency: "USD",
        frequency: "MONTHLY",
        interval: 1,
        title: "Gym Membership",
        description: "Monthly gym membership fee",
        nextScheduledDate: addBusinessDays(new Date(), 12),
        lastExecutedAt: addBusinessDays(new Date(), -18),
        startDate: addBusinessDays(new Date(), -48),
        endDate: null,
        status: "active",
        transactionType: "subscription",
        importanceLevel: "low",
        merchantId: "merch_2",
        merchantName: "Gold's Gym",
        requiresApproval: false,
        executionCount: 10,
        totalExecuted: 499.90,
        affectAvailableBalance: true,
        isAutomated: true,
        isVariable: false,
    },
    {
        id: "rt_3",
        bankAccountId: "acct_2",
        amount: 1200,
        currency: "USD",
        frequency: "MONTHLY",
        interval: 1,
        title: "Office Rent",
        description: "Monthly office space rent",
        nextScheduledDate: addBusinessDays(new Date(), 1),
        lastExecutedAt: addBusinessDays(new Date(), -29),
        startDate: addBusinessDays(new Date(), -59),
        endDate: null,
        status: "active",
        transactionType: "bill",
        importanceLevel: "critical",
        merchantId: "merch_3",
        merchantName: "Skyview Properties",
        requiresApproval: true,
        executionCount: 12,
        totalExecuted: 14400,
        affectAvailableBalance: true,
        isAutomated: true,
        isVariable: false,
    },
    {
        id: "rt_4",
        bankAccountId: "acct_2",
        amount: 89.99,
        currency: "USD",
        frequency: "BIWEEKLY",
        interval: 2,
        title: "Cleaning Service",
        description: "Bi-weekly office cleaning",
        nextScheduledDate: addBusinessDays(new Date(), 3),
        lastExecutedAt: addBusinessDays(new Date(), -11),
        startDate: addBusinessDays(new Date(), -25),
        endDate: null,
        status: "active",
        transactionType: "other",
        importanceLevel: "medium",
        merchantId: "merch_4",
        merchantName: "CleanPro Services",
        requiresApproval: false,
        executionCount: 6,
        totalExecuted: 539.94,
        affectAvailableBalance: true,
        isAutomated: true,
        isVariable: true,
    },
    {
        id: "rt_5",
        bankAccountId: "acct_3",
        amount: 3500,
        currency: "USD",
        frequency: "MONTHLY",
        interval: 1,
        title: "Employee Salary",
        description: "Monthly salary for admin assistant",
        nextScheduledDate: addBusinessDays(new Date(), 15),
        lastExecutedAt: addBusinessDays(new Date(), -15),
        startDate: addBusinessDays(new Date(), -45),
        endDate: null,
        status: "active",
        transactionType: "income",
        importanceLevel: "critical",
        merchantId: "merch_5",
        merchantName: "Payroll",
        requiresApproval: true,
        executionCount: 8,
        totalExecuted: 28000,
        affectAvailableBalance: true,
        isAutomated: true,
        isVariable: false,
    },
    {
        id: "rt_6",
        bankAccountId: "acct_1",
        amount: 15.99,
        currency: "USD",
        frequency: "MONTHLY",
        interval: 1,
        title: "Website Hosting",
        description: "Monthly website hosting fee",
        nextScheduledDate: addBusinessDays(new Date(), 7),
        lastExecutedAt: addBusinessDays(new Date(), -23),
        startDate: addBusinessDays(new Date(), -53),
        endDate: null,
        status: "paused",
        transactionType: "subscription",
        importanceLevel: "high",
        merchantId: "merch_6",
        merchantName: "HostGator",
        requiresApproval: false,
        executionCount: 11,
        totalExecuted: 175.89,
        affectAvailableBalance: true,
        isAutomated: true,
        isVariable: false,
    },
    {
        id: "rt_7",
        bankAccountId: "acct_3",
        amount: 800,
        currency: "USD",
        frequency: "WEEKLY",
        interval: 1,
        title: "Inventory Restock",
        description: "Weekly inventory procurement",
        nextScheduledDate: addBusinessDays(new Date(), 2),
        lastExecutedAt: addBusinessDays(new Date(), -5),
        startDate: addBusinessDays(new Date(), -12),
        endDate: null,
        status: "active",
        transactionType: "bill",
        importanceLevel: "high",
        merchantId: "merch_7",
        merchantName: "Wholesale Supplies",
        requiresApproval: true,
        executionCount: 4,
        totalExecuted: 3200,
        affectAvailableBalance: true,
        isAutomated: true,
        isVariable: true,
    },
    {
        id: "rt_8",
        bankAccountId: "acct_2",
        amount: 125,
        currency: "USD",
        frequency: "ANNUALLY",
        interval: 1,
        title: "Domain Renewal",
        description: "Quarterly domain name renewal fee",
        nextScheduledDate: addBusinessDays(new Date(), 45),
        lastExecutedAt: addBusinessDays(new Date(), -45),
        startDate: addBusinessDays(new Date(), -135),
        endDate: null,
        status: "active",
        transactionType: "subscription",
        importanceLevel: "medium",
        merchantId: "merch_8",
        merchantName: "GoDaddy",
        requiresApproval: false,
        executionCount: 2,
        totalExecuted: 250,
        affectAvailableBalance: true,
        isAutomated: true,
        isVariable: false,
    },
    {
        id: "rt_9",
        bankAccountId: "acct_1",
        amount: 75,
        currency: "USD",
        frequency: "MONTHLY",
        interval: 1,
        title: "Internet Service",
        description: "Monthly high-speed internet service",
        nextScheduledDate: addBusinessDays(new Date(), 20),
        lastExecutedAt: addBusinessDays(new Date(), -10),
        startDate: addBusinessDays(new Date(), -40),
        endDate: null,
        status: "active",
        transactionType: "bill",
        importanceLevel: "high",
        merchantId: "merch_9",
        merchantName: "Comcast Business",
        requiresApproval: false,
        executionCount: 9,
        totalExecuted: 675,
        affectAvailableBalance: true,
        isAutomated: true,
        isVariable: false,
    },
    {
        id: "rt_10",
        bankAccountId: "acct_3",
        amount: 250,
        currency: "USD",
        frequency: "MONTHLY",
        interval: 1,
        title: "Accounting Services",
        description: "Monthly accounting and bookkeeping",
        nextScheduledDate: addBusinessDays(new Date(), 8),
        lastExecutedAt: addBusinessDays(new Date(), -22),
        startDate: addBusinessDays(new Date(), -52),
        endDate: null,
        status: "active",
        transactionType: "other",
        importanceLevel: "medium",
        merchantId: "merch_10",
        merchantName: "Johnson Accounting",
        requiresApproval: true,
        executionCount: 7,
        totalExecuted: 1750,
        affectAvailableBalance: true,
        isAutomated: true,
        isVariable: false,
    },
];

// Define filter fields for the data table
export const filterFields: DataTableFilterField<RecurringTransactionSchema>[] = [
    {
        type: "checkbox",
        value: "status",
        label: "Status",
        options: [
            { value: "active", label: "Active" },
            { value: "paused", label: "Paused" },
            { value: "failed", label: "Failed" },
            { value: "completed", label: "Completed" },
        ],
    },
    {
        type: "checkbox",
        value: "transactionType",
        label: "Type",
        options: [
            { value: "subscription", label: "Subscription" },
            { value: "bill", label: "Bill" },
            { value: "income", label: "Income" },
            { value: "transfer", label: "Transfer" },
            { value: "other", label: "Other" },
        ],
    },
    {
        type: "slider",
        value: "amount",
        label: "Amount",
        min: 0,
        max: 5000,
    },
    {
        type: "timerange",
        value: "nextScheduledDate",
        label: "Next Execution Date",
    },
];

// Group filters by category
export const groupFilters = (fields: DataTableFilterField<RecurringTransactionSchema>[]) => {
    // Group filters by their type
    const statusFilters = fields.filter(field => field.value === "status");
    const typeFilters = fields.filter(field => field.value === "transactionType");
    const rangeFilters = fields.filter(field => field.type === "slider" || field.type === "timerange");

    return [
        {
            title: "Status",
            fields: statusFilters,
        },
        {
            title: "Type",
            fields: typeFilters,
        },
        {
            title: "Ranges",
            fields: rangeFilters,
        },
    ];
}; 