"use client";

import type {
  DataTableFilterField,
  Option,
} from "@/components/data-table/types";
import { REGIONS } from "@/constants/region";
import { TAGS } from "@/constants/tag";
import { cn } from "@/lib/utils";
import { subDays, subHours, subMinutes } from "date-fns";
import {
  type ColumnSchema,
  TRANSACTION_CATEGORIES,
  PAYMENT_METHODS,
  TRANSACTION_TYPES,
  TRANSACTION_FREQUENCIES
} from "./schema";
import { v4 as uuidv4 } from 'uuid';

/**
 * @file constants.tsx
 * @description Contains constant values, sample data, and filter configurations for transactions.
 * This file is the central repository for all tag colors, default values, sample transactions,
 * and filter field definitions used throughout the transaction UI components.
 */

/**
 * Tag color definitions for different tag categories.
 * Provides consistent styling for badges and indicators across the UI.
 * 
 * @property api - Styling for API-related tags
 * @property web - Styling for web-related tags
 * @property enterprise - Styling for enterprise-related tags
 * @property app - Styling for app-related tags
 */
export const tagsColor = {
  api: {
    badge:
      "text-[#10b981] bg-[#10b981]/10 border-[#10b981]/20 hover:bg-[#10b981]/10",
    dot: "bg-[#10b981]",
  },
  web: {
    badge:
      "text-[#0ea5e9] bg-[#0ea5e9]/10 border-[#0ea5e9]/20 hover:bg-[#0ea5e9]/10",
    dot: "bg-[#0ea5e9]",
  },
  enterprise: {
    badge:
      "text-[#ec4899] bg-[#ec4899]/10 border-[#ec4899]/20 hover:bg-[#ec4899]/10",
    dot: "bg-[#ec4899]",
  },
  app: {
    badge:
      "text-[#f97316] bg-[#f97316]/10 border-[#f97316]/20 hover:bg-[#f97316]/10",
    dot: "bg-[#f97316]",
  },
} as Record<string, Record<"badge" | "dot", string>>;

/**
 * Sample transaction data for testing and development.
 * Each record represents a financial transaction with properties matching the ColumnSchema.
 * The data includes various types of transactions like income, expenses, transfers, and
 * recurring payments with diverse metadata to demonstrate different use cases.
 * 
 * @example
 * ```tsx
 * // Use the sample data in a component
 * const { data } = useQuery({
 *   queryFn: async () => data,
 *   queryKey: ['transactions']
 * });
 * ```
 */
export const data = [
  {
    id: uuidv4(),
    bankAccountId: "acct_checking_primary",
    bankAccountName: "Primary Checking",
    amount: 1250.00,
    name: "Payroll Deposit",
    merchantName: "Acme Corp",
    description: "Bi-weekly salary payment",
    date: subDays(new Date(), 1),
    pending: false,
    category: "INCOME",
    paymentMethod: "ACH",
    transactionType: "DEPOSIT",
    isRecurring: true,
    frequency: "BIWEEKLY",
    tags: ["salary", "income"],
    excludeFromBudget: false,
    isManual: false,
    isModified: false,
    createdAt: subDays(new Date(), 1),
    updatedAt: subDays(new Date(), 1),
    currency: "USD",
    merchantId: "merchant_acme",
    merchantLogoUrl: "https://example.com/logos/acme.png",
    cashFlowCategory: "INCOME",
    cashFlowType: "FIXED",
    isVerified: true,
    confidenceScore: 0.98,
    transactionChannel: "ONLINE",
    isFlagged: false,
    isHidden: false,
    notes: "Regular bi-weekly salary deposit",
    reviewStatus: "REVIEWED",
    location: { city: "San Francisco", state: "CA", country: "US" },
    insightTags: ["stable-income", "recurring"],
    isLocked: false,
    isReconciled: true,
    needsAttention: false,
    labels: [],
    isSplit: false,
  },
  {
    id: uuidv4(),
    bankAccountId: "acct_checking_primary",
    bankAccountName: "Primary Checking",
    amount: 89.99,
    name: "Grocery Store",
    merchantName: "Whole Foods",
    description: "Weekly grocery shopping",
    date: subDays(new Date(), 2),
    pending: false,
    category: "FOOD_AND_DRINK",
    paymentMethod: "DEBIT_CARD",
    transactionType: "PURCHASE",
    isRecurring: false,
    tags: ["groceries", "essentials"],
    excludeFromBudget: false,
    isManual: false,
    isModified: false,
    createdAt: subDays(new Date(), 2),
    updatedAt: subDays(new Date(), 2),
    currency: "USD",
    merchantId: "merchant_wholefoods",
    merchantLogoUrl: "https://example.com/logos/wholefoods.png",
    merchantCategory: "GROCERIES",
    merchantAddress: "123 Market St",
    merchantCity: "San Francisco",
    merchantState: "CA",
    merchantZip: "94105",
    merchantCountry: "US",
    cashFlowCategory: "EXPENSE",
    cashFlowType: "VARIABLE",
    isVerified: true,
    confidenceScore: 0.95,
    transactionChannel: "IN_STORE",
    cardLastFour: "4321",
    cardType: "Visa",
    latitude: 37.7749,
    longitude: -122.4194,
    budgetCategory: "Groceries",
    discretionary: false,
    needsWantsCategory: "NEEDS",
    insightTags: ["healthy-food", "weekly-shopping"],
    isLocked: false,
    isReconciled: true,
    needsAttention: false,
    labels: [],
    isSplit: false,
    isFlagged: false,
    isHidden: false,
  },
  {
    id: uuidv4(),
    bankAccountId: "acct_credit_main",
    bankAccountName: "Main Credit Card",
    amount: 129.99,
    name: "Streaming Services",
    merchantName: "Netflix",
    description: "Monthly subscription",
    date: subDays(new Date(), 3),
    pending: false,
    category: "ENTERTAINMENT",
    paymentMethod: "CREDIT_CARD",
    transactionType: "PURCHASE",
    isRecurring: true,
    frequency: "MONTHLY",
    tags: ["subscription", "entertainment"],
    excludeFromBudget: false,
    isManual: false,
    isModified: false,
    createdAt: subDays(new Date(), 3),
    updatedAt: subDays(new Date(), 3),
    currency: "USD",
    merchantId: "merchant_netflix",
    merchantLogoUrl: "https://example.com/logos/netflix.png",
    cashFlowCategory: "EXPENSE",
    cashFlowType: "FIXED",
    recurringTransactionId: "rec_netflix_monthly",
    estimatedNextDate: subDays(new Date(), -27), // Next month
    transactionChannel: "ONLINE",
    budgetCategory: "Entertainment",
    discretionary: true,
    needsWantsCategory: "WANTS",
    isVerified: true,
    isFlagged: false,
    isHidden: false,
    isLocked: false,
    isReconciled: true,
    needsAttention: false,
    insightTags: ["subscription", "monthly-expense"],
    labels: [],
    isSplit: false,
  },
  {
    id: uuidv4(),
    bankAccountId: "acct_checking_primary",
    bankAccountName: "Primary Checking",
    amount: 1200.00,
    name: "Rent Payment",
    merchantName: "Property Management LLC",
    description: "Monthly rent",
    date: subDays(new Date(), 5),
    pending: false,
    category: "GENERAL_SERVICES",
    paymentMethod: "ACH",
    transactionType: "PAYMENT",
    isRecurring: true,
    frequency: "MONTHLY",
    tags: ["housing", "rent"],
    excludeFromBudget: false,
    isManual: false,
    isModified: false,
    createdAt: subDays(new Date(), 5),
    updatedAt: subDays(new Date(), 5),
    currency: "USD",
    merchantId: "merchant_property",
    cashFlowCategory: "EXPENSE",
    cashFlowType: "FIXED",
    isVerified: true,
    confidenceScore: 0.99,
    recurringTransactionId: "rec_rent_monthly",
    transactionReference: "RENT-JUN2023",
    budgetCategory: "Housing",
    discretionary: false,
    needsWantsCategory: "NEEDS",
    taxDeductible: false,
    isFlagged: false,
    isHidden: false,
    isLocked: false,
    isReconciled: true,
    needsAttention: false,
    insightTags: ["housing", "major-expense"],
    labels: [],
    isSplit: false,
  },
  {
    id: uuidv4(),
    bankAccountId: "acct_credit_main",
    bankAccountName: "Main Credit Card",
    amount: 45.67,
    name: "Gas Station",
    merchantName: "Shell",
    description: "Fuel purchase",
    date: subDays(new Date(), 6),
    pending: false,
    category: "TRANSPORTATION",
    paymentMethod: "CREDIT_CARD",
    transactionType: "PURCHASE",
    isRecurring: false,
    tags: ["transportation", "car"],
    excludeFromBudget: false,
    isManual: false,
    isModified: false,
    createdAt: subDays(new Date(), 6),
    updatedAt: subDays(new Date(), 6),
    currency: "USD",
    merchantId: "merchant_shell",
    merchantLogoUrl: "https://example.com/logos/shell.png",
    merchantCategory: "GAS_STATION",
    latitude: 37.7833,
    longitude: -122.4167,
    cashFlowCategory: "EXPENSE",
    cashFlowType: "VARIABLE",
    budgetCategory: "Transportation",
    discretionary: false,
    needsWantsCategory: "NEEDS",
    cardLastFour: "5678",
    cardType: "Mastercard",
    isVerified: true,
    isFlagged: false,
    isHidden: false,
    isLocked: false,
    isReconciled: true,
    needsAttention: false,
    insightTags: ["transportation", "weekly-expense"],
    labels: [],
    isSplit: false,
  },
  {
    id: uuidv4(),
    bankAccountId: "acct_checking_primary",
    bankAccountName: "Primary Checking",
    amount: 150.00,
    name: "Utility Bill",
    merchantName: "City Power & Water",
    description: "Monthly utility payment",
    date: subDays(new Date(), 7),
    pending: false,
    category: "UTILITIES",
    paymentMethod: "ACH",
    transactionType: "PAYMENT",
    isRecurring: true,
    frequency: "MONTHLY",
    tags: ["utilities", "bills"],
    excludeFromBudget: false,
    isManual: false,
    isModified: false,
    createdAt: subDays(new Date(), 7),
    updatedAt: subDays(new Date(), 7),
    currency: "USD",
    insightTags: [],
    isVerified: false,
    isFlagged: false,
    isHidden: false,
    isLocked: false,
    isReconciled: true,
    needsAttention: false,
    labels: [],
    isSplit: false,
  },
  {
    id: uuidv4(),
    bankAccountId: "acct_credit_main",
    bankAccountName: "Main Credit Card",
    amount: 78.50,
    name: "Restaurant",
    merchantName: "Local Bistro",
    description: "Dinner with friends",
    date: subDays(new Date(), 8),
    pending: false,
    category: "FOOD_AND_DRINK",
    paymentMethod: "CREDIT_CARD",
    transactionType: "PURCHASE",
    isRecurring: false,
    tags: ["dining", "social"],
    excludeFromBudget: false,
    isManual: false,
    isModified: false,
    createdAt: subDays(new Date(), 8),
    updatedAt: subDays(new Date(), 8),
    currency: "USD",
    insightTags: ["dining-out", "social-activity"],
    isVerified: true,
    isFlagged: false,
    isHidden: false,
    isLocked: false,
    isReconciled: true,
    needsAttention: false,
    labels: [],
    isSplit: false,
    cashFlowCategory: "EXPENSE",
    cashFlowType: "VARIABLE",
    budgetCategory: "Dining",
    discretionary: true,
    needsWantsCategory: "WANTS",
  },
  {
    id: uuidv4(),
    bankAccountId: "acct_checking_primary",
    bankAccountName: "Primary Checking",
    amount: 500.00,
    name: "Transfer to Savings",
    merchantName: null,
    description: "Monthly savings transfer",
    date: subDays(new Date(), 9),
    pending: false,
    category: "TRANSFER",
    paymentMethod: "ACH",
    transactionType: "TRANSFER",
    isRecurring: true,
    frequency: "MONTHLY",
    tags: ["savings", "transfer"],
    excludeFromBudget: true,
    isManual: false,
    isModified: false,
    createdAt: subDays(new Date(), 9),
    updatedAt: subDays(new Date(), 9),
    currency: "USD",
    insightTags: ["savings-goal", "financial-planning"],
    isVerified: true,
    isFlagged: false,
    isHidden: false,
    isLocked: false,
    isReconciled: true,
    needsAttention: false,
    labels: [],
    isSplit: false,
    cashFlowCategory: "TRANSFER",
    cashFlowType: "FIXED",
    budgetCategory: "Savings",
    discretionary: false,
    needsWantsCategory: "SAVINGS",
  },
  {
    id: uuidv4(),
    bankAccountId: "acct_credit_main",
    bankAccountName: "Main Credit Card",
    amount: 120.00,
    name: "Clothing Store",
    merchantName: "Fashion Outlet",
    description: "New clothes purchase",
    date: subDays(new Date(), 10),
    pending: false,
    category: "GENERAL_MERCHANDISE",
    paymentMethod: "CREDIT_CARD",
    transactionType: "PURCHASE",
    isRecurring: false,
    tags: ["shopping", "clothing"],
    excludeFromBudget: false,
    isManual: false,
    isModified: false,
    createdAt: subDays(new Date(), 10),
    updatedAt: subDays(new Date(), 10),
    currency: "USD",
    insightTags: ["clothing", "shopping"],
    isVerified: true,
    isFlagged: false,
    isHidden: false,
    isLocked: false,
    isReconciled: true,
    needsAttention: false,
    labels: [],
    isSplit: false,
    cashFlowCategory: "EXPENSE",
    cashFlowType: "VARIABLE",
    budgetCategory: "Shopping",
    discretionary: true,
    needsWantsCategory: "WANTS",
  },
  {
    id: uuidv4(),
    bankAccountId: "acct_checking_primary",
    bankAccountName: "Primary Checking",
    amount: 35.00,
    name: "Pharmacy",
    merchantName: "CVS",
    description: "Prescription medication",
    date: subDays(new Date(), 11),
    pending: false,
    category: "MEDICAL",
    paymentMethod: "DEBIT_CARD",
    transactionType: "PURCHASE",
    isRecurring: false,
    tags: ["health", "medical"],
    excludeFromBudget: false,
    isManual: false,
    isModified: false,
    createdAt: subDays(new Date(), 11),
    updatedAt: subDays(new Date(), 11),
    currency: "USD",
    insightTags: ["healthcare", "medical"],
    isVerified: true,
    isFlagged: false,
    isHidden: false,
    isLocked: false,
    isReconciled: true,
    needsAttention: false,
    labels: [],
    isSplit: false,
    cashFlowCategory: "EXPENSE",
    cashFlowType: "VARIABLE",
    budgetCategory: "Healthcare",
    discretionary: false,
    needsWantsCategory: "NEEDS",
    taxDeductible: true,
  },
  {
    id: uuidv4(),
    bankAccountId: "acct_credit_main",
    bankAccountName: "Main Credit Card",
    amount: 65.99,
    name: "Internet Service",
    merchantName: "Comcast",
    description: "Monthly internet bill",
    date: subDays(new Date(), 12),
    pending: false,
    category: "UTILITIES",
    paymentMethod: "CREDIT_CARD",
    transactionType: "PAYMENT",
    isRecurring: true,
    frequency: "MONTHLY",
    tags: ["utilities", "internet"],
    excludeFromBudget: false,
    isManual: false,
    isModified: false,
    createdAt: subDays(new Date(), 12),
    updatedAt: subDays(new Date(), 12),
    currency: "USD",
    insightTags: ["utilities", "monthly-expense"],
    isVerified: true,
    isFlagged: false,
    isHidden: false,
    isLocked: false,
    isReconciled: true,
    needsAttention: false,
    labels: [],
    isSplit: false,
    cashFlowCategory: "EXPENSE",
    cashFlowType: "FIXED",
    budgetCategory: "Utilities",
    discretionary: false,
    needsWantsCategory: "NEEDS",
  },
  {
    id: uuidv4(),
    bankAccountId: "acct_checking_primary",
    bankAccountName: "Primary Checking",
    amount: 25.00,
    name: "ATM Withdrawal",
    merchantName: null,
    description: "Cash withdrawal",
    date: subDays(new Date(), 13),
    pending: false,
    category: "OTHER",
    paymentMethod: "DEBIT_CARD",
    transactionType: "WITHDRAWAL",
    isRecurring: false,
    tags: ["cash", "withdrawal"],
    excludeFromBudget: false,
    isManual: false,
    isModified: false,
    createdAt: subDays(new Date(), 13),
    updatedAt: subDays(new Date(), 13),
    currency: "USD",
    insightTags: ["cash-management"],
    isVerified: true,
    isFlagged: false,
    isHidden: false,
    isLocked: false,
    isReconciled: true,
    needsAttention: false,
    labels: [],
    isSplit: false,
    cashFlowCategory: "EXPENSE",
    cashFlowType: "VARIABLE",
  },
  {
    id: uuidv4(),
    bankAccountId: "acct_credit_main",
    bankAccountName: "Main Credit Card",
    amount: 42.75,
    name: "Coffee Shop",
    merchantName: "Starbucks",
    description: "Coffee and snacks",
    date: subHours(new Date(), 36),
    pending: true,
    category: "FOOD_AND_DRINK",
    paymentMethod: "CREDIT_CARD",
    transactionType: "PURCHASE",
    isRecurring: false,
    tags: ["coffee", "snacks"],
    excludeFromBudget: false,
    isManual: false,
    isModified: false,
    createdAt: subHours(new Date(), 36),
    updatedAt: subHours(new Date(), 36),
    currency: "USD",
    insightTags: ["coffee", "snacks"],
    isVerified: false,
    isFlagged: false,
    isHidden: false,
    isLocked: false,
    isReconciled: false,
    needsAttention: false,
    labels: [],
    isSplit: false,
    cashFlowCategory: "EXPENSE",
    cashFlowType: "VARIABLE",
    budgetCategory: "Dining",
    discretionary: true,
    needsWantsCategory: "WANTS",
  },
  {
    id: uuidv4(),
    bankAccountId: "acct_checking_primary",
    bankAccountName: "Primary Checking",
    amount: 15.99,
    name: "Mobile App Purchase",
    merchantName: "Apple App Store",
    description: "App subscription",
    date: subHours(new Date(), 48),
    pending: true,
    category: "ENTERTAINMENT",
    paymentMethod: "DEBIT_CARD",
    transactionType: "PURCHASE",
    isRecurring: true,
    frequency: "MONTHLY",
    tags: ["app", "subscription"],
    excludeFromBudget: false,
    isManual: false,
    isModified: false,
    createdAt: subHours(new Date(), 48),
    updatedAt: subHours(new Date(), 48),
    currency: "USD",
    insightTags: ["app", "subscription"],
    isVerified: false,
    isFlagged: false,
    isHidden: false,
    isLocked: false,
    isReconciled: false,
    needsAttention: false,
    labels: [],
    isSplit: false,
    cashFlowCategory: "EXPENSE",
    cashFlowType: "FIXED",
    budgetCategory: "Entertainment",
    discretionary: true,
    needsWantsCategory: "WANTS",
  },
] satisfies ColumnSchema[];

/**
 * Filter field definitions for the transactions data table.
 * Each filter object defines a UI control that users can interact with to filter transaction data.
 * 
 * The filters include:
 * - Date range filter for time-based filtering
 * - Slider control for amount filtering
 * - Text inputs for searching transaction name and merchant
 * - Checkbox filters for status, category, payment method, etc.
 * - Specialized filters for tags and various transaction attributes
 * 
 * @type {DataTableFilterField<ColumnSchema>[]}
 * 
 * @example
 * ```tsx
 * // Use these filters in a DataTable component
 * <DataTable
 *   columns={columns}
 *   data={data}
 *   filterFields={filterFields}
 * />
 * ```
 */
export const filterFields = [
  {
    label: "Time Range",
    value: "date",
    type: "timerange",
    defaultOpen: true,
    commandDisabled: true,
  },
  {
    label: "Amount",
    value: "amount",
    type: "slider",
    min: 0,
    max: 2000,
    defaultOpen: true,
  },
  {
    label: "Transaction Name",
    value: "name",
    type: "input",
    options: data.map(({ name }) => ({ label: name, value: name })),
  },
  {
    label: "Merchant",
    value: "merchantName",
    type: "input",
    options: data
      .filter(({ merchantName }) => merchantName !== null)
      .map(({ merchantName }) => ({
        label: merchantName as string,
        value: merchantName as string
      })),
  },
  {
    label: "Status",
    value: "pending",
    type: "checkbox",
    options: [
      { label: "Pending", value: true },
      { label: "Completed", value: false },
    ],
  },
  {
    label: "Category",
    value: "category",
    type: "checkbox",
    defaultOpen: true,
    options: TRANSACTION_CATEGORIES.map((category) => ({
      label: category.replace(/_/g, " "),
      value: category
    })),
  },
  {
    label: "Payment Method",
    value: "paymentMethod",
    type: "checkbox",
    options: PAYMENT_METHODS.map((method) => ({
      label: method.replace(/_/g, " "),
      value: method
    })),
  },
  {
    label: "Transaction Type",
    value: "transactionType",
    type: "checkbox",
    options: TRANSACTION_TYPES.map((type) => ({
      label: type.replace(/_/g, " "),
      value: type
    })),
  },
  {
    label: "Recurring",
    value: "isRecurring",
    type: "checkbox",
    options: [
      { label: "Yes", value: true },
      { label: "No", value: false },
    ],
  },
  {
    label: "Frequency",
    value: "frequency",
    type: "checkbox",
    options: TRANSACTION_FREQUENCIES.map((frequency) => ({
      label: frequency.replace(/_/g, " "),
      value: frequency
    })),
  },
  {
    label: "Tags",
    value: "tags",
    type: "checkbox",
    defaultOpen: true,
    component: (props: Option) => {
      if (typeof props.value === "boolean") return null;
      if (typeof props.value === "undefined") return null;
      return (
        <div className="flex w-full items-center justify-between gap-2">
          <span className="truncate font-normal">{props.value}</span>
          <span className="h-2 w-2 rounded-full bg-muted-foreground/50" />
        </div>
      );
    },
    options: Array.from(
      new Set(data.flatMap((item) => item.tags))
    ).map((tag) => ({ label: tag, value: tag })),
  },
  {
    label: "Account",
    value: "bankAccountName",
    type: "checkbox",
    options: Array.from(
      new Set(data.map((item) => item.bankAccountName))
    ).map((name) => ({
      label: name || "Unknown",
      value: name
    })),
  },
  {
    label: "Exclude from Budget",
    value: "excludeFromBudget",
    type: "checkbox",
    options: [
      { label: "Yes", value: true },
      { label: "No", value: false },
    ],
  },
  {
    label: "Manual Entry",
    value: "isManual",
    type: "checkbox",
    options: [
      { label: "Yes", value: true },
      { label: "No", value: false },
    ],
  },
  {
    label: "Cash Flow Category",
    value: "cashFlowCategory",
    type: "checkbox",
    options: [
      { label: "Income", value: "INCOME" },
      { label: "Expense", value: "EXPENSE" },
      { label: "Transfer", value: "TRANSFER" },
      { label: "Excluded", value: "EXCLUDED" },
    ],
  },
  {
    label: "Budget Category",
    value: "budgetCategory",
    type: "checkbox",
    options: Array.from(
      new Set(data.filter(item => item.budgetCategory).map(item => item.budgetCategory as string))
    ).map((category) => ({
      label: category,
      value: category
    })),
  },
  {
    label: "Needs vs. Wants",
    value: "needsWantsCategory",
    type: "checkbox",
    options: [
      { label: "Needs", value: "NEEDS" },
      { label: "Wants", value: "WANTS" },
      { label: "Savings", value: "SAVINGS" },
    ],
  },
  {
    label: "Verified",
    value: "isVerified",
    type: "checkbox",
    options: [
      { label: "Yes", value: true },
      { label: "No", value: false },
    ],
  },
  {
    label: "Tax Deductible",
    value: "taxDeductible",
    type: "checkbox",
    options: [
      { label: "Yes", value: true },
      { label: "No", value: false },
    ],
  },
] satisfies DataTableFilterField<ColumnSchema>[];
