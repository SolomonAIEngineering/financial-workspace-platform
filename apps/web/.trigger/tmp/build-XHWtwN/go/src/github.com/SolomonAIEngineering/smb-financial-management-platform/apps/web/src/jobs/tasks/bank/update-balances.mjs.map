{
  "version": 3,
  "sources": ["../../../../../../../../../../../../../../src/jobs/tasks/bank/update-balances.ts"],
  "sourcesContent": ["import { BankConnectionStatus } from '@prisma/client';\nimport { cronTrigger } from '@trigger.dev/sdk';\n\nimport { prisma } from '@/server/db';\nimport { getAccounts } from '@/server/services/plaid';\n\nimport { client } from '../../client';\n\n/**\n * This job updates bank account balances on a frequent basis without pulling\n * full transaction history, providing more real-time balance data.\n */\nexport const updateBalancesJob = client.defineJob({\n  id: 'update-bank-balances-job',\n  name: 'Update Bank Balances',\n  trigger: cronTrigger({\n    cron: '0 */2 * * *', // Every 2 hours\n  }),\n  version: '1.0.0',\n  run: async (payload, io) => {\n    await io.logger.info('Starting balance update job');\n\n    // Find active connections to update\n    const connections = await io.runTask('get-active-connections', async () => {\n      return await prisma.bankConnection.findMany({\n        include: {\n          accounts: {\n            where: {\n              status: 'ACTIVE',\n            },\n          },\n        },\n        orderBy: {\n          balanceLastUpdated: 'asc', // Update oldest first\n        },\n        take: 100, // Process in batches\n        where: {\n          status: BankConnectionStatus.ACTIVE,\n        },\n      });\n    });\n\n    await io.logger.info(\n      `Found ${connections.length} connections to update balances`\n    );\n\n    let successCount = 0;\n    let errorCount = 0;\n    let accountsUpdated = 0;\n\n    // Process each connection\n    for (const connection of connections) {\n      await io.runTask(`update-balances-${connection.id}`, async () => {\n        try {\n          // Get fresh account data from Plaid\n          const plaidAccounts = await getAccounts(connection.accessToken);\n\n          // Update each account's balance\n          for (const plaidAccount of plaidAccounts) {\n            const bankAccount = connection.accounts.find(\n              (acc) => acc.plaidAccountId === plaidAccount.plaidAccountId\n            );\n\n            if (bankAccount) {\n              await prisma.bankAccount.update({\n                data: {\n                  availableBalance: plaidAccount.availableBalance,\n                  balanceLastUpdated: new Date(),\n                  currentBalance: plaidAccount.currentBalance,\n                  limit: plaidAccount.limit,\n                },\n                where: { id: bankAccount.id },\n              });\n              accountsUpdated++;\n            }\n          }\n\n          // Update connection's timestamp\n          await prisma.bankConnection.update({\n            data: {\n              balanceLastUpdated: new Date(),\n            },\n            where: { id: connection.id },\n          });\n\n          successCount++;\n        } catch (error) {\n          const errorMessage =\n            error instanceof Error ? error.message : String(error);\n          await io.logger.error(\n            `Error updating balances for connection ${connection.id}: ${errorMessage}`\n          );\n\n          errorCount++;\n\n          // If the error seems to be authentication-related, mark for reconnection\n          if (\n            errorMessage.includes('ITEM_LOGIN_REQUIRED') ||\n            errorMessage.includes('INVALID_ACCESS_TOKEN') ||\n            errorMessage.includes('INVALID_CREDENTIALS')\n          ) {\n            await prisma.bankConnection.update({\n              data: {\n                errorMessage: errorMessage,\n                status: BankConnectionStatus.REQUIRES_REAUTH,\n              },\n              where: { id: connection.id },\n            });\n          }\n        }\n      });\n    }\n\n    return {\n      accountsUpdated,\n      connectionsProcessed: connections.length,\n      errorCount,\n      successCount,\n    };\n  },\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA,oBAAqC;AAY9B,IAAM,oBAAoB,OAAO,UAAU;AAAA,EAChD,IAAI;AAAA,EACJ,MAAM;AAAA,EACN,SAAS,YAAY;AAAA,IACnB,MAAM;AAAA;AAAA,EACR,CAAC;AAAA,EACD,SAAS;AAAA,EACT,KAAK,OAAO,SAAS,OAAO;AAC1B,UAAM,GAAG,OAAO,KAAK,6BAA6B;AAGlD,UAAM,cAAc,MAAM,GAAG,QAAQ,0BAA0B,YAAY;AACzE,aAAO,MAAM,OAAO,eAAe,SAAS;AAAA,QAC1C,SAAS;AAAA,UACP,UAAU;AAAA,YACR,OAAO;AAAA,cACL,QAAQ;AAAA,YACV;AAAA,UACF;AAAA,QACF;AAAA,QACA,SAAS;AAAA,UACP,oBAAoB;AAAA;AAAA,QACtB;AAAA,QACA,MAAM;AAAA;AAAA,QACN,OAAO;AAAA,UACL,QAAQ,mCAAqB;AAAA,QAC/B;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAED,UAAM,GAAG,OAAO;AAAA,MACd,SAAS,YAAY,MAAM;AAAA,IAC7B;AAEA,QAAI,eAAe;AACnB,QAAI,aAAa;AACjB,QAAI,kBAAkB;AAGtB,eAAW,cAAc,aAAa;AACpC,YAAM,GAAG,QAAQ,mBAAmB,WAAW,EAAE,IAAI,YAAY;AAC/D,YAAI;AAEF,gBAAM,gBAAgB,MAAM,YAAY,WAAW,WAAW;AAG9D,qBAAW,gBAAgB,eAAe;AACxC,kBAAM,cAAc,WAAW,SAAS;AAAA,cACtC,CAAC,QAAQ,IAAI,mBAAmB,aAAa;AAAA,YAC/C;AAEA,gBAAI,aAAa;AACf,oBAAM,OAAO,YAAY,OAAO;AAAA,gBAC9B,MAAM;AAAA,kBACJ,kBAAkB,aAAa;AAAA,kBAC/B,oBAAoB,oBAAI,KAAK;AAAA,kBAC7B,gBAAgB,aAAa;AAAA,kBAC7B,OAAO,aAAa;AAAA,gBACtB;AAAA,gBACA,OAAO,EAAE,IAAI,YAAY,GAAG;AAAA,cAC9B,CAAC;AACD;AAAA,YACF;AAAA,UACF;AAGA,gBAAM,OAAO,eAAe,OAAO;AAAA,YACjC,MAAM;AAAA,cACJ,oBAAoB,oBAAI,KAAK;AAAA,YAC/B;AAAA,YACA,OAAO,EAAE,IAAI,WAAW,GAAG;AAAA,UAC7B,CAAC;AAED;AAAA,QACF,SAAS,OAAO;AACd,gBAAM,eACJ,iBAAiB,QAAQ,MAAM,UAAU,OAAO,KAAK;AACvD,gBAAM,GAAG,OAAO;AAAA,YACd,0CAA0C,WAAW,EAAE,KAAK,YAAY;AAAA,UAC1E;AAEA;AAGA,cACE,aAAa,SAAS,qBAAqB,KAC3C,aAAa,SAAS,sBAAsB,KAC5C,aAAa,SAAS,qBAAqB,GAC3C;AACA,kBAAM,OAAO,eAAe,OAAO;AAAA,cACjC,MAAM;AAAA,gBACJ;AAAA,gBACA,QAAQ,mCAAqB;AAAA,cAC/B;AAAA,cACA,OAAO,EAAE,IAAI,WAAW,GAAG;AAAA,YAC7B,CAAC;AAAA,UACH;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AAEA,WAAO;AAAA,MACL;AAAA,MACA,sBAAsB,YAAY;AAAA,MAClC;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF,CAAC;",
  "names": []
}
