{
  "version": 3,
  "sources": ["../../../../../../../../../../../../../../../src/jobs/tasks/bank/scheduler/disconnected-scheduler.ts"],
  "sourcesContent": ["import { BankConnectionStatus } from '@prisma/client';\nimport { cronTrigger } from '@trigger.dev/sdk';\nimport { subDays } from 'date-fns';\n\nimport { prisma } from '@/server/db';\n\nimport { client } from '../../../client';\n\n/**\n * This job runs on a schedule to find disconnected bank connections and\n * notifies users about them. It helps maintain data quality by ensuring users\n * reconnect their accounts when needed.\n */\nexport const disconnectedSchedulerJob = client.defineJob({\n  id: 'disconnected-scheduler-job',\n  name: 'Disconnected Connections Scheduler',\n  trigger: cronTrigger({\n    cron: '0 12 * * *', // Run daily at noon\n  }),\n  version: '1.0.0',\n  run: async (payload, io) => {\n    await io.logger.info('Starting disconnected connections scheduler');\n\n    // Find disconnected connections that need attention\n    const disconnectedConnections = await io.runTask(\n      'find-disconnected-connections',\n      async () => {\n        return await prisma.bankConnection.findMany({\n          include: {\n            accounts: {\n              select: {\n                id: true,\n                name: true,\n              },\n              where: {\n                enabled: true,\n              },\n            },\n            user: {\n              select: {\n                id: true,\n                email: true,\n                name: true,\n              },\n            },\n          },\n          where: {\n            // Only get connections that haven't been notified in the last 3 days\n            lastNotifiedAt: {\n              lt: subDays(new Date(), 3),\n            },\n            status: {\n              in: [\n                BankConnectionStatus.ERROR,\n                BankConnectionStatus.LOGIN_REQUIRED,\n                BankConnectionStatus.REQUIRES_ATTENTION,\n              ],\n            },\n          },\n        });\n      }\n    );\n\n    await io.logger.info(\n      `Found ${disconnectedConnections.length} disconnected connections`\n    );\n\n    // Process each disconnected connection\n    let notificationsSent = 0;\n\n    for (const connection of disconnectedConnections) {\n      await io.runTask(`process-disconnected-${connection.id}`, async () => {\n        // Skip if no email or no active accounts\n        if (!connection.user.email || connection.accounts.length === 0) {\n          return;\n        }\n\n        // Send notification to user\n        await client.sendEvent({\n          name: 'disconnected-notification-trigger',\n          payload: {\n            accountCount: connection.accounts.length,\n            connectionId: connection.id,\n            email: connection.user.email,\n            institutionName: connection.institutionName,\n            name: connection.user.name,\n            status: connection.status,\n            userId: connection.user.id,\n          },\n        });\n\n        // Update last notified timestamp\n        await prisma.bankConnection.update({\n          data: {\n            lastNotifiedAt: new Date(),\n            notificationCount: { increment: 1 },\n          },\n          where: { id: connection.id },\n        });\n\n        // Record this activity\n        await prisma.userActivity.create({\n          data: {\n            detail: `Disconnected connection notification for ${connection.institutionName}`,\n            metadata: {\n              connectionId: connection.id,\n              status: connection.status,\n            },\n            type: 'NOTIFICATION_SENT',\n            userId: connection.user.id,\n          },\n        });\n\n        notificationsSent++;\n      });\n    }\n\n    // Auto-disable connections that have been in error state for too long\n    const abandonedConnections = await io.runTask(\n      'find-abandoned-connections',\n      async () => {\n        return await prisma.bankConnection.findMany({\n          where: {\n            // Connections that have been in error state for more than 30 days\n            AND: [\n              {\n                lastStatusChangedAt: {\n                  lt: subDays(new Date(), 30),\n                },\n              },\n              {\n                notificationCount: {\n                  gte: 5, // At least 5 notifications have been sent\n                },\n              },\n            ],\n            status: {\n              in: [\n                BankConnectionStatus.ERROR,\n                BankConnectionStatus.LOGIN_REQUIRED,\n                BankConnectionStatus.REQUIRES_ATTENTION,\n              ],\n            },\n          },\n        });\n      }\n    );\n\n    let disabledCount = 0;\n\n    for (const connection of abandonedConnections) {\n      await io.runTask(`disable-abandoned-${connection.id}`, async () => {\n        // Disable the connection\n        await prisma.bankConnection.update({\n          data: {\n            disabled: true,\n            status: BankConnectionStatus.DISCONNECTED,\n          },\n          where: { id: connection.id },\n        });\n\n        // Disable all accounts for this connection\n        await prisma.bankAccount.updateMany({\n          data: {\n            enabled: false,\n            status: 'DISCONNECTED',\n          },\n          where: { bankConnectionId: connection.id },\n        });\n\n        disabledCount++;\n      });\n    }\n\n    await io.logger.info(\n      `Completed scheduler run. Sent ${notificationsSent} notifications and disabled ${disabledCount} abandoned connections`\n    );\n\n    return {\n      connectionsProcessed: disconnectedConnections.length,\n      disabledCount,\n      notificationsSent,\n    };\n  },\n});\n"],
  "mappings": "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",
  "names": []
}
