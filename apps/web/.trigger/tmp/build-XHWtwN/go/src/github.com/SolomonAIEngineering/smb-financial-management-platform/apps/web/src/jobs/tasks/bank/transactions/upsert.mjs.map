{
  "version": 3,
  "sources": ["../../../../../../../../../../../../../../../src/jobs/tasks/bank/transactions/upsert.ts"],
  "sourcesContent": ["import { AccountStatus, TransactionCategory } from '@prisma/client';\nimport { eventTrigger } from '@trigger.dev/sdk';\nimport { addDays, format, subDays } from 'date-fns';\n\nimport { prisma } from '@/server/db';\nimport { getTransactions } from '@/server/services/plaid';\n\nimport { client } from '../../../client';\n\n/**\n * This job handles upserting transactions from Plaid to the database It\n * processes transactions in batches to avoid hitting rate limits and handles\n * duplicate detection and transaction updates\n */\nexport const upsertTransactionsJob = client.defineJob({\n  id: 'upsert-transactions-job',\n  name: 'Upsert Transactions',\n  trigger: eventTrigger({\n    name: 'upsert-transactions',\n  }),\n  version: '1.0.0',\n  run: async (payload, io) => {\n    const { accessToken, bankAccountId, endDate, startDate, userId } = payload;\n\n    await io.logger.info(\n      `Starting transaction upsert for account ${bankAccountId}`\n    );\n\n    // Get the bank account from the database\n    const bankAccount = await io.runTask('get-bank-account', async () => {\n      return await prisma.bankAccount.findUnique({\n        select: {\n          id: true,\n          bankConnectionId: true,\n          name: true,\n          plaidAccountId: true,\n          status: true,\n          updatedAt: true,\n        },\n        where: { id: bankAccountId },\n      });\n    });\n\n    if (!bankAccount) {\n      await io.logger.error(`Bank account ${bankAccountId} not found`);\n\n      throw new Error(`Bank account ${bankAccountId} not found`);\n    }\n    if (bankAccount.status !== 'ACTIVE') {\n      await io.logger.info(\n        `Bank account ${bankAccountId} is not active, skipping sync`\n      );\n\n      return {\n        reason: 'Account not active',\n        status: 'skipped',\n      };\n    }\n\n    // Set sync status to in progress\n    await prisma.bankAccount.update({\n      data: {\n        status: AccountStatus.PENDING,\n        updatedAt: new Date(),\n      },\n      where: { id: bankAccountId },\n    });\n\n    try {\n      // Determine date range for transaction fetch\n      const today = new Date();\n      const defaultStartDate = bankAccount.updatedAt\n        ? subDays(bankAccount.updatedAt, 5) // Overlap to catch pending transactions\n        : subDays(today, 90); // Initial sync goes back 90 days\n      const defaultEndDate = addDays(today, 1); // Include today's transactions\n\n      const start = startDate ? new Date(startDate) : defaultStartDate;\n      const end = endDate ? new Date(endDate) : defaultEndDate;\n\n      // Format dates as strings for Plaid API\n      const startDateStr = format(start, 'yyyy-MM-dd');\n      const endDateStr = format(end, 'yyyy-MM-dd');\n\n      // Get the bank connection for this account\n      const bankConnection = await prisma.bankConnection.findUnique({\n        where: { id: bankAccount.bankConnectionId },\n      });\n\n      if (!bankConnection) {\n        throw new Error(\n          `Bank connection not found for account ${bankAccountId}`\n        );\n      }\n\n      // Get all accounts for this connection to pass to getTransactions\n      const bankAccounts = await prisma.bankAccount.findMany({\n        where: { bankConnectionId: bankAccount.bankConnectionId },\n      });\n\n      // Fetch transactions from Plaid\n      const plaidTransactions = await io.runTask(\n        'fetch-plaid-transactions',\n        async () => {\n          return await getTransactions(\n            accessToken,\n            bankConnection,\n            bankAccounts,\n            startDateStr,\n            endDateStr\n          );\n        }\n      );\n\n      await io.logger.info(\n        `Fetched ${plaidTransactions.length} transactions from Plaid`\n      );\n\n      // Process the transactions in batches\n      const transactionCount = await io.runTask(\n        'process-transactions',\n        async () => {\n          let newCount = 0;\n          let updatedCount = 0;\n\n          for (const plaidTransaction of plaidTransactions) {\n            // Check if the transaction already exists\n            const existingTransaction = await prisma.transaction.findFirst({\n              where: {\n                bankAccountId: bankAccountId,\n                plaidTransactionId: plaidTransaction.plaidTransactionId,\n              },\n            });\n\n            // Determine category\n            let category: TransactionCategory | null = null;\n\n            if (\n              plaidTransaction.originalCategory &&\n              plaidTransaction.originalCategory.length > 0\n            ) {\n              // Map the Plaid category to our category enum\n              try {\n                category = mapPlaidCategoryToTransactionCategory(\n                  plaidTransaction.originalCategory.split(',')[0].trim()\n                );\n              } catch (error) {\n                await io.logger.warn(\n                  `Could not map category for transaction ${plaidTransaction.plaidTransactionId}: ${error}`\n                );\n              }\n            }\n            if (existingTransaction) {\n              // Update the existing transaction\n              await prisma.transaction.update({\n                data: {\n                  amount: plaidTransaction.amount,\n                  category: category,\n                  date: new Date(plaidTransaction.date),\n                  merchantName: plaidTransaction.merchantName || null,\n                  name: plaidTransaction.name,\n                  pending: plaidTransaction.pending,\n                  updatedAt: new Date(),\n                },\n                where: { id: existingTransaction.id },\n              });\n              updatedCount++;\n            } else {\n              // Create a new transaction\n              await prisma.transaction.create({\n                data: {\n                  amount: plaidTransaction.amount,\n                  bankAccount: { connect: { id: bankAccountId } },\n                  bankConnection: {\n                    connect: { id: bankAccount.bankConnectionId },\n                  },\n                  category: category,\n                  date: new Date(plaidTransaction.date),\n                  merchantName: plaidTransaction.merchantName || null,\n                  name: plaidTransaction.name,\n                  pending: plaidTransaction.pending,\n                  plaidTransactionId: plaidTransaction.plaidTransactionId,\n                  user: { connect: { id: userId } },\n                },\n              });\n              newCount++;\n            }\n          }\n\n          return { newCount, updatedCount };\n        }\n      );\n\n      // Update bank account with last synced time\n      await prisma.bankAccount.update({\n        data: {\n          status: AccountStatus.ACTIVE,\n          updatedAt: new Date(),\n        },\n        where: { id: bankAccountId },\n      });\n\n      await io.logger.info(\n        `Transaction sync completed. Added ${transactionCount.newCount}, updated ${transactionCount.updatedCount} transactions`\n      );\n\n      return {\n        newTransactions: transactionCount.newCount,\n        status: 'success',\n        totalTransactions: plaidTransactions.length,\n        updatedTransactions: transactionCount.updatedCount,\n      };\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n      await io.logger.error(`Transaction sync failed: ${errorMessage}`);\n\n      // Update bank account with error information\n      await prisma.bankAccount.update({\n        data: {\n          status: AccountStatus.INACTIVE,\n          updatedAt: new Date(),\n        },\n        where: { id: bankAccountId },\n      });\n\n      throw error;\n    }\n  },\n});\n\n/** Map Plaid categories to our TransactionCategory enum */\nfunction mapPlaidCategoryToTransactionCategory(\n  plaidCategory: string\n): TransactionCategory | null {\n  const categoryMap: Record<string, TransactionCategory> = {\n    'Bank Fees': TransactionCategory.BANK_FEES,\n    'Bills and Utilities': TransactionCategory.UTILITIES,\n    Education: TransactionCategory.OTHER,\n    Entertainment: TransactionCategory.ENTERTAINMENT,\n    'Food and Drink': TransactionCategory.FOOD_AND_DRINK,\n    'General Merchandise': TransactionCategory.GENERAL_MERCHANDISE,\n    Groceries: TransactionCategory.FOOD_AND_DRINK,\n    Healthcare: TransactionCategory.MEDICAL,\n    Home: TransactionCategory.HOME_IMPROVEMENT,\n    Income: TransactionCategory.INCOME,\n    Insurance: TransactionCategory.OTHER,\n    Loan: TransactionCategory.LOAN_PAYMENTS,\n    Medical: TransactionCategory.MEDICAL,\n    Payment: TransactionCategory.TRANSFER,\n    'Personal Care': TransactionCategory.PERSONAL_CARE,\n    'Professional Services': TransactionCategory.GENERAL_SERVICES,\n    Recreation: TransactionCategory.ENTERTAINMENT,\n    Rent: TransactionCategory.HOME_IMPROVEMENT,\n    Restaurants: TransactionCategory.FOOD_AND_DRINK,\n    Shopping: TransactionCategory.GENERAL_MERCHANDISE,\n    Tax: TransactionCategory.GOVERNMENT_AND_NON_PROFIT,\n    Transfer: TransactionCategory.TRANSFER,\n    Transportation: TransactionCategory.TRANSPORTATION,\n    Travel: TransactionCategory.TRAVEL,\n  };\n\n  return categoryMap[plaidCategory] || TransactionCategory.OTHER;\n}\n"],
  "mappings": "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",
  "names": []
}
