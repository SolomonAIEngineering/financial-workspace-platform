{
  "version": 3,
  "sources": ["../../../../../../../../../../../../../../../src/jobs/tasks/bank/sync/account.ts"],
  "sourcesContent": ["import {\n  AccountStatus,\n  AccountType,\n  BankConnectionStatus,\n} from '@prisma/client';\nimport { eventTrigger } from '@trigger.dev/sdk';\n\nimport { prisma } from '@/server/db';\nimport { getAccounts } from '@/server/services/plaid';\n\nimport { client } from '../../../client';\n\n/**\n * This job syncs account data from Plaid to our database It updates account\n * balances, names, and other metadata\n */\nexport const syncAccountJob = client.defineJob({\n  id: 'sync-account-job',\n  name: 'Sync Bank Account',\n  trigger: eventTrigger({\n    name: 'sync-account',\n  }),\n  version: '1.0.0',\n  run: async (payload, io) => {\n    const { accessToken, bankAccountId, manualSync = false, userId } = payload;\n\n    await io.logger.info(`Starting account sync for account ${bankAccountId}`);\n\n    // Get the bank account from the database\n    const bankAccount = await io.runTask('get-bank-account', async () => {\n      return await prisma.bankAccount.findUnique({\n        select: {\n          id: true,\n          name: true,\n          plaidAccountId: true,\n          status: true,\n          updatedAt: true,\n        },\n        where: { id: bankAccountId },\n      });\n    });\n\n    if (!bankAccount) {\n      await io.logger.error(`Bank account ${bankAccountId} not found`);\n\n      throw new Error(`Bank account ${bankAccountId} not found`);\n    }\n    if (bankAccount.status !== 'ACTIVE' && !manualSync) {\n      await io.logger.info(\n        `Bank account ${bankAccountId} is not active and not manually synced, skipping`\n      );\n\n      return {\n        reason: 'Account not active',\n        status: 'skipped',\n      };\n    }\n\n    try {\n      // Fetch account data from Plaid\n      const plaidAccounts = await io.runTask(\n        'fetch-plaid-accounts',\n        async () => {\n          return await getAccounts(accessToken);\n        }\n      );\n\n      // Find the matching account\n      const plaidAccount = plaidAccounts.find(\n        (acc) => acc.plaidAccountId === bankAccount.plaidAccountId\n      );\n\n      if (!plaidAccount) {\n        await io.logger.error(\n          `Plaid account not found for bank account ${bankAccountId}`\n        );\n\n        throw new Error(\n          `Plaid account not found for bank account ${bankAccountId}`\n        );\n      }\n\n      // Update the bank account with the latest information\n      await io.runTask('update-bank-account', async () => {\n        await prisma.bankAccount.update({\n          data: {\n            availableBalance: plaidAccount.availableBalance,\n            balanceLastUpdated: new Date(),\n            currentBalance: plaidAccount.currentBalance,\n            isoCurrencyCode: plaidAccount.isoCurrencyCode,\n            limit: plaidAccount.limit,\n            mask: plaidAccount.mask,\n            name: plaidAccount.name || bankAccount.name,\n            officialName: plaidAccount.officialName,\n            status: AccountStatus.ACTIVE,\n            subtype: plaidAccount.subtype,\n            type: mapPlaidAccountType(plaidAccount.type, plaidAccount.subtype),\n            updatedAt: new Date(),\n          },\n          where: { id: bankAccountId },\n        });\n      });\n\n      // If manually synced, also trigger a transaction sync\n      if (manualSync) {\n        await client.sendEvent({\n          name: 'upsert-transactions-trigger',\n          payload: {\n            accessToken,\n            bankAccountId,\n            userId,\n          },\n        });\n      }\n\n      await io.logger.info(`Account sync completed for ${bankAccountId}`);\n\n      return {\n        accountId: bankAccountId,\n        balance: {\n          available: plaidAccount.availableBalance,\n          current: plaidAccount.currentBalance,\n        },\n        status: 'success',\n      };\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n      await io.logger.error(`Account sync failed: ${errorMessage}`);\n\n      // Update bank account with error information\n      await prisma.bankAccount.update({\n        data: {\n          status: AccountStatus.INACTIVE,\n          updatedAt: new Date(),\n        },\n        where: { id: bankAccountId },\n      });\n\n      // Get the bank connection ID for this account\n      const bankConnectionInfo = await prisma.bankAccount.findUnique({\n        select: { bankConnectionId: true },\n        where: { id: bankAccountId },\n      });\n\n      if (bankConnectionInfo) {\n        // Update the connection status\n        await prisma.bankConnection.update({\n          data: {\n            errorMessage: errorMessage,\n            status: BankConnectionStatus.REQUIRES_ATTENTION,\n            updatedAt: new Date(),\n          },\n          where: { id: bankConnectionInfo.bankConnectionId },\n        });\n      }\n\n      throw error;\n    }\n  },\n});\n\n/** Map Plaid account types to our AccountType enum */\nfunction mapPlaidAccountType(type: string, subtype?: string): AccountType {\n  if (type === 'depository') {\n    if (subtype === 'checking') return AccountType.DEPOSITORY;\n    if (subtype === 'savings') return AccountType.DEPOSITORY;\n\n    return AccountType.DEPOSITORY;\n  }\n  if (type === 'credit') return AccountType.CREDIT;\n  if (type === 'loan') return AccountType.LOAN;\n  if (type === 'investment') return AccountType.INVESTMENT;\n\n  return AccountType.OTHER;\n}\n"],
  "mappings": "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",
  "names": []
}
