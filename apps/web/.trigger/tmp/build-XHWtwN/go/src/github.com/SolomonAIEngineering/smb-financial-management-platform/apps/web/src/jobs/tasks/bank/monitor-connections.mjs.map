{
  "version": 3,
  "sources": ["../../../../../../../../../../../../../../src/jobs/tasks/bank/monitor-connections.ts"],
  "sourcesContent": ["import { BankConnectionStatus } from '@prisma/client';\nimport { cronTrigger } from '@trigger.dev/sdk';\n\nimport { prisma } from '@/server/db';\nimport { getItemDetails } from '@/server/services/plaid';\n\nimport { client } from '../../client';\n\n/**\n * This job monitors bank connections for issues and automatically updates their\n * status if there are any problems detected.\n */\nexport const monitorBankConnectionsJob = client.defineJob({\n  id: 'monitor-bank-connections-job',\n  name: 'Monitor Bank Connections',\n  trigger: cronTrigger({\n    cron: '0 */8 * * *', // Every 8 hours\n  }),\n  version: '1.0.0',\n  run: async (payload, io) => {\n    await io.logger.info('Starting bank connection health monitoring');\n\n    // Find active connections to check\n    const connections = await io.runTask('get-active-connections', async () => {\n      return await prisma.bankConnection.findMany({\n        orderBy: {\n          lastCheckedAt: 'asc',\n        },\n        select: {\n          id: true,\n          accessToken: true,\n          institutionId: true,\n          institutionName: true,\n          lastCheckedAt: true,\n          userId: true,\n        },\n        take: 100, // Process in batches\n        where: {\n          status: BankConnectionStatus.ACTIVE,\n        },\n      });\n    });\n\n    await io.logger.info(`Found ${connections.length} connections to check`);\n\n    let healthy = 0;\n    let requiresReauth = 0;\n    let errored = 0;\n\n    // Process each connection\n    for (const connection of connections) {\n      await io.runTask(`check-connection-${connection.id}`, async () => {\n        try {\n          // Check item status through Plaid\n          const itemDetails = await getItemDetails(connection.accessToken);\n\n          // Update last checked timestamp\n          await prisma.bankConnection.update({\n            data: { lastCheckedAt: new Date() },\n            where: { id: connection.id },\n          });\n\n          // Check for item status issues that require attention\n          if (\n            itemDetails.status &&\n            typeof itemDetails.status === 'object' &&\n            'error_code' in itemDetails.status\n          ) {\n            const errorMessage = String(\n              itemDetails.status.error_code || 'Unknown error'\n            );\n            await io.logger.warn(\n              `Error with connection ${connection.id}: ${errorMessage}`\n            );\n\n            if (errorMessage.includes('ITEM_LOGIN_REQUIRED')) {\n              // Requires re-authentication\n              await prisma.bankConnection.update({\n                data: {\n                  errorMessage: errorMessage,\n                  status: BankConnectionStatus.REQUIRES_REAUTH,\n                },\n                where: { id: connection.id },\n              });\n              requiresReauth++;\n            } else {\n              // General error\n              await prisma.bankConnection.update({\n                data: {\n                  errorMessage: errorMessage,\n                  status: BankConnectionStatus.ERROR,\n                },\n                where: { id: connection.id },\n              });\n              errored++;\n            }\n          } else {\n            // Connection is healthy\n            healthy++;\n          }\n        } catch (error) {\n          const errorMessage =\n            error instanceof Error ? error.message : String(error);\n          await io.logger.error(\n            `Error checking connection ${connection.id}: ${errorMessage}`\n          );\n\n          // Update connection status to error\n          await prisma.bankConnection.update({\n            data: {\n              errorMessage: errorMessage,\n              status: BankConnectionStatus.ERROR,\n            },\n            where: { id: connection.id },\n          });\n          errored++;\n        }\n      });\n    }\n\n    return {\n      connectionsChecked: connections.length,\n      errored,\n      healthy,\n      requiresReauth,\n    };\n  },\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA,oBAAqC;AAY9B,IAAM,4BAA4B,OAAO,UAAU;AAAA,EACxD,IAAI;AAAA,EACJ,MAAM;AAAA,EACN,SAAS,YAAY;AAAA,IACnB,MAAM;AAAA;AAAA,EACR,CAAC;AAAA,EACD,SAAS;AAAA,EACT,KAAK,OAAO,SAAS,OAAO;AAC1B,UAAM,GAAG,OAAO,KAAK,4CAA4C;AAGjE,UAAM,cAAc,MAAM,GAAG,QAAQ,0BAA0B,YAAY;AACzE,aAAO,MAAM,OAAO,eAAe,SAAS;AAAA,QAC1C,SAAS;AAAA,UACP,eAAe;AAAA,QACjB;AAAA,QACA,QAAQ;AAAA,UACN,IAAI;AAAA,UACJ,aAAa;AAAA,UACb,eAAe;AAAA,UACf,iBAAiB;AAAA,UACjB,eAAe;AAAA,UACf,QAAQ;AAAA,QACV;AAAA,QACA,MAAM;AAAA;AAAA,QACN,OAAO;AAAA,UACL,QAAQ,mCAAqB;AAAA,QAC/B;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAED,UAAM,GAAG,OAAO,KAAK,SAAS,YAAY,MAAM,uBAAuB;AAEvE,QAAI,UAAU;AACd,QAAI,iBAAiB;AACrB,QAAI,UAAU;AAGd,eAAW,cAAc,aAAa;AACpC,YAAM,GAAG,QAAQ,oBAAoB,WAAW,EAAE,IAAI,YAAY;AAChE,YAAI;AAEF,gBAAM,cAAc,MAAM,eAAe,WAAW,WAAW;AAG/D,gBAAM,OAAO,eAAe,OAAO;AAAA,YACjC,MAAM,EAAE,eAAe,oBAAI,KAAK,EAAE;AAAA,YAClC,OAAO,EAAE,IAAI,WAAW,GAAG;AAAA,UAC7B,CAAC;AAGD,cACE,YAAY,UACZ,OAAO,YAAY,WAAW,YAC9B,gBAAgB,YAAY,QAC5B;AACA,kBAAM,eAAe;AAAA,cACnB,YAAY,OAAO,cAAc;AAAA,YACnC;AACA,kBAAM,GAAG,OAAO;AAAA,cACd,yBAAyB,WAAW,EAAE,KAAK,YAAY;AAAA,YACzD;AAEA,gBAAI,aAAa,SAAS,qBAAqB,GAAG;AAEhD,oBAAM,OAAO,eAAe,OAAO;AAAA,gBACjC,MAAM;AAAA,kBACJ;AAAA,kBACA,QAAQ,mCAAqB;AAAA,gBAC/B;AAAA,gBACA,OAAO,EAAE,IAAI,WAAW,GAAG;AAAA,cAC7B,CAAC;AACD;AAAA,YACF,OAAO;AAEL,oBAAM,OAAO,eAAe,OAAO;AAAA,gBACjC,MAAM;AAAA,kBACJ;AAAA,kBACA,QAAQ,mCAAqB;AAAA,gBAC/B;AAAA,gBACA,OAAO,EAAE,IAAI,WAAW,GAAG;AAAA,cAC7B,CAAC;AACD;AAAA,YACF;AAAA,UACF,OAAO;AAEL;AAAA,UACF;AAAA,QACF,SAAS,OAAO;AACd,gBAAM,eACJ,iBAAiB,QAAQ,MAAM,UAAU,OAAO,KAAK;AACvD,gBAAM,GAAG,OAAO;AAAA,YACd,6BAA6B,WAAW,EAAE,KAAK,YAAY;AAAA,UAC7D;AAGA,gBAAM,OAAO,eAAe,OAAO;AAAA,YACjC,MAAM;AAAA,cACJ;AAAA,cACA,QAAQ,mCAAqB;AAAA,YAC/B;AAAA,YACA,OAAO,EAAE,IAAI,WAAW,GAAG;AAAA,UAC7B,CAAC;AACD;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AAEA,WAAO;AAAA,MACL,oBAAoB,YAAY;AAAA,MAChC;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF,CAAC;",
  "names": []
}
