{
  "version": 3,
  "sources": ["../../../../../../../../../../../../../../../src/jobs/tasks/bank/setup/initial.ts"],
  "sourcesContent": ["import {\n  type BankAccount,\n  AccountStatus,\n  AccountType,\n  BankConnectionStatus,\n} from '@prisma/client';\nimport { eventTrigger } from '@trigger.dev/sdk';\n\nimport { prisma } from '@/server/db';\nimport { getAccounts, getInstitutionById } from '@/server/services/plaid';\n\nimport { client } from '../../../client';\n\n/**\n * This job handles the initial setup of a bank connection after a user has\n * successfully authenticated with Plaid. It creates the bank connection record\n * and all associated bank accounts, then triggers the initial sync.\n */\nexport const initialSetupJob = client.defineJob({\n  id: 'initial-setup-job',\n  name: 'Initial Bank Connection Setup',\n  trigger: eventTrigger({\n    name: 'initial-setup',\n  }),\n  version: '1.0.0',\n  run: async (payload, io) => {\n    const { accessToken, institutionId, itemId, publicToken, userId } = payload;\n\n    await io.logger.info(\n      `Starting initial setup for institution ${institutionId}`\n    );\n\n    try {\n      // Get institution details\n      const institution = await io.runTask('get-institution', async () => {\n        return await getInstitutionById(institutionId);\n      });\n\n      // Create the bank connection record\n      const bankConnection = await io.runTask(\n        'create-bank-connection',\n        async () => {\n          return await prisma.bankConnection.create({\n            data: {\n              accessToken,\n              createdAt: new Date(),\n              institutionId,\n              institutionName: institution.name,\n              itemId, // Required field\n              lastSyncedAt: new Date(),\n              logo: institution.logo,\n              primaryColor: institution.primaryColor,\n              status: BankConnectionStatus.ACTIVE,\n              updatedAt: new Date(),\n              userId,\n            },\n          });\n        }\n      );\n\n      // Get accounts from Plaid\n      const plaidAccounts = await io.runTask('get-plaid-accounts', async () => {\n        return await getAccounts(accessToken);\n      });\n\n      await io.logger.info(`Found ${plaidAccounts.length} accounts`);\n\n      // Create bank accounts\n      const bankAccounts = await io.runTask(\n        'create-bank-accounts',\n        async () => {\n          // Properly type the accounts array\n          const accounts: BankAccount[] = [];\n\n          for (const plaidAccount of plaidAccounts) {\n            const account = await prisma.bankAccount.create({\n              data: {\n                availableBalance: plaidAccount.availableBalance,\n                bankConnectionId: bankConnection.id,\n                createdAt: new Date(),\n                currentBalance: plaidAccount.currentBalance,\n                enabled: true,\n                isoCurrencyCode: plaidAccount.isoCurrencyCode,\n                limit: plaidAccount.limit,\n                mask: plaidAccount.mask,\n                name: plaidAccount.name,\n                officialName: plaidAccount.officialName,\n                plaidAccountId: plaidAccount.plaidAccountId,\n                status: AccountStatus.ACTIVE,\n                subtype: plaidAccount.subtype,\n                type: mapPlaidAccountType(\n                  plaidAccount.type,\n                  plaidAccount.subtype\n                ),\n                updatedAt: new Date(),\n                userId,\n              },\n            });\n            accounts.push(account);\n          }\n\n          return accounts;\n        }\n      );\n\n      await io.logger.info(`Created ${bankAccounts.length} bank accounts`);\n\n      // Trigger initial account and transaction syncs\n      // We stagger these to avoid hitting rate limits\n      let delayCounter = 0;\n\n      for (const account of bankAccounts) {\n        // Trigger a complete sync for each account (delays increasing by 5 seconds)\n        await client.sendEvent({\n          // Add a context with delay information instead of using delay property\n          context: {\n            delaySeconds: delayCounter * 5,\n          },\n          name: 'sync-account-trigger',\n          payload: {\n            accessToken,\n            bankAccountId: account.id,\n            manualSync: true, // Force sync even for accounts that might have issues\n            userId,\n          },\n        });\n        delayCounter++;\n      }\n\n      // Record this activity\n      await prisma.userActivity.create({\n        data: {\n          detail: `Connected ${institution.name} with ${bankAccounts.length} accounts`,\n          metadata: {\n            accountCount: bankAccounts.length,\n            bankConnectionId: bankConnection.id,\n          },\n          type: 'ACCOUNT_CONNECTED',\n          userId,\n        },\n      });\n\n      await io.logger.info(`Initial setup completed for ${institution.name}`);\n\n      return {\n        accountCount: bankAccounts.length,\n        bankConnectionId: bankConnection.id,\n        status: 'success',\n      };\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n      await io.logger.error(`Initial setup failed: ${errorMessage}`);\n\n      // If we have created a bank connection, update its status\n      if (institutionId) {\n        const existingConnection = await prisma.bankConnection.findFirst({\n          orderBy: {\n            createdAt: 'desc',\n          },\n          where: {\n            institutionId,\n            userId,\n          },\n        });\n\n        if (existingConnection) {\n          await prisma.bankConnection.update({\n            data: {\n              errorMessage: errorMessage,\n              status: BankConnectionStatus.ERROR,\n            },\n            where: { id: existingConnection.id },\n          });\n        }\n      }\n\n      throw error;\n    }\n  },\n});\n\n/** Map Plaid account types to our AccountType enum */\nfunction mapPlaidAccountType(type: string, subtype?: string): AccountType {\n  if (type === 'depository') {\n    if (subtype === 'checking') return AccountType.DEPOSITORY;\n    if (subtype === 'savings') return AccountType.DEPOSITORY;\n\n    return AccountType.DEPOSITORY;\n  }\n  if (type === 'credit') return AccountType.CREDIT;\n  if (type === 'loan') return AccountType.LOAN;\n  if (type === 'investment') return AccountType.INVESTMENT;\n\n  return AccountType.OTHER;\n}\n"],
  "mappings": "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",
  "names": []
}
