{
  "version": 3,
  "sources": ["../../../../../../../../../../../../../../../src/jobs/tasks/bank/sync/connection.ts"],
  "sourcesContent": ["import { BankConnectionStatus } from '@prisma/client';\nimport { eventTrigger } from '@trigger.dev/sdk';\n\nimport { prisma } from '@/server/db';\nimport { getItemDetails } from '@/server/services/plaid';\n\nimport { client } from '../../../client';\n\n/**\n * This job handles syncing a bank connection and all its accounts It's a\n * fan-out job that triggers sync-account for each account\n */\nexport const syncConnectionJob = client.defineJob({\n  id: 'sync-connection-job',\n  name: 'Sync Bank Connection',\n  trigger: eventTrigger({\n    name: 'sync-connection',\n  }),\n  version: '1.0.0',\n  run: async (payload, io) => {\n    const { connectionId, manualSync = false } = payload;\n\n    await io.logger.info(`Starting connection sync for ${connectionId}`);\n\n    try {\n      // Fetch the connection details\n      const connection = await io.runTask('get-connection', async () => {\n        return await prisma.bankConnection.findUnique({\n          select: {\n            id: true,\n            accessToken: true,\n            institutionId: true,\n            institutionName: true,\n            status: true,\n            userId: true,\n          },\n          where: { id: connectionId },\n        });\n      });\n\n      if (!connection) {\n        await io.logger.error(`Connection ${connectionId} not found`);\n\n        throw new Error(`Connection ${connectionId} not found`);\n      }\n\n      // Check connection status with Plaid\n      const connectionDetails = await io.runTask(\n        'check-connection-status',\n        async () => {\n          return await getItemDetails(connection.accessToken);\n        }\n      );\n\n      // Update connection status based on response\n      if (connectionDetails.status?.error) {\n        await io.logger.warn(\n          `Connection error: ${connectionDetails.status.error}`\n        );\n\n        // Determine the appropriate status based on the error\n        if (connectionDetails.status.error.includes('ITEM_LOGIN_REQUIRED')) {\n          // Login required error\n          await prisma.bankConnection.update({\n            data: {\n              errorMessage: connectionDetails.status.error,\n              lastCheckedAt: new Date(),\n              status: BankConnectionStatus.LOGIN_REQUIRED,\n            },\n            where: { id: connectionId },\n          });\n        } else {\n          // General error\n          await prisma.bankConnection.update({\n            data: {\n              errorMessage: connectionDetails.status.error,\n              lastCheckedAt: new Date(),\n              status: BankConnectionStatus.ERROR,\n            },\n            where: { id: connectionId },\n          });\n        }\n\n        return {\n          error: connectionDetails.status.error,\n          status: 'error',\n        };\n      }\n\n      // Update connection as active\n      await prisma.bankConnection.update({\n        data: {\n          errorMessage: null,\n          lastAccessedAt: new Date(),\n          lastCheckedAt: new Date(),\n          status: BankConnectionStatus.ACTIVE,\n        },\n        where: { id: connectionId },\n      });\n\n      // Fetch all enabled accounts for this connection\n      const accounts = await io.runTask('get-accounts', async () => {\n        return await prisma.bankAccount.findMany({\n          select: {\n            id: true,\n            name: true,\n            plaidAccountId: true,\n            status: true,\n            type: true,\n          },\n          where: {\n            bankConnectionId: connectionId,\n            enabled: true,\n            // For automated syncs, we only include active accounts\n            ...(manualSync ? {} : { status: 'ACTIVE' }),\n          },\n        });\n      });\n\n      if (accounts.length === 0) {\n        await io.logger.info(\n          `No active accounts found for connection ${connectionId}`\n        );\n\n        return {\n          accountsSynced: 0,\n          status: 'success',\n        };\n      }\n\n      await io.logger.info(`Found ${accounts.length} accounts to sync`);\n\n      // Trigger account syncs with appropriate delays\n      let accountsSynced = 0;\n\n      for (const account of accounts) {\n        await client.sendEvent({\n          // Use context for delay information\n          context: {\n            delaySeconds: manualSync ? accountsSynced * 2 : accountsSynced * 30,\n          },\n          name: 'sync-account-trigger',\n          payload: {\n            accessToken: connection.accessToken,\n            bankAccountId: account.id,\n            manualSync,\n            userId: connection.userId,\n          },\n        });\n        accountsSynced++;\n      }\n\n      // For manual syncs, we'll also trigger transaction notifications\n      if (manualSync) {\n        await client.sendEvent({\n          // Use context for delay information\n          context: {\n            delaySeconds: 120, // 2 minutes\n          },\n          name: 'sync-transaction-notifications-trigger',\n          payload: {\n            userId: connection.userId,\n          },\n        });\n      }\n\n      await io.logger.info(\n        `Connection sync completed, triggered ${accountsSynced} account syncs`\n      );\n\n      return {\n        accountsSynced,\n        connectionId,\n        status: 'success',\n      };\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n      await io.logger.error(`Connection sync failed: ${errorMessage}`);\n\n      // Update connection status to error\n      await prisma.bankConnection.update({\n        data: {\n          errorMessage: errorMessage,\n          lastCheckedAt: new Date(),\n          status: BankConnectionStatus.ERROR,\n        },\n        where: { id: connectionId },\n      });\n\n      throw error;\n    }\n  },\n});\n"],
  "mappings": "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",
  "names": []
}
