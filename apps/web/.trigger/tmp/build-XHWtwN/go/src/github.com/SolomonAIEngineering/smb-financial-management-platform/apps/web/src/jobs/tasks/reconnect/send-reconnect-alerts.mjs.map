{
  "version": 3,
  "sources": ["../../../../../../../../../../../../../../src/jobs/tasks/reconnect/send-reconnect-alerts.ts"],
  "sourcesContent": ["import { BankConnectionStatus } from '@prisma/client';\nimport { cronTrigger } from '@trigger.dev/sdk';\nimport { subDays } from 'date-fns';\n\nimport { prisma } from '@/server/db';\n\nimport { client } from '../../client';\n\n/**\n * This job identifies bank connections that need to be reconnected and sends\n * alerts to users prompting them to fix their connections.\n */\nexport const sendReconnectAlertsJob = client.defineJob({\n  id: 'send-reconnect-alerts-job',\n  name: 'Send Reconnect Alerts',\n  trigger: cronTrigger({\n    cron: '0 10 * * *', // Every day at 10 AM\n  }),\n  version: '1.0.0',\n  run: async (payload, io) => {\n    await io.logger.info('Starting reconnect alerts job');\n\n    // Find connections needing reconnection\n    const connectionsToReconnect = await io.runTask(\n      'get-connections-needing-reconnect',\n      async () => {\n        return await prisma.bankConnection.findMany({\n          include: {\n            accounts: {\n              select: {\n                id: true,\n                displayName: true,\n                name: true,\n              },\n              where: {\n                status: 'ACTIVE',\n              },\n            },\n            user: {\n              select: {\n                id: true,\n                email: true,\n                name: true,\n              },\n            },\n          },\n          where: {\n            // Only alert if they haven't been alerted in the last 3 days\n            lastAlertedAt: {\n              lt: subDays(new Date(), 3),\n            },\n            status: BankConnectionStatus.LOGIN_REQUIRED,\n          },\n        });\n      }\n    );\n\n    await io.logger.info(\n      `Found ${connectionsToReconnect.length} connections needing reconnection`\n    );\n\n    let alertsSent = 0;\n\n    // Process each connection\n    for (const connection of connectionsToReconnect) {\n      await io.runTask(`alert-connection-${connection.id}`, async () => {\n        try {\n          // Skip if no user email\n          if (!connection.user.email) {\n            await io.logger.warn(\n              `No email for user ${connection.user.id}, skipping alert`\n            );\n\n            return;\n          }\n          // Skip if no active accounts\n          if (connection.accounts.length === 0) {\n            await io.logger.warn(\n              `No active accounts for connection ${connection.id}, skipping alert`\n            );\n\n            return;\n          }\n\n          // Generate message for user\n          const message = {\n            html: generateReconnectEmailHtml(connection),\n            subject: 'Action Required: Reconnect Your Bank Account',\n            text: generateReconnectEmailText(connection),\n            to: connection.user.email,\n          };\n\n          // Send email (using event for email service to pick up)\n          await client.sendEvent({\n            name: 'send-email',\n            payload: message,\n          });\n\n          // Update last alerted timestamp\n          await prisma.bankConnection.update({\n            data: {\n              alertCount: { increment: 1 },\n              lastAlertedAt: new Date(),\n            },\n            where: { id: connection.id },\n          });\n\n          // Record notification in user activity\n          await prisma.userActivity.create({\n            data: {\n              detail: 'Bank reconnect alert sent',\n              metadata: {\n                connectionId: connection.id,\n                institutionName: connection.institutionName,\n              },\n              type: 'NOTIFICATION',\n              userId: connection.user.id,\n            },\n          });\n\n          alertsSent++;\n        } catch (error) {\n          const errorMessage =\n            error instanceof Error ? error.message : String(error);\n          await io.logger.error(\n            `Error sending reconnect alert for connection ${connection.id}: ${errorMessage}`\n          );\n        }\n      });\n    }\n\n    return {\n      alertsSent,\n      connectionsChecked: connectionsToReconnect.length,\n    };\n  },\n});\n\n/** Generate plain text email content */\nfunction generateReconnectEmailText(connection: any): string {\n  const userName = connection.user.name || 'there';\n  const institution =\n    connection.institutionName || 'your financial institution';\n  const accountList = connection.accounts\n    .map((a: any) => a.displayName || a.name)\n    .join(', ');\n\n  return `\nHello ${userName},\n\nWe noticed that your connection to ${institution} needs to be updated. Without reconnecting, we won't be able to update your account information and transactions.\n\nAffected accounts: ${accountList}\n\nPlease log in to your dashboard and click the \"Reconnect\" button next to your ${institution} connection to update your credentials.\n\nThank you for using our service!\n`;\n}\n\n/** Generate HTML email content */\nfunction generateReconnectEmailHtml(connection: any): string {\n  const userName = connection.user.name || 'there';\n  const institution =\n    connection.institutionName || 'your financial institution';\n  const accountList = connection.accounts\n    .map((a: any) => a.displayName || a.name)\n    .join(', ');\n\n  return `\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n        .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n        .header { background-color: #f5f5f5; padding: 20px; border-bottom: 2px solid #ddd; }\n        .content { padding: 20px; }\n        .button { display: inline-block; background-color: #4CAF50; color: white; padding: 12px 20px; \n                  text-decoration: none; border-radius: 4px; margin-top: 20px; }\n        .footer { margin-top: 30px; font-size: 12px; color: #777; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h2>Account Reconnection Required</h2>\n        </div>\n        <div class=\"content\">\n            <p>Hello ${userName},</p>\n            \n            <p>We noticed that your connection to <strong>${institution}</strong> needs to be updated. \n            Without reconnecting, we won't be able to update your account information and transactions.</p>\n            \n            <p><strong>Affected accounts:</strong> ${accountList}</p>\n            \n            <p>Please log in to your dashboard and click the \"Reconnect\" button next to your ${institution} \n            connection to update your credentials.</p>\n            \n            <a href=\"https://app.yourdomain.com/accounts\" class=\"button\">Go to Dashboard</a>\n            \n            <p>Thank you for using our service!</p>\n        </div>\n        <div class=\"footer\">\n            <p>If you have any questions, please contact our support team.</p>\n        </div>\n    </div>\n</body>\n</html>\n`;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA,oBAAqC;AAErC,sBAAwB;AAUjB,IAAM,yBAAyB,OAAO,UAAU;AAAA,EACrD,IAAI;AAAA,EACJ,MAAM;AAAA,EACN,SAAS,YAAY;AAAA,IACnB,MAAM;AAAA;AAAA,EACR,CAAC;AAAA,EACD,SAAS;AAAA,EACT,KAAK,OAAO,SAAS,OAAO;AAC1B,UAAM,GAAG,OAAO,KAAK,+BAA+B;AAGpD,UAAM,yBAAyB,MAAM,GAAG;AAAA,MACtC;AAAA,MACA,YAAY;AACV,eAAO,MAAM,OAAO,eAAe,SAAS;AAAA,UAC1C,SAAS;AAAA,YACP,UAAU;AAAA,cACR,QAAQ;AAAA,gBACN,IAAI;AAAA,gBACJ,aAAa;AAAA,gBACb,MAAM;AAAA,cACR;AAAA,cACA,OAAO;AAAA,gBACL,QAAQ;AAAA,cACV;AAAA,YACF;AAAA,YACA,MAAM;AAAA,cACJ,QAAQ;AAAA,gBACN,IAAI;AAAA,gBACJ,OAAO;AAAA,gBACP,MAAM;AAAA,cACR;AAAA,YACF;AAAA,UACF;AAAA,UACA,OAAO;AAAA;AAAA,YAEL,eAAe;AAAA,cACb,QAAI,yBAAQ,oBAAI,KAAK,GAAG,CAAC;AAAA,YAC3B;AAAA,YACA,QAAQ,mCAAqB;AAAA,UAC/B;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAEA,UAAM,GAAG,OAAO;AAAA,MACd,SAAS,uBAAuB,MAAM;AAAA,IACxC;AAEA,QAAI,aAAa;AAGjB,eAAW,cAAc,wBAAwB;AAC/C,YAAM,GAAG,QAAQ,oBAAoB,WAAW,EAAE,IAAI,YAAY;AAChE,YAAI;AAEF,cAAI,CAAC,WAAW,KAAK,OAAO;AAC1B,kBAAM,GAAG,OAAO;AAAA,cACd,qBAAqB,WAAW,KAAK,EAAE;AAAA,YACzC;AAEA;AAAA,UACF;AAEA,cAAI,WAAW,SAAS,WAAW,GAAG;AACpC,kBAAM,GAAG,OAAO;AAAA,cACd,qCAAqC,WAAW,EAAE;AAAA,YACpD;AAEA;AAAA,UACF;AAGA,gBAAM,UAAU;AAAA,YACd,MAAM,2BAA2B,UAAU;AAAA,YAC3C,SAAS;AAAA,YACT,MAAM,2BAA2B,UAAU;AAAA,YAC3C,IAAI,WAAW,KAAK;AAAA,UACtB;AAGA,gBAAM,OAAO,UAAU;AAAA,YACrB,MAAM;AAAA,YACN,SAAS;AAAA,UACX,CAAC;AAGD,gBAAM,OAAO,eAAe,OAAO;AAAA,YACjC,MAAM;AAAA,cACJ,YAAY,EAAE,WAAW,EAAE;AAAA,cAC3B,eAAe,oBAAI,KAAK;AAAA,YAC1B;AAAA,YACA,OAAO,EAAE,IAAI,WAAW,GAAG;AAAA,UAC7B,CAAC;AAGD,gBAAM,OAAO,aAAa,OAAO;AAAA,YAC/B,MAAM;AAAA,cACJ,QAAQ;AAAA,cACR,UAAU;AAAA,gBACR,cAAc,WAAW;AAAA,gBACzB,iBAAiB,WAAW;AAAA,cAC9B;AAAA,cACA,MAAM;AAAA,cACN,QAAQ,WAAW,KAAK;AAAA,YAC1B;AAAA,UACF,CAAC;AAED;AAAA,QACF,SAAS,OAAO;AACd,gBAAM,eACJ,iBAAiB,QAAQ,MAAM,UAAU,OAAO,KAAK;AACvD,gBAAM,GAAG,OAAO;AAAA,YACd,gDAAgD,WAAW,EAAE,KAAK,YAAY;AAAA,UAChF;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AAEA,WAAO;AAAA,MACL;AAAA,MACA,oBAAoB,uBAAuB;AAAA,IAC7C;AAAA,EACF;AACF,CAAC;AAGD,SAAS,2BAA2B,YAAyB;AAC3D,QAAM,WAAW,WAAW,KAAK,QAAQ;AACzC,QAAM,cACJ,WAAW,mBAAmB;AAChC,QAAM,cAAc,WAAW,SAC5B,IAAI,CAAC,MAAW,EAAE,eAAe,EAAE,IAAI,EACvC,KAAK,IAAI;AAEZ,SAAO;AAAA,QACD,QAAQ;AAAA;AAAA,qCAEqB,WAAW;AAAA;AAAA,qBAE3B,WAAW;AAAA;AAAA,gFAEgD,WAAW;AAAA;AAAA;AAAA;AAI3F;AAGA,SAAS,2BAA2B,YAAyB;AAC3D,QAAM,WAAW,WAAW,KAAK,QAAQ;AACzC,QAAM,cACJ,WAAW,mBAAmB;AAChC,QAAM,cAAc,WAAW,SAC5B,IAAI,CAAC,MAAW,EAAE,eAAe,EAAE,IAAI,EACvC,KAAK,IAAI;AAEZ,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAqBc,QAAQ;AAAA;AAAA,4DAE6B,WAAW;AAAA;AAAA;AAAA,qDAGlB,WAAW;AAAA;AAAA,+FAE+B,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAc1G;",
  "names": []
}
