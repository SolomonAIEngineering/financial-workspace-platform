import {
  __commonJS,
  __esm,
  __export,
  __require,
  __toCommonJS,
  __toESM,
  init_esm
} from "./chunk-KZCIDQ5Y.mjs";

// ../../node_modules/.pnpm/delayed-stream@1.0.0/node_modules/delayed-stream/lib/delayed_stream.js
var require_delayed_stream = __commonJS({
  "../../node_modules/.pnpm/delayed-stream@1.0.0/node_modules/delayed-stream/lib/delayed_stream.js"(exports, module) {
    init_esm();
    var Stream = __require("stream").Stream;
    var util = __require("util");
    module.exports = DelayedStream;
    function DelayedStream() {
      this.source = null;
      this.dataSize = 0;
      this.maxDataSize = 1024 * 1024;
      this.pauseStream = true;
      this._maxDataSizeExceeded = false;
      this._released = false;
      this._bufferedEvents = [];
    }
    util.inherits(DelayedStream, Stream);
    DelayedStream.create = function(source, options) {
      var delayedStream = new this();
      options = options || {};
      for (var option in options) {
        delayedStream[option] = options[option];
      }
      delayedStream.source = source;
      var realEmit = source.emit;
      source.emit = function() {
        delayedStream._handleEmit(arguments);
        return realEmit.apply(source, arguments);
      };
      source.on("error", function() {
      });
      if (delayedStream.pauseStream) {
        source.pause();
      }
      return delayedStream;
    };
    Object.defineProperty(DelayedStream.prototype, "readable", {
      configurable: true,
      enumerable: true,
      get: function() {
        return this.source.readable;
      }
    });
    DelayedStream.prototype.setEncoding = function() {
      return this.source.setEncoding.apply(this.source, arguments);
    };
    DelayedStream.prototype.resume = function() {
      if (!this._released) {
        this.release();
      }
      this.source.resume();
    };
    DelayedStream.prototype.pause = function() {
      this.source.pause();
    };
    DelayedStream.prototype.release = function() {
      this._released = true;
      this._bufferedEvents.forEach(function(args) {
        this.emit.apply(this, args);
      }.bind(this));
      this._bufferedEvents = [];
    };
    DelayedStream.prototype.pipe = function() {
      var r = Stream.prototype.pipe.apply(this, arguments);
      this.resume();
      return r;
    };
    DelayedStream.prototype._handleEmit = function(args) {
      if (this._released) {
        this.emit.apply(this, args);
        return;
      }
      if (args[0] === "data") {
        this.dataSize += args[1].length;
        this._checkIfMaxDataSizeExceeded();
      }
      this._bufferedEvents.push(args);
    };
    DelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {
      if (this._maxDataSizeExceeded) {
        return;
      }
      if (this.dataSize <= this.maxDataSize) {
        return;
      }
      this._maxDataSizeExceeded = true;
      var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
      this.emit("error", new Error(message));
    };
  }
});

// ../../node_modules/.pnpm/combined-stream@1.0.8/node_modules/combined-stream/lib/combined_stream.js
var require_combined_stream = __commonJS({
  "../../node_modules/.pnpm/combined-stream@1.0.8/node_modules/combined-stream/lib/combined_stream.js"(exports, module) {
    init_esm();
    var util = __require("util");
    var Stream = __require("stream").Stream;
    var DelayedStream = require_delayed_stream();
    module.exports = CombinedStream;
    function CombinedStream() {
      this.writable = false;
      this.readable = true;
      this.dataSize = 0;
      this.maxDataSize = 2 * 1024 * 1024;
      this.pauseStreams = true;
      this._released = false;
      this._streams = [];
      this._currentStream = null;
      this._insideLoop = false;
      this._pendingNext = false;
    }
    util.inherits(CombinedStream, Stream);
    CombinedStream.create = function(options) {
      var combinedStream = new this();
      options = options || {};
      for (var option in options) {
        combinedStream[option] = options[option];
      }
      return combinedStream;
    };
    CombinedStream.isStreamLike = function(stream) {
      return typeof stream !== "function" && typeof stream !== "string" && typeof stream !== "boolean" && typeof stream !== "number" && !Buffer.isBuffer(stream);
    };
    CombinedStream.prototype.append = function(stream) {
      var isStreamLike = CombinedStream.isStreamLike(stream);
      if (isStreamLike) {
        if (!(stream instanceof DelayedStream)) {
          var newStream = DelayedStream.create(stream, {
            maxDataSize: Infinity,
            pauseStream: this.pauseStreams
          });
          stream.on("data", this._checkDataSize.bind(this));
          stream = newStream;
        }
        this._handleErrors(stream);
        if (this.pauseStreams) {
          stream.pause();
        }
      }
      this._streams.push(stream);
      return this;
    };
    CombinedStream.prototype.pipe = function(dest, options) {
      Stream.prototype.pipe.call(this, dest, options);
      this.resume();
      return dest;
    };
    CombinedStream.prototype._getNext = function() {
      this._currentStream = null;
      if (this._insideLoop) {
        this._pendingNext = true;
        return;
      }
      this._insideLoop = true;
      try {
        do {
          this._pendingNext = false;
          this._realGetNext();
        } while (this._pendingNext);
      } finally {
        this._insideLoop = false;
      }
    };
    CombinedStream.prototype._realGetNext = function() {
      var stream = this._streams.shift();
      if (typeof stream == "undefined") {
        this.end();
        return;
      }
      if (typeof stream !== "function") {
        this._pipeNext(stream);
        return;
      }
      var getStream = stream;
      getStream(function(stream2) {
        var isStreamLike = CombinedStream.isStreamLike(stream2);
        if (isStreamLike) {
          stream2.on("data", this._checkDataSize.bind(this));
          this._handleErrors(stream2);
        }
        this._pipeNext(stream2);
      }.bind(this));
    };
    CombinedStream.prototype._pipeNext = function(stream) {
      this._currentStream = stream;
      var isStreamLike = CombinedStream.isStreamLike(stream);
      if (isStreamLike) {
        stream.on("end", this._getNext.bind(this));
        stream.pipe(this, { end: false });
        return;
      }
      var value = stream;
      this.write(value);
      this._getNext();
    };
    CombinedStream.prototype._handleErrors = function(stream) {
      var self2 = this;
      stream.on("error", function(err) {
        self2._emitError(err);
      });
    };
    CombinedStream.prototype.write = function(data) {
      this.emit("data", data);
    };
    CombinedStream.prototype.pause = function() {
      if (!this.pauseStreams) {
        return;
      }
      if (this.pauseStreams && this._currentStream && typeof this._currentStream.pause == "function") this._currentStream.pause();
      this.emit("pause");
    };
    CombinedStream.prototype.resume = function() {
      if (!this._released) {
        this._released = true;
        this.writable = true;
        this._getNext();
      }
      if (this.pauseStreams && this._currentStream && typeof this._currentStream.resume == "function") this._currentStream.resume();
      this.emit("resume");
    };
    CombinedStream.prototype.end = function() {
      this._reset();
      this.emit("end");
    };
    CombinedStream.prototype.destroy = function() {
      this._reset();
      this.emit("close");
    };
    CombinedStream.prototype._reset = function() {
      this.writable = false;
      this._streams = [];
      this._currentStream = null;
    };
    CombinedStream.prototype._checkDataSize = function() {
      this._updateDataSize();
      if (this.dataSize <= this.maxDataSize) {
        return;
      }
      var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
      this._emitError(new Error(message));
    };
    CombinedStream.prototype._updateDataSize = function() {
      this.dataSize = 0;
      var self2 = this;
      this._streams.forEach(function(stream) {
        if (!stream.dataSize) {
          return;
        }
        self2.dataSize += stream.dataSize;
      });
      if (this._currentStream && this._currentStream.dataSize) {
        this.dataSize += this._currentStream.dataSize;
      }
    };
    CombinedStream.prototype._emitError = function(err) {
      this._reset();
      this.emit("error", err);
    };
  }
});

// ../../node_modules/.pnpm/mime-db@1.52.0/node_modules/mime-db/db.json
var require_db = __commonJS({
  "../../node_modules/.pnpm/mime-db@1.52.0/node_modules/mime-db/db.json"(exports, module) {
    module.exports = {
      "application/1d-interleaved-parityfec": {
        source: "iana"
      },
      "application/3gpdash-qoe-report+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/3gpp-ims+xml": {
        source: "iana",
        compressible: true
      },
      "application/3gpphal+json": {
        source: "iana",
        compressible: true
      },
      "application/3gpphalforms+json": {
        source: "iana",
        compressible: true
      },
      "application/a2l": {
        source: "iana"
      },
      "application/ace+cbor": {
        source: "iana"
      },
      "application/activemessage": {
        source: "iana"
      },
      "application/activity+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-costmap+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-costmapfilter+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-directory+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointcost+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointcostparams+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointprop+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointpropparams+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-error+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-networkmap+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-networkmapfilter+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-updatestreamcontrol+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-updatestreamparams+json": {
        source: "iana",
        compressible: true
      },
      "application/aml": {
        source: "iana"
      },
      "application/andrew-inset": {
        source: "iana",
        extensions: ["ez"]
      },
      "application/applefile": {
        source: "iana"
      },
      "application/applixware": {
        source: "apache",
        extensions: ["aw"]
      },
      "application/at+jwt": {
        source: "iana"
      },
      "application/atf": {
        source: "iana"
      },
      "application/atfx": {
        source: "iana"
      },
      "application/atom+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atom"]
      },
      "application/atomcat+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomcat"]
      },
      "application/atomdeleted+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomdeleted"]
      },
      "application/atomicmail": {
        source: "iana"
      },
      "application/atomsvc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomsvc"]
      },
      "application/atsc-dwd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dwd"]
      },
      "application/atsc-dynamic-event-message": {
        source: "iana"
      },
      "application/atsc-held+xml": {
        source: "iana",
        compressible: true,
        extensions: ["held"]
      },
      "application/atsc-rdt+json": {
        source: "iana",
        compressible: true
      },
      "application/atsc-rsat+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rsat"]
      },
      "application/atxml": {
        source: "iana"
      },
      "application/auth-policy+xml": {
        source: "iana",
        compressible: true
      },
      "application/bacnet-xdd+zip": {
        source: "iana",
        compressible: false
      },
      "application/batch-smtp": {
        source: "iana"
      },
      "application/bdoc": {
        compressible: false,
        extensions: ["bdoc"]
      },
      "application/beep+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/calendar+json": {
        source: "iana",
        compressible: true
      },
      "application/calendar+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xcs"]
      },
      "application/call-completion": {
        source: "iana"
      },
      "application/cals-1840": {
        source: "iana"
      },
      "application/captive+json": {
        source: "iana",
        compressible: true
      },
      "application/cbor": {
        source: "iana"
      },
      "application/cbor-seq": {
        source: "iana"
      },
      "application/cccex": {
        source: "iana"
      },
      "application/ccmp+xml": {
        source: "iana",
        compressible: true
      },
      "application/ccxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ccxml"]
      },
      "application/cdfx+xml": {
        source: "iana",
        compressible: true,
        extensions: ["cdfx"]
      },
      "application/cdmi-capability": {
        source: "iana",
        extensions: ["cdmia"]
      },
      "application/cdmi-container": {
        source: "iana",
        extensions: ["cdmic"]
      },
      "application/cdmi-domain": {
        source: "iana",
        extensions: ["cdmid"]
      },
      "application/cdmi-object": {
        source: "iana",
        extensions: ["cdmio"]
      },
      "application/cdmi-queue": {
        source: "iana",
        extensions: ["cdmiq"]
      },
      "application/cdni": {
        source: "iana"
      },
      "application/cea": {
        source: "iana"
      },
      "application/cea-2018+xml": {
        source: "iana",
        compressible: true
      },
      "application/cellml+xml": {
        source: "iana",
        compressible: true
      },
      "application/cfw": {
        source: "iana"
      },
      "application/city+json": {
        source: "iana",
        compressible: true
      },
      "application/clr": {
        source: "iana"
      },
      "application/clue+xml": {
        source: "iana",
        compressible: true
      },
      "application/clue_info+xml": {
        source: "iana",
        compressible: true
      },
      "application/cms": {
        source: "iana"
      },
      "application/cnrp+xml": {
        source: "iana",
        compressible: true
      },
      "application/coap-group+json": {
        source: "iana",
        compressible: true
      },
      "application/coap-payload": {
        source: "iana"
      },
      "application/commonground": {
        source: "iana"
      },
      "application/conference-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/cose": {
        source: "iana"
      },
      "application/cose-key": {
        source: "iana"
      },
      "application/cose-key-set": {
        source: "iana"
      },
      "application/cpl+xml": {
        source: "iana",
        compressible: true,
        extensions: ["cpl"]
      },
      "application/csrattrs": {
        source: "iana"
      },
      "application/csta+xml": {
        source: "iana",
        compressible: true
      },
      "application/cstadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/csvm+json": {
        source: "iana",
        compressible: true
      },
      "application/cu-seeme": {
        source: "apache",
        extensions: ["cu"]
      },
      "application/cwt": {
        source: "iana"
      },
      "application/cybercash": {
        source: "iana"
      },
      "application/dart": {
        compressible: true
      },
      "application/dash+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpd"]
      },
      "application/dash-patch+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpp"]
      },
      "application/dashdelta": {
        source: "iana"
      },
      "application/davmount+xml": {
        source: "iana",
        compressible: true,
        extensions: ["davmount"]
      },
      "application/dca-rft": {
        source: "iana"
      },
      "application/dcd": {
        source: "iana"
      },
      "application/dec-dx": {
        source: "iana"
      },
      "application/dialog-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/dicom": {
        source: "iana"
      },
      "application/dicom+json": {
        source: "iana",
        compressible: true
      },
      "application/dicom+xml": {
        source: "iana",
        compressible: true
      },
      "application/dii": {
        source: "iana"
      },
      "application/dit": {
        source: "iana"
      },
      "application/dns": {
        source: "iana"
      },
      "application/dns+json": {
        source: "iana",
        compressible: true
      },
      "application/dns-message": {
        source: "iana"
      },
      "application/docbook+xml": {
        source: "apache",
        compressible: true,
        extensions: ["dbk"]
      },
      "application/dots+cbor": {
        source: "iana"
      },
      "application/dskpp+xml": {
        source: "iana",
        compressible: true
      },
      "application/dssc+der": {
        source: "iana",
        extensions: ["dssc"]
      },
      "application/dssc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdssc"]
      },
      "application/dvcs": {
        source: "iana"
      },
      "application/ecmascript": {
        source: "iana",
        compressible: true,
        extensions: ["es", "ecma"]
      },
      "application/edi-consent": {
        source: "iana"
      },
      "application/edi-x12": {
        source: "iana",
        compressible: false
      },
      "application/edifact": {
        source: "iana",
        compressible: false
      },
      "application/efi": {
        source: "iana"
      },
      "application/elm+json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/elm+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.cap+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/emergencycalldata.comment+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.control+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.deviceinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.ecall.msd": {
        source: "iana"
      },
      "application/emergencycalldata.providerinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.serviceinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.subscriberinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.veds+xml": {
        source: "iana",
        compressible: true
      },
      "application/emma+xml": {
        source: "iana",
        compressible: true,
        extensions: ["emma"]
      },
      "application/emotionml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["emotionml"]
      },
      "application/encaprtp": {
        source: "iana"
      },
      "application/epp+xml": {
        source: "iana",
        compressible: true
      },
      "application/epub+zip": {
        source: "iana",
        compressible: false,
        extensions: ["epub"]
      },
      "application/eshop": {
        source: "iana"
      },
      "application/exi": {
        source: "iana",
        extensions: ["exi"]
      },
      "application/expect-ct-report+json": {
        source: "iana",
        compressible: true
      },
      "application/express": {
        source: "iana",
        extensions: ["exp"]
      },
      "application/fastinfoset": {
        source: "iana"
      },
      "application/fastsoap": {
        source: "iana"
      },
      "application/fdt+xml": {
        source: "iana",
        compressible: true,
        extensions: ["fdt"]
      },
      "application/fhir+json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/fhir+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/fido.trusted-apps+json": {
        compressible: true
      },
      "application/fits": {
        source: "iana"
      },
      "application/flexfec": {
        source: "iana"
      },
      "application/font-sfnt": {
        source: "iana"
      },
      "application/font-tdpfr": {
        source: "iana",
        extensions: ["pfr"]
      },
      "application/font-woff": {
        source: "iana",
        compressible: false
      },
      "application/framework-attributes+xml": {
        source: "iana",
        compressible: true
      },
      "application/geo+json": {
        source: "iana",
        compressible: true,
        extensions: ["geojson"]
      },
      "application/geo+json-seq": {
        source: "iana"
      },
      "application/geopackage+sqlite3": {
        source: "iana"
      },
      "application/geoxacml+xml": {
        source: "iana",
        compressible: true
      },
      "application/gltf-buffer": {
        source: "iana"
      },
      "application/gml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["gml"]
      },
      "application/gpx+xml": {
        source: "apache",
        compressible: true,
        extensions: ["gpx"]
      },
      "application/gxf": {
        source: "apache",
        extensions: ["gxf"]
      },
      "application/gzip": {
        source: "iana",
        compressible: false,
        extensions: ["gz"]
      },
      "application/h224": {
        source: "iana"
      },
      "application/held+xml": {
        source: "iana",
        compressible: true
      },
      "application/hjson": {
        extensions: ["hjson"]
      },
      "application/http": {
        source: "iana"
      },
      "application/hyperstudio": {
        source: "iana",
        extensions: ["stk"]
      },
      "application/ibe-key-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/ibe-pkg-reply+xml": {
        source: "iana",
        compressible: true
      },
      "application/ibe-pp-data": {
        source: "iana"
      },
      "application/iges": {
        source: "iana"
      },
      "application/im-iscomposing+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/index": {
        source: "iana"
      },
      "application/index.cmd": {
        source: "iana"
      },
      "application/index.obj": {
        source: "iana"
      },
      "application/index.response": {
        source: "iana"
      },
      "application/index.vnd": {
        source: "iana"
      },
      "application/inkml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ink", "inkml"]
      },
      "application/iotp": {
        source: "iana"
      },
      "application/ipfix": {
        source: "iana",
        extensions: ["ipfix"]
      },
      "application/ipp": {
        source: "iana"
      },
      "application/isup": {
        source: "iana"
      },
      "application/its+xml": {
        source: "iana",
        compressible: true,
        extensions: ["its"]
      },
      "application/java-archive": {
        source: "apache",
        compressible: false,
        extensions: ["jar", "war", "ear"]
      },
      "application/java-serialized-object": {
        source: "apache",
        compressible: false,
        extensions: ["ser"]
      },
      "application/java-vm": {
        source: "apache",
        compressible: false,
        extensions: ["class"]
      },
      "application/javascript": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["js", "mjs"]
      },
      "application/jf2feed+json": {
        source: "iana",
        compressible: true
      },
      "application/jose": {
        source: "iana"
      },
      "application/jose+json": {
        source: "iana",
        compressible: true
      },
      "application/jrd+json": {
        source: "iana",
        compressible: true
      },
      "application/jscalendar+json": {
        source: "iana",
        compressible: true
      },
      "application/json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["json", "map"]
      },
      "application/json-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/json-seq": {
        source: "iana"
      },
      "application/json5": {
        extensions: ["json5"]
      },
      "application/jsonml+json": {
        source: "apache",
        compressible: true,
        extensions: ["jsonml"]
      },
      "application/jwk+json": {
        source: "iana",
        compressible: true
      },
      "application/jwk-set+json": {
        source: "iana",
        compressible: true
      },
      "application/jwt": {
        source: "iana"
      },
      "application/kpml-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/kpml-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/ld+json": {
        source: "iana",
        compressible: true,
        extensions: ["jsonld"]
      },
      "application/lgr+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lgr"]
      },
      "application/link-format": {
        source: "iana"
      },
      "application/load-control+xml": {
        source: "iana",
        compressible: true
      },
      "application/lost+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lostxml"]
      },
      "application/lostsync+xml": {
        source: "iana",
        compressible: true
      },
      "application/lpf+zip": {
        source: "iana",
        compressible: false
      },
      "application/lxf": {
        source: "iana"
      },
      "application/mac-binhex40": {
        source: "iana",
        extensions: ["hqx"]
      },
      "application/mac-compactpro": {
        source: "apache",
        extensions: ["cpt"]
      },
      "application/macwriteii": {
        source: "iana"
      },
      "application/mads+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mads"]
      },
      "application/manifest+json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["webmanifest"]
      },
      "application/marc": {
        source: "iana",
        extensions: ["mrc"]
      },
      "application/marcxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mrcx"]
      },
      "application/mathematica": {
        source: "iana",
        extensions: ["ma", "nb", "mb"]
      },
      "application/mathml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mathml"]
      },
      "application/mathml-content+xml": {
        source: "iana",
        compressible: true
      },
      "application/mathml-presentation+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-associated-procedure-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-deregister+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-envelope+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-msk+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-msk-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-protection-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-reception-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-register+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-register-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-schedule+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-user-service-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbox": {
        source: "iana",
        extensions: ["mbox"]
      },
      "application/media-policy-dataset+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpf"]
      },
      "application/media_control+xml": {
        source: "iana",
        compressible: true
      },
      "application/mediaservercontrol+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mscml"]
      },
      "application/merge-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/metalink+xml": {
        source: "apache",
        compressible: true,
        extensions: ["metalink"]
      },
      "application/metalink4+xml": {
        source: "iana",
        compressible: true,
        extensions: ["meta4"]
      },
      "application/mets+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mets"]
      },
      "application/mf4": {
        source: "iana"
      },
      "application/mikey": {
        source: "iana"
      },
      "application/mipc": {
        source: "iana"
      },
      "application/missing-blocks+cbor-seq": {
        source: "iana"
      },
      "application/mmt-aei+xml": {
        source: "iana",
        compressible: true,
        extensions: ["maei"]
      },
      "application/mmt-usd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["musd"]
      },
      "application/mods+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mods"]
      },
      "application/moss-keys": {
        source: "iana"
      },
      "application/moss-signature": {
        source: "iana"
      },
      "application/mosskey-data": {
        source: "iana"
      },
      "application/mosskey-request": {
        source: "iana"
      },
      "application/mp21": {
        source: "iana",
        extensions: ["m21", "mp21"]
      },
      "application/mp4": {
        source: "iana",
        extensions: ["mp4s", "m4p"]
      },
      "application/mpeg4-generic": {
        source: "iana"
      },
      "application/mpeg4-iod": {
        source: "iana"
      },
      "application/mpeg4-iod-xmt": {
        source: "iana"
      },
      "application/mrb-consumer+xml": {
        source: "iana",
        compressible: true
      },
      "application/mrb-publish+xml": {
        source: "iana",
        compressible: true
      },
      "application/msc-ivr+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/msc-mixer+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/msword": {
        source: "iana",
        compressible: false,
        extensions: ["doc", "dot"]
      },
      "application/mud+json": {
        source: "iana",
        compressible: true
      },
      "application/multipart-core": {
        source: "iana"
      },
      "application/mxf": {
        source: "iana",
        extensions: ["mxf"]
      },
      "application/n-quads": {
        source: "iana",
        extensions: ["nq"]
      },
      "application/n-triples": {
        source: "iana",
        extensions: ["nt"]
      },
      "application/nasdata": {
        source: "iana"
      },
      "application/news-checkgroups": {
        source: "iana",
        charset: "US-ASCII"
      },
      "application/news-groupinfo": {
        source: "iana",
        charset: "US-ASCII"
      },
      "application/news-transmission": {
        source: "iana"
      },
      "application/nlsml+xml": {
        source: "iana",
        compressible: true
      },
      "application/node": {
        source: "iana",
        extensions: ["cjs"]
      },
      "application/nss": {
        source: "iana"
      },
      "application/oauth-authz-req+jwt": {
        source: "iana"
      },
      "application/oblivious-dns-message": {
        source: "iana"
      },
      "application/ocsp-request": {
        source: "iana"
      },
      "application/ocsp-response": {
        source: "iana"
      },
      "application/octet-stream": {
        source: "iana",
        compressible: false,
        extensions: ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"]
      },
      "application/oda": {
        source: "iana",
        extensions: ["oda"]
      },
      "application/odm+xml": {
        source: "iana",
        compressible: true
      },
      "application/odx": {
        source: "iana"
      },
      "application/oebps-package+xml": {
        source: "iana",
        compressible: true,
        extensions: ["opf"]
      },
      "application/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["ogx"]
      },
      "application/omdoc+xml": {
        source: "apache",
        compressible: true,
        extensions: ["omdoc"]
      },
      "application/onenote": {
        source: "apache",
        extensions: ["onetoc", "onetoc2", "onetmp", "onepkg"]
      },
      "application/opc-nodeset+xml": {
        source: "iana",
        compressible: true
      },
      "application/oscore": {
        source: "iana"
      },
      "application/oxps": {
        source: "iana",
        extensions: ["oxps"]
      },
      "application/p21": {
        source: "iana"
      },
      "application/p21+zip": {
        source: "iana",
        compressible: false
      },
      "application/p2p-overlay+xml": {
        source: "iana",
        compressible: true,
        extensions: ["relo"]
      },
      "application/parityfec": {
        source: "iana"
      },
      "application/passport": {
        source: "iana"
      },
      "application/patch-ops-error+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xer"]
      },
      "application/pdf": {
        source: "iana",
        compressible: false,
        extensions: ["pdf"]
      },
      "application/pdx": {
        source: "iana"
      },
      "application/pem-certificate-chain": {
        source: "iana"
      },
      "application/pgp-encrypted": {
        source: "iana",
        compressible: false,
        extensions: ["pgp"]
      },
      "application/pgp-keys": {
        source: "iana",
        extensions: ["asc"]
      },
      "application/pgp-signature": {
        source: "iana",
        extensions: ["asc", "sig"]
      },
      "application/pics-rules": {
        source: "apache",
        extensions: ["prf"]
      },
      "application/pidf+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/pidf-diff+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/pkcs10": {
        source: "iana",
        extensions: ["p10"]
      },
      "application/pkcs12": {
        source: "iana"
      },
      "application/pkcs7-mime": {
        source: "iana",
        extensions: ["p7m", "p7c"]
      },
      "application/pkcs7-signature": {
        source: "iana",
        extensions: ["p7s"]
      },
      "application/pkcs8": {
        source: "iana",
        extensions: ["p8"]
      },
      "application/pkcs8-encrypted": {
        source: "iana"
      },
      "application/pkix-attr-cert": {
        source: "iana",
        extensions: ["ac"]
      },
      "application/pkix-cert": {
        source: "iana",
        extensions: ["cer"]
      },
      "application/pkix-crl": {
        source: "iana",
        extensions: ["crl"]
      },
      "application/pkix-pkipath": {
        source: "iana",
        extensions: ["pkipath"]
      },
      "application/pkixcmp": {
        source: "iana",
        extensions: ["pki"]
      },
      "application/pls+xml": {
        source: "iana",
        compressible: true,
        extensions: ["pls"]
      },
      "application/poc-settings+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/postscript": {
        source: "iana",
        compressible: true,
        extensions: ["ai", "eps", "ps"]
      },
      "application/ppsp-tracker+json": {
        source: "iana",
        compressible: true
      },
      "application/problem+json": {
        source: "iana",
        compressible: true
      },
      "application/problem+xml": {
        source: "iana",
        compressible: true
      },
      "application/provenance+xml": {
        source: "iana",
        compressible: true,
        extensions: ["provx"]
      },
      "application/prs.alvestrand.titrax-sheet": {
        source: "iana"
      },
      "application/prs.cww": {
        source: "iana",
        extensions: ["cww"]
      },
      "application/prs.cyn": {
        source: "iana",
        charset: "7-BIT"
      },
      "application/prs.hpub+zip": {
        source: "iana",
        compressible: false
      },
      "application/prs.nprend": {
        source: "iana"
      },
      "application/prs.plucker": {
        source: "iana"
      },
      "application/prs.rdf-xml-crypt": {
        source: "iana"
      },
      "application/prs.xsf+xml": {
        source: "iana",
        compressible: true
      },
      "application/pskc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["pskcxml"]
      },
      "application/pvd+json": {
        source: "iana",
        compressible: true
      },
      "application/qsig": {
        source: "iana"
      },
      "application/raml+yaml": {
        compressible: true,
        extensions: ["raml"]
      },
      "application/raptorfec": {
        source: "iana"
      },
      "application/rdap+json": {
        source: "iana",
        compressible: true
      },
      "application/rdf+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rdf", "owl"]
      },
      "application/reginfo+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rif"]
      },
      "application/relax-ng-compact-syntax": {
        source: "iana",
        extensions: ["rnc"]
      },
      "application/remote-printing": {
        source: "iana"
      },
      "application/reputon+json": {
        source: "iana",
        compressible: true
      },
      "application/resource-lists+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rl"]
      },
      "application/resource-lists-diff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rld"]
      },
      "application/rfc+xml": {
        source: "iana",
        compressible: true
      },
      "application/riscos": {
        source: "iana"
      },
      "application/rlmi+xml": {
        source: "iana",
        compressible: true
      },
      "application/rls-services+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rs"]
      },
      "application/route-apd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rapd"]
      },
      "application/route-s-tsid+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sls"]
      },
      "application/route-usd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rusd"]
      },
      "application/rpki-ghostbusters": {
        source: "iana",
        extensions: ["gbr"]
      },
      "application/rpki-manifest": {
        source: "iana",
        extensions: ["mft"]
      },
      "application/rpki-publication": {
        source: "iana"
      },
      "application/rpki-roa": {
        source: "iana",
        extensions: ["roa"]
      },
      "application/rpki-updown": {
        source: "iana"
      },
      "application/rsd+xml": {
        source: "apache",
        compressible: true,
        extensions: ["rsd"]
      },
      "application/rss+xml": {
        source: "apache",
        compressible: true,
        extensions: ["rss"]
      },
      "application/rtf": {
        source: "iana",
        compressible: true,
        extensions: ["rtf"]
      },
      "application/rtploopback": {
        source: "iana"
      },
      "application/rtx": {
        source: "iana"
      },
      "application/samlassertion+xml": {
        source: "iana",
        compressible: true
      },
      "application/samlmetadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/sarif+json": {
        source: "iana",
        compressible: true
      },
      "application/sarif-external-properties+json": {
        source: "iana",
        compressible: true
      },
      "application/sbe": {
        source: "iana"
      },
      "application/sbml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sbml"]
      },
      "application/scaip+xml": {
        source: "iana",
        compressible: true
      },
      "application/scim+json": {
        source: "iana",
        compressible: true
      },
      "application/scvp-cv-request": {
        source: "iana",
        extensions: ["scq"]
      },
      "application/scvp-cv-response": {
        source: "iana",
        extensions: ["scs"]
      },
      "application/scvp-vp-request": {
        source: "iana",
        extensions: ["spq"]
      },
      "application/scvp-vp-response": {
        source: "iana",
        extensions: ["spp"]
      },
      "application/sdp": {
        source: "iana",
        extensions: ["sdp"]
      },
      "application/secevent+jwt": {
        source: "iana"
      },
      "application/senml+cbor": {
        source: "iana"
      },
      "application/senml+json": {
        source: "iana",
        compressible: true
      },
      "application/senml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["senmlx"]
      },
      "application/senml-etch+cbor": {
        source: "iana"
      },
      "application/senml-etch+json": {
        source: "iana",
        compressible: true
      },
      "application/senml-exi": {
        source: "iana"
      },
      "application/sensml+cbor": {
        source: "iana"
      },
      "application/sensml+json": {
        source: "iana",
        compressible: true
      },
      "application/sensml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sensmlx"]
      },
      "application/sensml-exi": {
        source: "iana"
      },
      "application/sep+xml": {
        source: "iana",
        compressible: true
      },
      "application/sep-exi": {
        source: "iana"
      },
      "application/session-info": {
        source: "iana"
      },
      "application/set-payment": {
        source: "iana"
      },
      "application/set-payment-initiation": {
        source: "iana",
        extensions: ["setpay"]
      },
      "application/set-registration": {
        source: "iana"
      },
      "application/set-registration-initiation": {
        source: "iana",
        extensions: ["setreg"]
      },
      "application/sgml": {
        source: "iana"
      },
      "application/sgml-open-catalog": {
        source: "iana"
      },
      "application/shf+xml": {
        source: "iana",
        compressible: true,
        extensions: ["shf"]
      },
      "application/sieve": {
        source: "iana",
        extensions: ["siv", "sieve"]
      },
      "application/simple-filter+xml": {
        source: "iana",
        compressible: true
      },
      "application/simple-message-summary": {
        source: "iana"
      },
      "application/simplesymbolcontainer": {
        source: "iana"
      },
      "application/sipc": {
        source: "iana"
      },
      "application/slate": {
        source: "iana"
      },
      "application/smil": {
        source: "iana"
      },
      "application/smil+xml": {
        source: "iana",
        compressible: true,
        extensions: ["smi", "smil"]
      },
      "application/smpte336m": {
        source: "iana"
      },
      "application/soap+fastinfoset": {
        source: "iana"
      },
      "application/soap+xml": {
        source: "iana",
        compressible: true
      },
      "application/sparql-query": {
        source: "iana",
        extensions: ["rq"]
      },
      "application/sparql-results+xml": {
        source: "iana",
        compressible: true,
        extensions: ["srx"]
      },
      "application/spdx+json": {
        source: "iana",
        compressible: true
      },
      "application/spirits-event+xml": {
        source: "iana",
        compressible: true
      },
      "application/sql": {
        source: "iana"
      },
      "application/srgs": {
        source: "iana",
        extensions: ["gram"]
      },
      "application/srgs+xml": {
        source: "iana",
        compressible: true,
        extensions: ["grxml"]
      },
      "application/sru+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sru"]
      },
      "application/ssdl+xml": {
        source: "apache",
        compressible: true,
        extensions: ["ssdl"]
      },
      "application/ssml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ssml"]
      },
      "application/stix+json": {
        source: "iana",
        compressible: true
      },
      "application/swid+xml": {
        source: "iana",
        compressible: true,
        extensions: ["swidtag"]
      },
      "application/tamp-apex-update": {
        source: "iana"
      },
      "application/tamp-apex-update-confirm": {
        source: "iana"
      },
      "application/tamp-community-update": {
        source: "iana"
      },
      "application/tamp-community-update-confirm": {
        source: "iana"
      },
      "application/tamp-error": {
        source: "iana"
      },
      "application/tamp-sequence-adjust": {
        source: "iana"
      },
      "application/tamp-sequence-adjust-confirm": {
        source: "iana"
      },
      "application/tamp-status-query": {
        source: "iana"
      },
      "application/tamp-status-response": {
        source: "iana"
      },
      "application/tamp-update": {
        source: "iana"
      },
      "application/tamp-update-confirm": {
        source: "iana"
      },
      "application/tar": {
        compressible: true
      },
      "application/taxii+json": {
        source: "iana",
        compressible: true
      },
      "application/td+json": {
        source: "iana",
        compressible: true
      },
      "application/tei+xml": {
        source: "iana",
        compressible: true,
        extensions: ["tei", "teicorpus"]
      },
      "application/tetra_isi": {
        source: "iana"
      },
      "application/thraud+xml": {
        source: "iana",
        compressible: true,
        extensions: ["tfi"]
      },
      "application/timestamp-query": {
        source: "iana"
      },
      "application/timestamp-reply": {
        source: "iana"
      },
      "application/timestamped-data": {
        source: "iana",
        extensions: ["tsd"]
      },
      "application/tlsrpt+gzip": {
        source: "iana"
      },
      "application/tlsrpt+json": {
        source: "iana",
        compressible: true
      },
      "application/tnauthlist": {
        source: "iana"
      },
      "application/token-introspection+jwt": {
        source: "iana"
      },
      "application/toml": {
        compressible: true,
        extensions: ["toml"]
      },
      "application/trickle-ice-sdpfrag": {
        source: "iana"
      },
      "application/trig": {
        source: "iana",
        extensions: ["trig"]
      },
      "application/ttml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ttml"]
      },
      "application/tve-trigger": {
        source: "iana"
      },
      "application/tzif": {
        source: "iana"
      },
      "application/tzif-leap": {
        source: "iana"
      },
      "application/ubjson": {
        compressible: false,
        extensions: ["ubj"]
      },
      "application/ulpfec": {
        source: "iana"
      },
      "application/urc-grpsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/urc-ressheet+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rsheet"]
      },
      "application/urc-targetdesc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["td"]
      },
      "application/urc-uisocketdesc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vcard+json": {
        source: "iana",
        compressible: true
      },
      "application/vcard+xml": {
        source: "iana",
        compressible: true
      },
      "application/vemmi": {
        source: "iana"
      },
      "application/vividence.scriptfile": {
        source: "apache"
      },
      "application/vnd.1000minds.decision-model+xml": {
        source: "iana",
        compressible: true,
        extensions: ["1km"]
      },
      "application/vnd.3gpp-prose+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp-prose-pc3ch+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp-v2x-local-service-information": {
        source: "iana"
      },
      "application/vnd.3gpp.5gnas": {
        source: "iana"
      },
      "application/vnd.3gpp.access-transfer-events+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.bsf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.gmop+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.gtpc": {
        source: "iana"
      },
      "application/vnd.3gpp.interworking-data": {
        source: "iana"
      },
      "application/vnd.3gpp.lpp": {
        source: "iana"
      },
      "application/vnd.3gpp.mc-signalling-ear": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-payload": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-signalling": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-floor-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-location-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-signed+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-ue-init-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-affiliation-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-location-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-transmission-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mid-call+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.ngap": {
        source: "iana"
      },
      "application/vnd.3gpp.pfcp": {
        source: "iana"
      },
      "application/vnd.3gpp.pic-bw-large": {
        source: "iana",
        extensions: ["plb"]
      },
      "application/vnd.3gpp.pic-bw-small": {
        source: "iana",
        extensions: ["psb"]
      },
      "application/vnd.3gpp.pic-bw-var": {
        source: "iana",
        extensions: ["pvb"]
      },
      "application/vnd.3gpp.s1ap": {
        source: "iana"
      },
      "application/vnd.3gpp.sms": {
        source: "iana"
      },
      "application/vnd.3gpp.sms+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.srvcc-ext+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.srvcc-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.state-and-event-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.ussd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp2.bcmcsinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp2.sms": {
        source: "iana"
      },
      "application/vnd.3gpp2.tcap": {
        source: "iana",
        extensions: ["tcap"]
      },
      "application/vnd.3lightssoftware.imagescal": {
        source: "iana"
      },
      "application/vnd.3m.post-it-notes": {
        source: "iana",
        extensions: ["pwn"]
      },
      "application/vnd.accpac.simply.aso": {
        source: "iana",
        extensions: ["aso"]
      },
      "application/vnd.accpac.simply.imp": {
        source: "iana",
        extensions: ["imp"]
      },
      "application/vnd.acucobol": {
        source: "iana",
        extensions: ["acu"]
      },
      "application/vnd.acucorp": {
        source: "iana",
        extensions: ["atc", "acutc"]
      },
      "application/vnd.adobe.air-application-installer-package+zip": {
        source: "apache",
        compressible: false,
        extensions: ["air"]
      },
      "application/vnd.adobe.flash.movie": {
        source: "iana"
      },
      "application/vnd.adobe.formscentral.fcdt": {
        source: "iana",
        extensions: ["fcdt"]
      },
      "application/vnd.adobe.fxp": {
        source: "iana",
        extensions: ["fxp", "fxpl"]
      },
      "application/vnd.adobe.partial-upload": {
        source: "iana"
      },
      "application/vnd.adobe.xdp+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdp"]
      },
      "application/vnd.adobe.xfdf": {
        source: "iana",
        extensions: ["xfdf"]
      },
      "application/vnd.aether.imp": {
        source: "iana"
      },
      "application/vnd.afpc.afplinedata": {
        source: "iana"
      },
      "application/vnd.afpc.afplinedata-pagedef": {
        source: "iana"
      },
      "application/vnd.afpc.cmoca-cmresource": {
        source: "iana"
      },
      "application/vnd.afpc.foca-charset": {
        source: "iana"
      },
      "application/vnd.afpc.foca-codedfont": {
        source: "iana"
      },
      "application/vnd.afpc.foca-codepage": {
        source: "iana"
      },
      "application/vnd.afpc.modca": {
        source: "iana"
      },
      "application/vnd.afpc.modca-cmtable": {
        source: "iana"
      },
      "application/vnd.afpc.modca-formdef": {
        source: "iana"
      },
      "application/vnd.afpc.modca-mediummap": {
        source: "iana"
      },
      "application/vnd.afpc.modca-objectcontainer": {
        source: "iana"
      },
      "application/vnd.afpc.modca-overlay": {
        source: "iana"
      },
      "application/vnd.afpc.modca-pagesegment": {
        source: "iana"
      },
      "application/vnd.age": {
        source: "iana",
        extensions: ["age"]
      },
      "application/vnd.ah-barcode": {
        source: "iana"
      },
      "application/vnd.ahead.space": {
        source: "iana",
        extensions: ["ahead"]
      },
      "application/vnd.airzip.filesecure.azf": {
        source: "iana",
        extensions: ["azf"]
      },
      "application/vnd.airzip.filesecure.azs": {
        source: "iana",
        extensions: ["azs"]
      },
      "application/vnd.amadeus+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.amazon.ebook": {
        source: "apache",
        extensions: ["azw"]
      },
      "application/vnd.amazon.mobi8-ebook": {
        source: "iana"
      },
      "application/vnd.americandynamics.acc": {
        source: "iana",
        extensions: ["acc"]
      },
      "application/vnd.amiga.ami": {
        source: "iana",
        extensions: ["ami"]
      },
      "application/vnd.amundsen.maze+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.android.ota": {
        source: "iana"
      },
      "application/vnd.android.package-archive": {
        source: "apache",
        compressible: false,
        extensions: ["apk"]
      },
      "application/vnd.anki": {
        source: "iana"
      },
      "application/vnd.anser-web-certificate-issue-initiation": {
        source: "iana",
        extensions: ["cii"]
      },
      "application/vnd.anser-web-funds-transfer-initiation": {
        source: "apache",
        extensions: ["fti"]
      },
      "application/vnd.antix.game-component": {
        source: "iana",
        extensions: ["atx"]
      },
      "application/vnd.apache.arrow.file": {
        source: "iana"
      },
      "application/vnd.apache.arrow.stream": {
        source: "iana"
      },
      "application/vnd.apache.thrift.binary": {
        source: "iana"
      },
      "application/vnd.apache.thrift.compact": {
        source: "iana"
      },
      "application/vnd.apache.thrift.json": {
        source: "iana"
      },
      "application/vnd.api+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.aplextor.warrp+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.apothekende.reservation+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.apple.installer+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpkg"]
      },
      "application/vnd.apple.keynote": {
        source: "iana",
        extensions: ["key"]
      },
      "application/vnd.apple.mpegurl": {
        source: "iana",
        extensions: ["m3u8"]
      },
      "application/vnd.apple.numbers": {
        source: "iana",
        extensions: ["numbers"]
      },
      "application/vnd.apple.pages": {
        source: "iana",
        extensions: ["pages"]
      },
      "application/vnd.apple.pkpass": {
        compressible: false,
        extensions: ["pkpass"]
      },
      "application/vnd.arastra.swi": {
        source: "iana"
      },
      "application/vnd.aristanetworks.swi": {
        source: "iana",
        extensions: ["swi"]
      },
      "application/vnd.artisan+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.artsquare": {
        source: "iana"
      },
      "application/vnd.astraea-software.iota": {
        source: "iana",
        extensions: ["iota"]
      },
      "application/vnd.audiograph": {
        source: "iana",
        extensions: ["aep"]
      },
      "application/vnd.autopackage": {
        source: "iana"
      },
      "application/vnd.avalon+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.avistar+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.balsamiq.bmml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["bmml"]
      },
      "application/vnd.balsamiq.bmpr": {
        source: "iana"
      },
      "application/vnd.banana-accounting": {
        source: "iana"
      },
      "application/vnd.bbf.usp.error": {
        source: "iana"
      },
      "application/vnd.bbf.usp.msg": {
        source: "iana"
      },
      "application/vnd.bbf.usp.msg+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.bekitzur-stech+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.bint.med-content": {
        source: "iana"
      },
      "application/vnd.biopax.rdf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.blink-idb-value-wrapper": {
        source: "iana"
      },
      "application/vnd.blueice.multipass": {
        source: "iana",
        extensions: ["mpm"]
      },
      "application/vnd.bluetooth.ep.oob": {
        source: "iana"
      },
      "application/vnd.bluetooth.le.oob": {
        source: "iana"
      },
      "application/vnd.bmi": {
        source: "iana",
        extensions: ["bmi"]
      },
      "application/vnd.bpf": {
        source: "iana"
      },
      "application/vnd.bpf3": {
        source: "iana"
      },
      "application/vnd.businessobjects": {
        source: "iana",
        extensions: ["rep"]
      },
      "application/vnd.byu.uapi+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cab-jscript": {
        source: "iana"
      },
      "application/vnd.canon-cpdl": {
        source: "iana"
      },
      "application/vnd.canon-lips": {
        source: "iana"
      },
      "application/vnd.capasystems-pg+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cendio.thinlinc.clientconf": {
        source: "iana"
      },
      "application/vnd.century-systems.tcp_stream": {
        source: "iana"
      },
      "application/vnd.chemdraw+xml": {
        source: "iana",
        compressible: true,
        extensions: ["cdxml"]
      },
      "application/vnd.chess-pgn": {
        source: "iana"
      },
      "application/vnd.chipnuts.karaoke-mmd": {
        source: "iana",
        extensions: ["mmd"]
      },
      "application/vnd.ciedi": {
        source: "iana"
      },
      "application/vnd.cinderella": {
        source: "iana",
        extensions: ["cdy"]
      },
      "application/vnd.cirpack.isdn-ext": {
        source: "iana"
      },
      "application/vnd.citationstyles.style+xml": {
        source: "iana",
        compressible: true,
        extensions: ["csl"]
      },
      "application/vnd.claymore": {
        source: "iana",
        extensions: ["cla"]
      },
      "application/vnd.cloanto.rp9": {
        source: "iana",
        extensions: ["rp9"]
      },
      "application/vnd.clonk.c4group": {
        source: "iana",
        extensions: ["c4g", "c4d", "c4f", "c4p", "c4u"]
      },
      "application/vnd.cluetrust.cartomobile-config": {
        source: "iana",
        extensions: ["c11amc"]
      },
      "application/vnd.cluetrust.cartomobile-config-pkg": {
        source: "iana",
        extensions: ["c11amz"]
      },
      "application/vnd.coffeescript": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.document": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.document-template": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.presentation": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.presentation-template": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.spreadsheet": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.spreadsheet-template": {
        source: "iana"
      },
      "application/vnd.collection+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.collection.doc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.collection.next+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.comicbook+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.comicbook-rar": {
        source: "iana"
      },
      "application/vnd.commerce-battelle": {
        source: "iana"
      },
      "application/vnd.commonspace": {
        source: "iana",
        extensions: ["csp"]
      },
      "application/vnd.contact.cmsg": {
        source: "iana",
        extensions: ["cdbcmsg"]
      },
      "application/vnd.coreos.ignition+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cosmocaller": {
        source: "iana",
        extensions: ["cmc"]
      },
      "application/vnd.crick.clicker": {
        source: "iana",
        extensions: ["clkx"]
      },
      "application/vnd.crick.clicker.keyboard": {
        source: "iana",
        extensions: ["clkk"]
      },
      "application/vnd.crick.clicker.palette": {
        source: "iana",
        extensions: ["clkp"]
      },
      "application/vnd.crick.clicker.template": {
        source: "iana",
        extensions: ["clkt"]
      },
      "application/vnd.crick.clicker.wordbank": {
        source: "iana",
        extensions: ["clkw"]
      },
      "application/vnd.criticaltools.wbs+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wbs"]
      },
      "application/vnd.cryptii.pipe+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.crypto-shade-file": {
        source: "iana"
      },
      "application/vnd.cryptomator.encrypted": {
        source: "iana"
      },
      "application/vnd.cryptomator.vault": {
        source: "iana"
      },
      "application/vnd.ctc-posml": {
        source: "iana",
        extensions: ["pml"]
      },
      "application/vnd.ctct.ws+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cups-pdf": {
        source: "iana"
      },
      "application/vnd.cups-postscript": {
        source: "iana"
      },
      "application/vnd.cups-ppd": {
        source: "iana",
        extensions: ["ppd"]
      },
      "application/vnd.cups-raster": {
        source: "iana"
      },
      "application/vnd.cups-raw": {
        source: "iana"
      },
      "application/vnd.curl": {
        source: "iana"
      },
      "application/vnd.curl.car": {
        source: "apache",
        extensions: ["car"]
      },
      "application/vnd.curl.pcurl": {
        source: "apache",
        extensions: ["pcurl"]
      },
      "application/vnd.cyan.dean.root+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cybank": {
        source: "iana"
      },
      "application/vnd.cyclonedx+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cyclonedx+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.d2l.coursepackage1p0+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.d3m-dataset": {
        source: "iana"
      },
      "application/vnd.d3m-problem": {
        source: "iana"
      },
      "application/vnd.dart": {
        source: "iana",
        compressible: true,
        extensions: ["dart"]
      },
      "application/vnd.data-vision.rdz": {
        source: "iana",
        extensions: ["rdz"]
      },
      "application/vnd.datapackage+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dataresource+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dbf": {
        source: "iana",
        extensions: ["dbf"]
      },
      "application/vnd.debian.binary-package": {
        source: "iana"
      },
      "application/vnd.dece.data": {
        source: "iana",
        extensions: ["uvf", "uvvf", "uvd", "uvvd"]
      },
      "application/vnd.dece.ttml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["uvt", "uvvt"]
      },
      "application/vnd.dece.unspecified": {
        source: "iana",
        extensions: ["uvx", "uvvx"]
      },
      "application/vnd.dece.zip": {
        source: "iana",
        extensions: ["uvz", "uvvz"]
      },
      "application/vnd.denovo.fcselayout-link": {
        source: "iana",
        extensions: ["fe_launch"]
      },
      "application/vnd.desmume.movie": {
        source: "iana"
      },
      "application/vnd.dir-bi.plate-dl-nosuffix": {
        source: "iana"
      },
      "application/vnd.dm.delegation+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dna": {
        source: "iana",
        extensions: ["dna"]
      },
      "application/vnd.document+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dolby.mlp": {
        source: "apache",
        extensions: ["mlp"]
      },
      "application/vnd.dolby.mobile.1": {
        source: "iana"
      },
      "application/vnd.dolby.mobile.2": {
        source: "iana"
      },
      "application/vnd.doremir.scorecloud-binary-document": {
        source: "iana"
      },
      "application/vnd.dpgraph": {
        source: "iana",
        extensions: ["dpg"]
      },
      "application/vnd.dreamfactory": {
        source: "iana",
        extensions: ["dfac"]
      },
      "application/vnd.drive+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ds-keypoint": {
        source: "apache",
        extensions: ["kpxx"]
      },
      "application/vnd.dtg.local": {
        source: "iana"
      },
      "application/vnd.dtg.local.flash": {
        source: "iana"
      },
      "application/vnd.dtg.local.html": {
        source: "iana"
      },
      "application/vnd.dvb.ait": {
        source: "iana",
        extensions: ["ait"]
      },
      "application/vnd.dvb.dvbisl+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.dvbj": {
        source: "iana"
      },
      "application/vnd.dvb.esgcontainer": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcdftnotifaccess": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgaccess": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgaccess2": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgpdd": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcroaming": {
        source: "iana"
      },
      "application/vnd.dvb.iptv.alfec-base": {
        source: "iana"
      },
      "application/vnd.dvb.iptv.alfec-enhancement": {
        source: "iana"
      },
      "application/vnd.dvb.notif-aggregate-root+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-container+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-generic+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-msglist+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-registration-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-registration-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-init+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.pfr": {
        source: "iana"
      },
      "application/vnd.dvb.service": {
        source: "iana",
        extensions: ["svc"]
      },
      "application/vnd.dxr": {
        source: "iana"
      },
      "application/vnd.dynageo": {
        source: "iana",
        extensions: ["geo"]
      },
      "application/vnd.dzr": {
        source: "iana"
      },
      "application/vnd.easykaraoke.cdgdownload": {
        source: "iana"
      },
      "application/vnd.ecdis-update": {
        source: "iana"
      },
      "application/vnd.ecip.rlp": {
        source: "iana"
      },
      "application/vnd.eclipse.ditto+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ecowin.chart": {
        source: "iana",
        extensions: ["mag"]
      },
      "application/vnd.ecowin.filerequest": {
        source: "iana"
      },
      "application/vnd.ecowin.fileupdate": {
        source: "iana"
      },
      "application/vnd.ecowin.series": {
        source: "iana"
      },
      "application/vnd.ecowin.seriesrequest": {
        source: "iana"
      },
      "application/vnd.ecowin.seriesupdate": {
        source: "iana"
      },
      "application/vnd.efi.img": {
        source: "iana"
      },
      "application/vnd.efi.iso": {
        source: "iana"
      },
      "application/vnd.emclient.accessrequest+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.enliven": {
        source: "iana",
        extensions: ["nml"]
      },
      "application/vnd.enphase.envoy": {
        source: "iana"
      },
      "application/vnd.eprints.data+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.epson.esf": {
        source: "iana",
        extensions: ["esf"]
      },
      "application/vnd.epson.msf": {
        source: "iana",
        extensions: ["msf"]
      },
      "application/vnd.epson.quickanime": {
        source: "iana",
        extensions: ["qam"]
      },
      "application/vnd.epson.salt": {
        source: "iana",
        extensions: ["slt"]
      },
      "application/vnd.epson.ssf": {
        source: "iana",
        extensions: ["ssf"]
      },
      "application/vnd.ericsson.quickcall": {
        source: "iana"
      },
      "application/vnd.espass-espass+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.eszigno3+xml": {
        source: "iana",
        compressible: true,
        extensions: ["es3", "et3"]
      },
      "application/vnd.etsi.aoc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.asic-e+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.etsi.asic-s+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.etsi.cug+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvcommand+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvdiscovery+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-bc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-cod+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-npvr+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvservice+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsync+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvueprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.mcid+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.mheg5": {
        source: "iana"
      },
      "application/vnd.etsi.overload-control-policy-dataset+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.pstn+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.sci+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.simservs+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.timestamp-token": {
        source: "iana"
      },
      "application/vnd.etsi.tsl+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.tsl.der": {
        source: "iana"
      },
      "application/vnd.eu.kasparian.car+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.eudora.data": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.profile": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.settings": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.theme": {
        source: "iana"
      },
      "application/vnd.exstream-empower+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.exstream-package": {
        source: "iana"
      },
      "application/vnd.ezpix-album": {
        source: "iana",
        extensions: ["ez2"]
      },
      "application/vnd.ezpix-package": {
        source: "iana",
        extensions: ["ez3"]
      },
      "application/vnd.f-secure.mobile": {
        source: "iana"
      },
      "application/vnd.familysearch.gedcom+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.fastcopy-disk-image": {
        source: "iana"
      },
      "application/vnd.fdf": {
        source: "iana",
        extensions: ["fdf"]
      },
      "application/vnd.fdsn.mseed": {
        source: "iana",
        extensions: ["mseed"]
      },
      "application/vnd.fdsn.seed": {
        source: "iana",
        extensions: ["seed", "dataless"]
      },
      "application/vnd.ffsns": {
        source: "iana"
      },
      "application/vnd.ficlab.flb+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.filmit.zfc": {
        source: "iana"
      },
      "application/vnd.fints": {
        source: "iana"
      },
      "application/vnd.firemonkeys.cloudcell": {
        source: "iana"
      },
      "application/vnd.flographit": {
        source: "iana",
        extensions: ["gph"]
      },
      "application/vnd.fluxtime.clip": {
        source: "iana",
        extensions: ["ftc"]
      },
      "application/vnd.font-fontforge-sfd": {
        source: "iana"
      },
      "application/vnd.framemaker": {
        source: "iana",
        extensions: ["fm", "frame", "maker", "book"]
      },
      "application/vnd.frogans.fnc": {
        source: "iana",
        extensions: ["fnc"]
      },
      "application/vnd.frogans.ltf": {
        source: "iana",
        extensions: ["ltf"]
      },
      "application/vnd.fsc.weblaunch": {
        source: "iana",
        extensions: ["fsc"]
      },
      "application/vnd.fujifilm.fb.docuworks": {
        source: "iana"
      },
      "application/vnd.fujifilm.fb.docuworks.binder": {
        source: "iana"
      },
      "application/vnd.fujifilm.fb.docuworks.container": {
        source: "iana"
      },
      "application/vnd.fujifilm.fb.jfi+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.fujitsu.oasys": {
        source: "iana",
        extensions: ["oas"]
      },
      "application/vnd.fujitsu.oasys2": {
        source: "iana",
        extensions: ["oa2"]
      },
      "application/vnd.fujitsu.oasys3": {
        source: "iana",
        extensions: ["oa3"]
      },
      "application/vnd.fujitsu.oasysgp": {
        source: "iana",
        extensions: ["fg5"]
      },
      "application/vnd.fujitsu.oasysprs": {
        source: "iana",
        extensions: ["bh2"]
      },
      "application/vnd.fujixerox.art-ex": {
        source: "iana"
      },
      "application/vnd.fujixerox.art4": {
        source: "iana"
      },
      "application/vnd.fujixerox.ddd": {
        source: "iana",
        extensions: ["ddd"]
      },
      "application/vnd.fujixerox.docuworks": {
        source: "iana",
        extensions: ["xdw"]
      },
      "application/vnd.fujixerox.docuworks.binder": {
        source: "iana",
        extensions: ["xbd"]
      },
      "application/vnd.fujixerox.docuworks.container": {
        source: "iana"
      },
      "application/vnd.fujixerox.hbpl": {
        source: "iana"
      },
      "application/vnd.fut-misnet": {
        source: "iana"
      },
      "application/vnd.futoin+cbor": {
        source: "iana"
      },
      "application/vnd.futoin+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.fuzzysheet": {
        source: "iana",
        extensions: ["fzs"]
      },
      "application/vnd.genomatix.tuxedo": {
        source: "iana",
        extensions: ["txd"]
      },
      "application/vnd.gentics.grd+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geo+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geocube+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geogebra.file": {
        source: "iana",
        extensions: ["ggb"]
      },
      "application/vnd.geogebra.slides": {
        source: "iana"
      },
      "application/vnd.geogebra.tool": {
        source: "iana",
        extensions: ["ggt"]
      },
      "application/vnd.geometry-explorer": {
        source: "iana",
        extensions: ["gex", "gre"]
      },
      "application/vnd.geonext": {
        source: "iana",
        extensions: ["gxt"]
      },
      "application/vnd.geoplan": {
        source: "iana",
        extensions: ["g2w"]
      },
      "application/vnd.geospace": {
        source: "iana",
        extensions: ["g3w"]
      },
      "application/vnd.gerber": {
        source: "iana"
      },
      "application/vnd.globalplatform.card-content-mgt": {
        source: "iana"
      },
      "application/vnd.globalplatform.card-content-mgt-response": {
        source: "iana"
      },
      "application/vnd.gmx": {
        source: "iana",
        extensions: ["gmx"]
      },
      "application/vnd.google-apps.document": {
        compressible: false,
        extensions: ["gdoc"]
      },
      "application/vnd.google-apps.presentation": {
        compressible: false,
        extensions: ["gslides"]
      },
      "application/vnd.google-apps.spreadsheet": {
        compressible: false,
        extensions: ["gsheet"]
      },
      "application/vnd.google-earth.kml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["kml"]
      },
      "application/vnd.google-earth.kmz": {
        source: "iana",
        compressible: false,
        extensions: ["kmz"]
      },
      "application/vnd.gov.sk.e-form+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.gov.sk.e-form+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.gov.sk.xmldatacontainer+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.grafeq": {
        source: "iana",
        extensions: ["gqf", "gqs"]
      },
      "application/vnd.gridmp": {
        source: "iana"
      },
      "application/vnd.groove-account": {
        source: "iana",
        extensions: ["gac"]
      },
      "application/vnd.groove-help": {
        source: "iana",
        extensions: ["ghf"]
      },
      "application/vnd.groove-identity-message": {
        source: "iana",
        extensions: ["gim"]
      },
      "application/vnd.groove-injector": {
        source: "iana",
        extensions: ["grv"]
      },
      "application/vnd.groove-tool-message": {
        source: "iana",
        extensions: ["gtm"]
      },
      "application/vnd.groove-tool-template": {
        source: "iana",
        extensions: ["tpl"]
      },
      "application/vnd.groove-vcard": {
        source: "iana",
        extensions: ["vcg"]
      },
      "application/vnd.hal+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hal+xml": {
        source: "iana",
        compressible: true,
        extensions: ["hal"]
      },
      "application/vnd.handheld-entertainment+xml": {
        source: "iana",
        compressible: true,
        extensions: ["zmm"]
      },
      "application/vnd.hbci": {
        source: "iana",
        extensions: ["hbci"]
      },
      "application/vnd.hc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hcl-bireports": {
        source: "iana"
      },
      "application/vnd.hdt": {
        source: "iana"
      },
      "application/vnd.heroku+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hhe.lesson-player": {
        source: "iana",
        extensions: ["les"]
      },
      "application/vnd.hl7cda+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.hl7v2+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.hp-hpgl": {
        source: "iana",
        extensions: ["hpgl"]
      },
      "application/vnd.hp-hpid": {
        source: "iana",
        extensions: ["hpid"]
      },
      "application/vnd.hp-hps": {
        source: "iana",
        extensions: ["hps"]
      },
      "application/vnd.hp-jlyt": {
        source: "iana",
        extensions: ["jlt"]
      },
      "application/vnd.hp-pcl": {
        source: "iana",
        extensions: ["pcl"]
      },
      "application/vnd.hp-pclxl": {
        source: "iana",
        extensions: ["pclxl"]
      },
      "application/vnd.httphone": {
        source: "iana"
      },
      "application/vnd.hydrostatix.sof-data": {
        source: "iana",
        extensions: ["sfd-hdstx"]
      },
      "application/vnd.hyper+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hyper-item+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hyperdrive+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hzn-3d-crossword": {
        source: "iana"
      },
      "application/vnd.ibm.afplinedata": {
        source: "iana"
      },
      "application/vnd.ibm.electronic-media": {
        source: "iana"
      },
      "application/vnd.ibm.minipay": {
        source: "iana",
        extensions: ["mpy"]
      },
      "application/vnd.ibm.modcap": {
        source: "iana",
        extensions: ["afp", "listafp", "list3820"]
      },
      "application/vnd.ibm.rights-management": {
        source: "iana",
        extensions: ["irm"]
      },
      "application/vnd.ibm.secure-container": {
        source: "iana",
        extensions: ["sc"]
      },
      "application/vnd.iccprofile": {
        source: "iana",
        extensions: ["icc", "icm"]
      },
      "application/vnd.ieee.1905": {
        source: "iana"
      },
      "application/vnd.igloader": {
        source: "iana",
        extensions: ["igl"]
      },
      "application/vnd.imagemeter.folder+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.imagemeter.image+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.immervision-ivp": {
        source: "iana",
        extensions: ["ivp"]
      },
      "application/vnd.immervision-ivu": {
        source: "iana",
        extensions: ["ivu"]
      },
      "application/vnd.ims.imsccv1p1": {
        source: "iana"
      },
      "application/vnd.ims.imsccv1p2": {
        source: "iana"
      },
      "application/vnd.ims.imsccv1p3": {
        source: "iana"
      },
      "application/vnd.ims.lis.v2.result+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolproxy+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolproxy.id+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolsettings+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolsettings.simple+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.informedcontrol.rms+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.informix-visionary": {
        source: "iana"
      },
      "application/vnd.infotech.project": {
        source: "iana"
      },
      "application/vnd.infotech.project+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.innopath.wamp.notification": {
        source: "iana"
      },
      "application/vnd.insors.igm": {
        source: "iana",
        extensions: ["igm"]
      },
      "application/vnd.intercon.formnet": {
        source: "iana",
        extensions: ["xpw", "xpx"]
      },
      "application/vnd.intergeo": {
        source: "iana",
        extensions: ["i2g"]
      },
      "application/vnd.intertrust.digibox": {
        source: "iana"
      },
      "application/vnd.intertrust.nncp": {
        source: "iana"
      },
      "application/vnd.intu.qbo": {
        source: "iana",
        extensions: ["qbo"]
      },
      "application/vnd.intu.qfx": {
        source: "iana",
        extensions: ["qfx"]
      },
      "application/vnd.iptc.g2.catalogitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.conceptitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.knowledgeitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.newsitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.newsmessage+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.packageitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.planningitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ipunplugged.rcprofile": {
        source: "iana",
        extensions: ["rcprofile"]
      },
      "application/vnd.irepository.package+xml": {
        source: "iana",
        compressible: true,
        extensions: ["irp"]
      },
      "application/vnd.is-xpr": {
        source: "iana",
        extensions: ["xpr"]
      },
      "application/vnd.isac.fcs": {
        source: "iana",
        extensions: ["fcs"]
      },
      "application/vnd.iso11783-10+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.jam": {
        source: "iana",
        extensions: ["jam"]
      },
      "application/vnd.japannet-directory-service": {
        source: "iana"
      },
      "application/vnd.japannet-jpnstore-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-payment-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-registration": {
        source: "iana"
      },
      "application/vnd.japannet-registration-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-setstore-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-verification": {
        source: "iana"
      },
      "application/vnd.japannet-verification-wakeup": {
        source: "iana"
      },
      "application/vnd.jcp.javame.midlet-rms": {
        source: "iana",
        extensions: ["rms"]
      },
      "application/vnd.jisp": {
        source: "iana",
        extensions: ["jisp"]
      },
      "application/vnd.joost.joda-archive": {
        source: "iana",
        extensions: ["joda"]
      },
      "application/vnd.jsk.isdn-ngn": {
        source: "iana"
      },
      "application/vnd.kahootz": {
        source: "iana",
        extensions: ["ktz", "ktr"]
      },
      "application/vnd.kde.karbon": {
        source: "iana",
        extensions: ["karbon"]
      },
      "application/vnd.kde.kchart": {
        source: "iana",
        extensions: ["chrt"]
      },
      "application/vnd.kde.kformula": {
        source: "iana",
        extensions: ["kfo"]
      },
      "application/vnd.kde.kivio": {
        source: "iana",
        extensions: ["flw"]
      },
      "application/vnd.kde.kontour": {
        source: "iana",
        extensions: ["kon"]
      },
      "application/vnd.kde.kpresenter": {
        source: "iana",
        extensions: ["kpr", "kpt"]
      },
      "application/vnd.kde.kspread": {
        source: "iana",
        extensions: ["ksp"]
      },
      "application/vnd.kde.kword": {
        source: "iana",
        extensions: ["kwd", "kwt"]
      },
      "application/vnd.kenameaapp": {
        source: "iana",
        extensions: ["htke"]
      },
      "application/vnd.kidspiration": {
        source: "iana",
        extensions: ["kia"]
      },
      "application/vnd.kinar": {
        source: "iana",
        extensions: ["kne", "knp"]
      },
      "application/vnd.koan": {
        source: "iana",
        extensions: ["skp", "skd", "skt", "skm"]
      },
      "application/vnd.kodak-descriptor": {
        source: "iana",
        extensions: ["sse"]
      },
      "application/vnd.las": {
        source: "iana"
      },
      "application/vnd.las.las+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.las.las+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lasxml"]
      },
      "application/vnd.laszip": {
        source: "iana"
      },
      "application/vnd.leap+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.liberty-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.llamagraphics.life-balance.desktop": {
        source: "iana",
        extensions: ["lbd"]
      },
      "application/vnd.llamagraphics.life-balance.exchange+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lbe"]
      },
      "application/vnd.logipipe.circuit+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.loom": {
        source: "iana"
      },
      "application/vnd.lotus-1-2-3": {
        source: "iana",
        extensions: ["123"]
      },
      "application/vnd.lotus-approach": {
        source: "iana",
        extensions: ["apr"]
      },
      "application/vnd.lotus-freelance": {
        source: "iana",
        extensions: ["pre"]
      },
      "application/vnd.lotus-notes": {
        source: "iana",
        extensions: ["nsf"]
      },
      "application/vnd.lotus-organizer": {
        source: "iana",
        extensions: ["org"]
      },
      "application/vnd.lotus-screencam": {
        source: "iana",
        extensions: ["scm"]
      },
      "application/vnd.lotus-wordpro": {
        source: "iana",
        extensions: ["lwp"]
      },
      "application/vnd.macports.portpkg": {
        source: "iana",
        extensions: ["portpkg"]
      },
      "application/vnd.mapbox-vector-tile": {
        source: "iana",
        extensions: ["mvt"]
      },
      "application/vnd.marlin.drm.actiontoken+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.conftoken+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.license+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.mdcf": {
        source: "iana"
      },
      "application/vnd.mason+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.maxar.archive.3tz+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.maxmind.maxmind-db": {
        source: "iana"
      },
      "application/vnd.mcd": {
        source: "iana",
        extensions: ["mcd"]
      },
      "application/vnd.medcalcdata": {
        source: "iana",
        extensions: ["mc1"]
      },
      "application/vnd.mediastation.cdkey": {
        source: "iana",
        extensions: ["cdkey"]
      },
      "application/vnd.meridian-slingshot": {
        source: "iana"
      },
      "application/vnd.mfer": {
        source: "iana",
        extensions: ["mwf"]
      },
      "application/vnd.mfmp": {
        source: "iana",
        extensions: ["mfm"]
      },
      "application/vnd.micro+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.micrografx.flo": {
        source: "iana",
        extensions: ["flo"]
      },
      "application/vnd.micrografx.igx": {
        source: "iana",
        extensions: ["igx"]
      },
      "application/vnd.microsoft.portable-executable": {
        source: "iana"
      },
      "application/vnd.microsoft.windows.thumbnail-cache": {
        source: "iana"
      },
      "application/vnd.miele+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.mif": {
        source: "iana",
        extensions: ["mif"]
      },
      "application/vnd.minisoft-hp3000-save": {
        source: "iana"
      },
      "application/vnd.mitsubishi.misty-guard.trustweb": {
        source: "iana"
      },
      "application/vnd.mobius.daf": {
        source: "iana",
        extensions: ["daf"]
      },
      "application/vnd.mobius.dis": {
        source: "iana",
        extensions: ["dis"]
      },
      "application/vnd.mobius.mbk": {
        source: "iana",
        extensions: ["mbk"]
      },
      "application/vnd.mobius.mqy": {
        source: "iana",
        extensions: ["mqy"]
      },
      "application/vnd.mobius.msl": {
        source: "iana",
        extensions: ["msl"]
      },
      "application/vnd.mobius.plc": {
        source: "iana",
        extensions: ["plc"]
      },
      "application/vnd.mobius.txf": {
        source: "iana",
        extensions: ["txf"]
      },
      "application/vnd.mophun.application": {
        source: "iana",
        extensions: ["mpn"]
      },
      "application/vnd.mophun.certificate": {
        source: "iana",
        extensions: ["mpc"]
      },
      "application/vnd.motorola.flexsuite": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.adsi": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.fis": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.gotap": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.kmr": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.ttc": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.wem": {
        source: "iana"
      },
      "application/vnd.motorola.iprm": {
        source: "iana"
      },
      "application/vnd.mozilla.xul+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xul"]
      },
      "application/vnd.ms-3mfdocument": {
        source: "iana"
      },
      "application/vnd.ms-artgalry": {
        source: "iana",
        extensions: ["cil"]
      },
      "application/vnd.ms-asf": {
        source: "iana"
      },
      "application/vnd.ms-cab-compressed": {
        source: "iana",
        extensions: ["cab"]
      },
      "application/vnd.ms-color.iccprofile": {
        source: "apache"
      },
      "application/vnd.ms-excel": {
        source: "iana",
        compressible: false,
        extensions: ["xls", "xlm", "xla", "xlc", "xlt", "xlw"]
      },
      "application/vnd.ms-excel.addin.macroenabled.12": {
        source: "iana",
        extensions: ["xlam"]
      },
      "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
        source: "iana",
        extensions: ["xlsb"]
      },
      "application/vnd.ms-excel.sheet.macroenabled.12": {
        source: "iana",
        extensions: ["xlsm"]
      },
      "application/vnd.ms-excel.template.macroenabled.12": {
        source: "iana",
        extensions: ["xltm"]
      },
      "application/vnd.ms-fontobject": {
        source: "iana",
        compressible: true,
        extensions: ["eot"]
      },
      "application/vnd.ms-htmlhelp": {
        source: "iana",
        extensions: ["chm"]
      },
      "application/vnd.ms-ims": {
        source: "iana",
        extensions: ["ims"]
      },
      "application/vnd.ms-lrm": {
        source: "iana",
        extensions: ["lrm"]
      },
      "application/vnd.ms-office.activex+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-officetheme": {
        source: "iana",
        extensions: ["thmx"]
      },
      "application/vnd.ms-opentype": {
        source: "apache",
        compressible: true
      },
      "application/vnd.ms-outlook": {
        compressible: false,
        extensions: ["msg"]
      },
      "application/vnd.ms-package.obfuscated-opentype": {
        source: "apache"
      },
      "application/vnd.ms-pki.seccat": {
        source: "apache",
        extensions: ["cat"]
      },
      "application/vnd.ms-pki.stl": {
        source: "apache",
        extensions: ["stl"]
      },
      "application/vnd.ms-playready.initiator+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-powerpoint": {
        source: "iana",
        compressible: false,
        extensions: ["ppt", "pps", "pot"]
      },
      "application/vnd.ms-powerpoint.addin.macroenabled.12": {
        source: "iana",
        extensions: ["ppam"]
      },
      "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
        source: "iana",
        extensions: ["pptm"]
      },
      "application/vnd.ms-powerpoint.slide.macroenabled.12": {
        source: "iana",
        extensions: ["sldm"]
      },
      "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
        source: "iana",
        extensions: ["ppsm"]
      },
      "application/vnd.ms-powerpoint.template.macroenabled.12": {
        source: "iana",
        extensions: ["potm"]
      },
      "application/vnd.ms-printdevicecapabilities+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-printing.printticket+xml": {
        source: "apache",
        compressible: true
      },
      "application/vnd.ms-printschematicket+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-project": {
        source: "iana",
        extensions: ["mpp", "mpt"]
      },
      "application/vnd.ms-tnef": {
        source: "iana"
      },
      "application/vnd.ms-windows.devicepairing": {
        source: "iana"
      },
      "application/vnd.ms-windows.nwprinting.oob": {
        source: "iana"
      },
      "application/vnd.ms-windows.printerpairing": {
        source: "iana"
      },
      "application/vnd.ms-windows.wsd.oob": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.lic-chlg-req": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.lic-resp": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.meter-chlg-req": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.meter-resp": {
        source: "iana"
      },
      "application/vnd.ms-word.document.macroenabled.12": {
        source: "iana",
        extensions: ["docm"]
      },
      "application/vnd.ms-word.template.macroenabled.12": {
        source: "iana",
        extensions: ["dotm"]
      },
      "application/vnd.ms-works": {
        source: "iana",
        extensions: ["wps", "wks", "wcm", "wdb"]
      },
      "application/vnd.ms-wpl": {
        source: "iana",
        extensions: ["wpl"]
      },
      "application/vnd.ms-xpsdocument": {
        source: "iana",
        compressible: false,
        extensions: ["xps"]
      },
      "application/vnd.msa-disk-image": {
        source: "iana"
      },
      "application/vnd.mseq": {
        source: "iana",
        extensions: ["mseq"]
      },
      "application/vnd.msign": {
        source: "iana"
      },
      "application/vnd.multiad.creator": {
        source: "iana"
      },
      "application/vnd.multiad.creator.cif": {
        source: "iana"
      },
      "application/vnd.music-niff": {
        source: "iana"
      },
      "application/vnd.musician": {
        source: "iana",
        extensions: ["mus"]
      },
      "application/vnd.muvee.style": {
        source: "iana",
        extensions: ["msty"]
      },
      "application/vnd.mynfc": {
        source: "iana",
        extensions: ["taglet"]
      },
      "application/vnd.nacamar.ybrid+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ncd.control": {
        source: "iana"
      },
      "application/vnd.ncd.reference": {
        source: "iana"
      },
      "application/vnd.nearst.inv+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nebumind.line": {
        source: "iana"
      },
      "application/vnd.nervana": {
        source: "iana"
      },
      "application/vnd.netfpx": {
        source: "iana"
      },
      "application/vnd.neurolanguage.nlu": {
        source: "iana",
        extensions: ["nlu"]
      },
      "application/vnd.nimn": {
        source: "iana"
      },
      "application/vnd.nintendo.nitro.rom": {
        source: "iana"
      },
      "application/vnd.nintendo.snes.rom": {
        source: "iana"
      },
      "application/vnd.nitf": {
        source: "iana",
        extensions: ["ntf", "nitf"]
      },
      "application/vnd.noblenet-directory": {
        source: "iana",
        extensions: ["nnd"]
      },
      "application/vnd.noblenet-sealer": {
        source: "iana",
        extensions: ["nns"]
      },
      "application/vnd.noblenet-web": {
        source: "iana",
        extensions: ["nnw"]
      },
      "application/vnd.nokia.catalogs": {
        source: "iana"
      },
      "application/vnd.nokia.conml+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.conml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.iptv.config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.isds-radio-presets": {
        source: "iana"
      },
      "application/vnd.nokia.landmark+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.landmark+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.landmarkcollection+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.n-gage.ac+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ac"]
      },
      "application/vnd.nokia.n-gage.data": {
        source: "iana",
        extensions: ["ngdat"]
      },
      "application/vnd.nokia.n-gage.symbian.install": {
        source: "iana",
        extensions: ["n-gage"]
      },
      "application/vnd.nokia.ncd": {
        source: "iana"
      },
      "application/vnd.nokia.pcd+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.pcd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.radio-preset": {
        source: "iana",
        extensions: ["rpst"]
      },
      "application/vnd.nokia.radio-presets": {
        source: "iana",
        extensions: ["rpss"]
      },
      "application/vnd.novadigm.edm": {
        source: "iana",
        extensions: ["edm"]
      },
      "application/vnd.novadigm.edx": {
        source: "iana",
        extensions: ["edx"]
      },
      "application/vnd.novadigm.ext": {
        source: "iana",
        extensions: ["ext"]
      },
      "application/vnd.ntt-local.content-share": {
        source: "iana"
      },
      "application/vnd.ntt-local.file-transfer": {
        source: "iana"
      },
      "application/vnd.ntt-local.ogw_remote-access": {
        source: "iana"
      },
      "application/vnd.ntt-local.sip-ta_remote": {
        source: "iana"
      },
      "application/vnd.ntt-local.sip-ta_tcp_stream": {
        source: "iana"
      },
      "application/vnd.oasis.opendocument.chart": {
        source: "iana",
        extensions: ["odc"]
      },
      "application/vnd.oasis.opendocument.chart-template": {
        source: "iana",
        extensions: ["otc"]
      },
      "application/vnd.oasis.opendocument.database": {
        source: "iana",
        extensions: ["odb"]
      },
      "application/vnd.oasis.opendocument.formula": {
        source: "iana",
        extensions: ["odf"]
      },
      "application/vnd.oasis.opendocument.formula-template": {
        source: "iana",
        extensions: ["odft"]
      },
      "application/vnd.oasis.opendocument.graphics": {
        source: "iana",
        compressible: false,
        extensions: ["odg"]
      },
      "application/vnd.oasis.opendocument.graphics-template": {
        source: "iana",
        extensions: ["otg"]
      },
      "application/vnd.oasis.opendocument.image": {
        source: "iana",
        extensions: ["odi"]
      },
      "application/vnd.oasis.opendocument.image-template": {
        source: "iana",
        extensions: ["oti"]
      },
      "application/vnd.oasis.opendocument.presentation": {
        source: "iana",
        compressible: false,
        extensions: ["odp"]
      },
      "application/vnd.oasis.opendocument.presentation-template": {
        source: "iana",
        extensions: ["otp"]
      },
      "application/vnd.oasis.opendocument.spreadsheet": {
        source: "iana",
        compressible: false,
        extensions: ["ods"]
      },
      "application/vnd.oasis.opendocument.spreadsheet-template": {
        source: "iana",
        extensions: ["ots"]
      },
      "application/vnd.oasis.opendocument.text": {
        source: "iana",
        compressible: false,
        extensions: ["odt"]
      },
      "application/vnd.oasis.opendocument.text-master": {
        source: "iana",
        extensions: ["odm"]
      },
      "application/vnd.oasis.opendocument.text-template": {
        source: "iana",
        extensions: ["ott"]
      },
      "application/vnd.oasis.opendocument.text-web": {
        source: "iana",
        extensions: ["oth"]
      },
      "application/vnd.obn": {
        source: "iana"
      },
      "application/vnd.ocf+cbor": {
        source: "iana"
      },
      "application/vnd.oci.image.manifest.v1+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oftn.l10n+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.contentaccessdownload+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.contentaccessstreaming+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.cspg-hexbinary": {
        source: "iana"
      },
      "application/vnd.oipf.dae.svg+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.dae.xhtml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.mippvcontrolmessage+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.pae.gem": {
        source: "iana"
      },
      "application/vnd.oipf.spdiscovery+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.spdlist+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.ueprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.userprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.olpc-sugar": {
        source: "iana",
        extensions: ["xo"]
      },
      "application/vnd.oma-scws-config": {
        source: "iana"
      },
      "application/vnd.oma-scws-http-request": {
        source: "iana"
      },
      "application/vnd.oma-scws-http-response": {
        source: "iana"
      },
      "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.drm-trigger+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.imd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.ltkm": {
        source: "iana"
      },
      "application/vnd.oma.bcast.notification+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.provisioningtrigger": {
        source: "iana"
      },
      "application/vnd.oma.bcast.sgboot": {
        source: "iana"
      },
      "application/vnd.oma.bcast.sgdd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.sgdu": {
        source: "iana"
      },
      "application/vnd.oma.bcast.simple-symbol-container": {
        source: "iana"
      },
      "application/vnd.oma.bcast.smartcard-trigger+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.sprov+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.stkm": {
        source: "iana"
      },
      "application/vnd.oma.cab-address-book+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-feature-handler+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-pcc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-subs-invite+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-user-prefs+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.dcd": {
        source: "iana"
      },
      "application/vnd.oma.dcdc": {
        source: "iana"
      },
      "application/vnd.oma.dd2+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dd2"]
      },
      "application/vnd.oma.drm.risd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.group-usage-list+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.lwm2m+cbor": {
        source: "iana"
      },
      "application/vnd.oma.lwm2m+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.lwm2m+tlv": {
        source: "iana"
      },
      "application/vnd.oma.pal+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.detailed-progress-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.final-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.groups+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.invocation-descriptor+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.optimized-progress-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.push": {
        source: "iana"
      },
      "application/vnd.oma.scidm.messages+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.xcap-directory+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.omads-email+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.omads-file+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.omads-folder+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.omaloc-supl-init": {
        source: "iana"
      },
      "application/vnd.onepager": {
        source: "iana"
      },
      "application/vnd.onepagertamp": {
        source: "iana"
      },
      "application/vnd.onepagertamx": {
        source: "iana"
      },
      "application/vnd.onepagertat": {
        source: "iana"
      },
      "application/vnd.onepagertatp": {
        source: "iana"
      },
      "application/vnd.onepagertatx": {
        source: "iana"
      },
      "application/vnd.openblox.game+xml": {
        source: "iana",
        compressible: true,
        extensions: ["obgx"]
      },
      "application/vnd.openblox.game-binary": {
        source: "iana"
      },
      "application/vnd.openeye.oeb": {
        source: "iana"
      },
      "application/vnd.openofficeorg.extension": {
        source: "apache",
        extensions: ["oxt"]
      },
      "application/vnd.openstreetmap.data+xml": {
        source: "iana",
        compressible: true,
        extensions: ["osm"]
      },
      "application/vnd.opentimestamps.ots": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawing+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
        source: "iana",
        compressible: false,
        extensions: ["pptx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slide": {
        source: "iana",
        extensions: ["sldx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
        source: "iana",
        extensions: ["ppsx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.template": {
        source: "iana",
        extensions: ["potx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
        source: "iana",
        compressible: false,
        extensions: ["xlsx"]
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
        source: "iana",
        extensions: ["xltx"]
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.theme+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.vmldrawing": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
        source: "iana",
        compressible: false,
        extensions: ["docx"]
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
        source: "iana",
        extensions: ["dotx"]
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.core-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.relationships+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oracle.resource+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.orange.indata": {
        source: "iana"
      },
      "application/vnd.osa.netdeploy": {
        source: "iana"
      },
      "application/vnd.osgeo.mapguide.package": {
        source: "iana",
        extensions: ["mgp"]
      },
      "application/vnd.osgi.bundle": {
        source: "iana"
      },
      "application/vnd.osgi.dp": {
        source: "iana",
        extensions: ["dp"]
      },
      "application/vnd.osgi.subsystem": {
        source: "iana",
        extensions: ["esa"]
      },
      "application/vnd.otps.ct-kip+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oxli.countgraph": {
        source: "iana"
      },
      "application/vnd.pagerduty+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.palm": {
        source: "iana",
        extensions: ["pdb", "pqa", "oprc"]
      },
      "application/vnd.panoply": {
        source: "iana"
      },
      "application/vnd.paos.xml": {
        source: "iana"
      },
      "application/vnd.patentdive": {
        source: "iana"
      },
      "application/vnd.patientecommsdoc": {
        source: "iana"
      },
      "application/vnd.pawaafile": {
        source: "iana",
        extensions: ["paw"]
      },
      "application/vnd.pcos": {
        source: "iana"
      },
      "application/vnd.pg.format": {
        source: "iana",
        extensions: ["str"]
      },
      "application/vnd.pg.osasli": {
        source: "iana",
        extensions: ["ei6"]
      },
      "application/vnd.piaccess.application-licence": {
        source: "iana"
      },
      "application/vnd.picsel": {
        source: "iana",
        extensions: ["efif"]
      },
      "application/vnd.pmi.widget": {
        source: "iana",
        extensions: ["wg"]
      },
      "application/vnd.poc.group-advertisement+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.pocketlearn": {
        source: "iana",
        extensions: ["plf"]
      },
      "application/vnd.powerbuilder6": {
        source: "iana",
        extensions: ["pbd"]
      },
      "application/vnd.powerbuilder6-s": {
        source: "iana"
      },
      "application/vnd.powerbuilder7": {
        source: "iana"
      },
      "application/vnd.powerbuilder7-s": {
        source: "iana"
      },
      "application/vnd.powerbuilder75": {
        source: "iana"
      },
      "application/vnd.powerbuilder75-s": {
        source: "iana"
      },
      "application/vnd.preminet": {
        source: "iana"
      },
      "application/vnd.previewsystems.box": {
        source: "iana",
        extensions: ["box"]
      },
      "application/vnd.proteus.magazine": {
        source: "iana",
        extensions: ["mgz"]
      },
      "application/vnd.psfs": {
        source: "iana"
      },
      "application/vnd.publishare-delta-tree": {
        source: "iana",
        extensions: ["qps"]
      },
      "application/vnd.pvi.ptid1": {
        source: "iana",
        extensions: ["ptid"]
      },
      "application/vnd.pwg-multiplexed": {
        source: "iana"
      },
      "application/vnd.pwg-xhtml-print+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.qualcomm.brew-app-res": {
        source: "iana"
      },
      "application/vnd.quarantainenet": {
        source: "iana"
      },
      "application/vnd.quark.quarkxpress": {
        source: "iana",
        extensions: ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"]
      },
      "application/vnd.quobject-quoxdocument": {
        source: "iana"
      },
      "application/vnd.radisys.moml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-conf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-conn+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-dialog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-stream+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-conf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-base+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-fax-detect+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-group+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-speech+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-transform+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.rainstor.data": {
        source: "iana"
      },
      "application/vnd.rapid": {
        source: "iana"
      },
      "application/vnd.rar": {
        source: "iana",
        extensions: ["rar"]
      },
      "application/vnd.realvnc.bed": {
        source: "iana",
        extensions: ["bed"]
      },
      "application/vnd.recordare.musicxml": {
        source: "iana",
        extensions: ["mxl"]
      },
      "application/vnd.recordare.musicxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["musicxml"]
      },
      "application/vnd.renlearn.rlprint": {
        source: "iana"
      },
      "application/vnd.resilient.logic": {
        source: "iana"
      },
      "application/vnd.restful+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.rig.cryptonote": {
        source: "iana",
        extensions: ["cryptonote"]
      },
      "application/vnd.rim.cod": {
        source: "apache",
        extensions: ["cod"]
      },
      "application/vnd.rn-realmedia": {
        source: "apache",
        extensions: ["rm"]
      },
      "application/vnd.rn-realmedia-vbr": {
        source: "apache",
        extensions: ["rmvb"]
      },
      "application/vnd.route66.link66+xml": {
        source: "iana",
        compressible: true,
        extensions: ["link66"]
      },
      "application/vnd.rs-274x": {
        source: "iana"
      },
      "application/vnd.ruckus.download": {
        source: "iana"
      },
      "application/vnd.s3sms": {
        source: "iana"
      },
      "application/vnd.sailingtracker.track": {
        source: "iana",
        extensions: ["st"]
      },
      "application/vnd.sar": {
        source: "iana"
      },
      "application/vnd.sbm.cid": {
        source: "iana"
      },
      "application/vnd.sbm.mid2": {
        source: "iana"
      },
      "application/vnd.scribus": {
        source: "iana"
      },
      "application/vnd.sealed.3df": {
        source: "iana"
      },
      "application/vnd.sealed.csf": {
        source: "iana"
      },
      "application/vnd.sealed.doc": {
        source: "iana"
      },
      "application/vnd.sealed.eml": {
        source: "iana"
      },
      "application/vnd.sealed.mht": {
        source: "iana"
      },
      "application/vnd.sealed.net": {
        source: "iana"
      },
      "application/vnd.sealed.ppt": {
        source: "iana"
      },
      "application/vnd.sealed.tiff": {
        source: "iana"
      },
      "application/vnd.sealed.xls": {
        source: "iana"
      },
      "application/vnd.sealedmedia.softseal.html": {
        source: "iana"
      },
      "application/vnd.sealedmedia.softseal.pdf": {
        source: "iana"
      },
      "application/vnd.seemail": {
        source: "iana",
        extensions: ["see"]
      },
      "application/vnd.seis+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.sema": {
        source: "iana",
        extensions: ["sema"]
      },
      "application/vnd.semd": {
        source: "iana",
        extensions: ["semd"]
      },
      "application/vnd.semf": {
        source: "iana",
        extensions: ["semf"]
      },
      "application/vnd.shade-save-file": {
        source: "iana"
      },
      "application/vnd.shana.informed.formdata": {
        source: "iana",
        extensions: ["ifm"]
      },
      "application/vnd.shana.informed.formtemplate": {
        source: "iana",
        extensions: ["itp"]
      },
      "application/vnd.shana.informed.interchange": {
        source: "iana",
        extensions: ["iif"]
      },
      "application/vnd.shana.informed.package": {
        source: "iana",
        extensions: ["ipk"]
      },
      "application/vnd.shootproof+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.shopkick+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.shp": {
        source: "iana"
      },
      "application/vnd.shx": {
        source: "iana"
      },
      "application/vnd.sigrok.session": {
        source: "iana"
      },
      "application/vnd.simtech-mindmapper": {
        source: "iana",
        extensions: ["twd", "twds"]
      },
      "application/vnd.siren+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.smaf": {
        source: "iana",
        extensions: ["mmf"]
      },
      "application/vnd.smart.notebook": {
        source: "iana"
      },
      "application/vnd.smart.teacher": {
        source: "iana",
        extensions: ["teacher"]
      },
      "application/vnd.snesdev-page-table": {
        source: "iana"
      },
      "application/vnd.software602.filler.form+xml": {
        source: "iana",
        compressible: true,
        extensions: ["fo"]
      },
      "application/vnd.software602.filler.form-xml-zip": {
        source: "iana"
      },
      "application/vnd.solent.sdkm+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sdkm", "sdkd"]
      },
      "application/vnd.spotfire.dxp": {
        source: "iana",
        extensions: ["dxp"]
      },
      "application/vnd.spotfire.sfs": {
        source: "iana",
        extensions: ["sfs"]
      },
      "application/vnd.sqlite3": {
        source: "iana"
      },
      "application/vnd.sss-cod": {
        source: "iana"
      },
      "application/vnd.sss-dtf": {
        source: "iana"
      },
      "application/vnd.sss-ntf": {
        source: "iana"
      },
      "application/vnd.stardivision.calc": {
        source: "apache",
        extensions: ["sdc"]
      },
      "application/vnd.stardivision.draw": {
        source: "apache",
        extensions: ["sda"]
      },
      "application/vnd.stardivision.impress": {
        source: "apache",
        extensions: ["sdd"]
      },
      "application/vnd.stardivision.math": {
        source: "apache",
        extensions: ["smf"]
      },
      "application/vnd.stardivision.writer": {
        source: "apache",
        extensions: ["sdw", "vor"]
      },
      "application/vnd.stardivision.writer-global": {
        source: "apache",
        extensions: ["sgl"]
      },
      "application/vnd.stepmania.package": {
        source: "iana",
        extensions: ["smzip"]
      },
      "application/vnd.stepmania.stepchart": {
        source: "iana",
        extensions: ["sm"]
      },
      "application/vnd.street-stream": {
        source: "iana"
      },
      "application/vnd.sun.wadl+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wadl"]
      },
      "application/vnd.sun.xml.calc": {
        source: "apache",
        extensions: ["sxc"]
      },
      "application/vnd.sun.xml.calc.template": {
        source: "apache",
        extensions: ["stc"]
      },
      "application/vnd.sun.xml.draw": {
        source: "apache",
        extensions: ["sxd"]
      },
      "application/vnd.sun.xml.draw.template": {
        source: "apache",
        extensions: ["std"]
      },
      "application/vnd.sun.xml.impress": {
        source: "apache",
        extensions: ["sxi"]
      },
      "application/vnd.sun.xml.impress.template": {
        source: "apache",
        extensions: ["sti"]
      },
      "application/vnd.sun.xml.math": {
        source: "apache",
        extensions: ["sxm"]
      },
      "application/vnd.sun.xml.writer": {
        source: "apache",
        extensions: ["sxw"]
      },
      "application/vnd.sun.xml.writer.global": {
        source: "apache",
        extensions: ["sxg"]
      },
      "application/vnd.sun.xml.writer.template": {
        source: "apache",
        extensions: ["stw"]
      },
      "application/vnd.sus-calendar": {
        source: "iana",
        extensions: ["sus", "susp"]
      },
      "application/vnd.svd": {
        source: "iana",
        extensions: ["svd"]
      },
      "application/vnd.swiftview-ics": {
        source: "iana"
      },
      "application/vnd.sycle+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.syft+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.symbian.install": {
        source: "apache",
        extensions: ["sis", "sisx"]
      },
      "application/vnd.syncml+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["xsm"]
      },
      "application/vnd.syncml.dm+wbxml": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["bdm"]
      },
      "application/vnd.syncml.dm+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["xdm"]
      },
      "application/vnd.syncml.dm.notification": {
        source: "iana"
      },
      "application/vnd.syncml.dmddf+wbxml": {
        source: "iana"
      },
      "application/vnd.syncml.dmddf+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["ddf"]
      },
      "application/vnd.syncml.dmtnds+wbxml": {
        source: "iana"
      },
      "application/vnd.syncml.dmtnds+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.syncml.ds.notification": {
        source: "iana"
      },
      "application/vnd.tableschema+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tao.intent-module-archive": {
        source: "iana",
        extensions: ["tao"]
      },
      "application/vnd.tcpdump.pcap": {
        source: "iana",
        extensions: ["pcap", "cap", "dmp"]
      },
      "application/vnd.think-cell.ppttc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tmd.mediaflex.api+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tml": {
        source: "iana"
      },
      "application/vnd.tmobile-livetv": {
        source: "iana",
        extensions: ["tmo"]
      },
      "application/vnd.tri.onesource": {
        source: "iana"
      },
      "application/vnd.trid.tpt": {
        source: "iana",
        extensions: ["tpt"]
      },
      "application/vnd.triscape.mxs": {
        source: "iana",
        extensions: ["mxs"]
      },
      "application/vnd.trueapp": {
        source: "iana",
        extensions: ["tra"]
      },
      "application/vnd.truedoc": {
        source: "iana"
      },
      "application/vnd.ubisoft.webplayer": {
        source: "iana"
      },
      "application/vnd.ufdl": {
        source: "iana",
        extensions: ["ufd", "ufdl"]
      },
      "application/vnd.uiq.theme": {
        source: "iana",
        extensions: ["utz"]
      },
      "application/vnd.umajin": {
        source: "iana",
        extensions: ["umj"]
      },
      "application/vnd.unity": {
        source: "iana",
        extensions: ["unityweb"]
      },
      "application/vnd.uoml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["uoml"]
      },
      "application/vnd.uplanet.alert": {
        source: "iana"
      },
      "application/vnd.uplanet.alert-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.bearer-choice": {
        source: "iana"
      },
      "application/vnd.uplanet.bearer-choice-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.cacheop": {
        source: "iana"
      },
      "application/vnd.uplanet.cacheop-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.channel": {
        source: "iana"
      },
      "application/vnd.uplanet.channel-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.list": {
        source: "iana"
      },
      "application/vnd.uplanet.list-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.listcmd": {
        source: "iana"
      },
      "application/vnd.uplanet.listcmd-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.signal": {
        source: "iana"
      },
      "application/vnd.uri-map": {
        source: "iana"
      },
      "application/vnd.valve.source.material": {
        source: "iana"
      },
      "application/vnd.vcx": {
        source: "iana",
        extensions: ["vcx"]
      },
      "application/vnd.vd-study": {
        source: "iana"
      },
      "application/vnd.vectorworks": {
        source: "iana"
      },
      "application/vnd.vel+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.verimatrix.vcas": {
        source: "iana"
      },
      "application/vnd.veritone.aion+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.veryant.thin": {
        source: "iana"
      },
      "application/vnd.ves.encrypted": {
        source: "iana"
      },
      "application/vnd.vidsoft.vidconference": {
        source: "iana"
      },
      "application/vnd.visio": {
        source: "iana",
        extensions: ["vsd", "vst", "vss", "vsw"]
      },
      "application/vnd.visionary": {
        source: "iana",
        extensions: ["vis"]
      },
      "application/vnd.vividence.scriptfile": {
        source: "iana"
      },
      "application/vnd.vsf": {
        source: "iana",
        extensions: ["vsf"]
      },
      "application/vnd.wap.sic": {
        source: "iana"
      },
      "application/vnd.wap.slc": {
        source: "iana"
      },
      "application/vnd.wap.wbxml": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["wbxml"]
      },
      "application/vnd.wap.wmlc": {
        source: "iana",
        extensions: ["wmlc"]
      },
      "application/vnd.wap.wmlscriptc": {
        source: "iana",
        extensions: ["wmlsc"]
      },
      "application/vnd.webturbo": {
        source: "iana",
        extensions: ["wtb"]
      },
      "application/vnd.wfa.dpp": {
        source: "iana"
      },
      "application/vnd.wfa.p2p": {
        source: "iana"
      },
      "application/vnd.wfa.wsc": {
        source: "iana"
      },
      "application/vnd.windows.devicepairing": {
        source: "iana"
      },
      "application/vnd.wmc": {
        source: "iana"
      },
      "application/vnd.wmf.bootstrap": {
        source: "iana"
      },
      "application/vnd.wolfram.mathematica": {
        source: "iana"
      },
      "application/vnd.wolfram.mathematica.package": {
        source: "iana"
      },
      "application/vnd.wolfram.player": {
        source: "iana",
        extensions: ["nbp"]
      },
      "application/vnd.wordperfect": {
        source: "iana",
        extensions: ["wpd"]
      },
      "application/vnd.wqd": {
        source: "iana",
        extensions: ["wqd"]
      },
      "application/vnd.wrq-hp3000-labelled": {
        source: "iana"
      },
      "application/vnd.wt.stf": {
        source: "iana",
        extensions: ["stf"]
      },
      "application/vnd.wv.csp+wbxml": {
        source: "iana"
      },
      "application/vnd.wv.csp+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.wv.ssp+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xacml+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xara": {
        source: "iana",
        extensions: ["xar"]
      },
      "application/vnd.xfdl": {
        source: "iana",
        extensions: ["xfdl"]
      },
      "application/vnd.xfdl.webform": {
        source: "iana"
      },
      "application/vnd.xmi+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xmpie.cpkg": {
        source: "iana"
      },
      "application/vnd.xmpie.dpkg": {
        source: "iana"
      },
      "application/vnd.xmpie.plan": {
        source: "iana"
      },
      "application/vnd.xmpie.ppkg": {
        source: "iana"
      },
      "application/vnd.xmpie.xlim": {
        source: "iana"
      },
      "application/vnd.yamaha.hv-dic": {
        source: "iana",
        extensions: ["hvd"]
      },
      "application/vnd.yamaha.hv-script": {
        source: "iana",
        extensions: ["hvs"]
      },
      "application/vnd.yamaha.hv-voice": {
        source: "iana",
        extensions: ["hvp"]
      },
      "application/vnd.yamaha.openscoreformat": {
        source: "iana",
        extensions: ["osf"]
      },
      "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
        source: "iana",
        compressible: true,
        extensions: ["osfpvg"]
      },
      "application/vnd.yamaha.remote-setup": {
        source: "iana"
      },
      "application/vnd.yamaha.smaf-audio": {
        source: "iana",
        extensions: ["saf"]
      },
      "application/vnd.yamaha.smaf-phrase": {
        source: "iana",
        extensions: ["spf"]
      },
      "application/vnd.yamaha.through-ngn": {
        source: "iana"
      },
      "application/vnd.yamaha.tunnel-udpencap": {
        source: "iana"
      },
      "application/vnd.yaoweme": {
        source: "iana"
      },
      "application/vnd.yellowriver-custom-menu": {
        source: "iana",
        extensions: ["cmp"]
      },
      "application/vnd.youtube.yt": {
        source: "iana"
      },
      "application/vnd.zul": {
        source: "iana",
        extensions: ["zir", "zirz"]
      },
      "application/vnd.zzazz.deck+xml": {
        source: "iana",
        compressible: true,
        extensions: ["zaz"]
      },
      "application/voicexml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["vxml"]
      },
      "application/voucher-cms+json": {
        source: "iana",
        compressible: true
      },
      "application/vq-rtcpxr": {
        source: "iana"
      },
      "application/wasm": {
        source: "iana",
        compressible: true,
        extensions: ["wasm"]
      },
      "application/watcherinfo+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wif"]
      },
      "application/webpush-options+json": {
        source: "iana",
        compressible: true
      },
      "application/whoispp-query": {
        source: "iana"
      },
      "application/whoispp-response": {
        source: "iana"
      },
      "application/widget": {
        source: "iana",
        extensions: ["wgt"]
      },
      "application/winhlp": {
        source: "apache",
        extensions: ["hlp"]
      },
      "application/wita": {
        source: "iana"
      },
      "application/wordperfect5.1": {
        source: "iana"
      },
      "application/wsdl+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wsdl"]
      },
      "application/wspolicy+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wspolicy"]
      },
      "application/x-7z-compressed": {
        source: "apache",
        compressible: false,
        extensions: ["7z"]
      },
      "application/x-abiword": {
        source: "apache",
        extensions: ["abw"]
      },
      "application/x-ace-compressed": {
        source: "apache",
        extensions: ["ace"]
      },
      "application/x-amf": {
        source: "apache"
      },
      "application/x-apple-diskimage": {
        source: "apache",
        extensions: ["dmg"]
      },
      "application/x-arj": {
        compressible: false,
        extensions: ["arj"]
      },
      "application/x-authorware-bin": {
        source: "apache",
        extensions: ["aab", "x32", "u32", "vox"]
      },
      "application/x-authorware-map": {
        source: "apache",
        extensions: ["aam"]
      },
      "application/x-authorware-seg": {
        source: "apache",
        extensions: ["aas"]
      },
      "application/x-bcpio": {
        source: "apache",
        extensions: ["bcpio"]
      },
      "application/x-bdoc": {
        compressible: false,
        extensions: ["bdoc"]
      },
      "application/x-bittorrent": {
        source: "apache",
        extensions: ["torrent"]
      },
      "application/x-blorb": {
        source: "apache",
        extensions: ["blb", "blorb"]
      },
      "application/x-bzip": {
        source: "apache",
        compressible: false,
        extensions: ["bz"]
      },
      "application/x-bzip2": {
        source: "apache",
        compressible: false,
        extensions: ["bz2", "boz"]
      },
      "application/x-cbr": {
        source: "apache",
        extensions: ["cbr", "cba", "cbt", "cbz", "cb7"]
      },
      "application/x-cdlink": {
        source: "apache",
        extensions: ["vcd"]
      },
      "application/x-cfs-compressed": {
        source: "apache",
        extensions: ["cfs"]
      },
      "application/x-chat": {
        source: "apache",
        extensions: ["chat"]
      },
      "application/x-chess-pgn": {
        source: "apache",
        extensions: ["pgn"]
      },
      "application/x-chrome-extension": {
        extensions: ["crx"]
      },
      "application/x-cocoa": {
        source: "nginx",
        extensions: ["cco"]
      },
      "application/x-compress": {
        source: "apache"
      },
      "application/x-conference": {
        source: "apache",
        extensions: ["nsc"]
      },
      "application/x-cpio": {
        source: "apache",
        extensions: ["cpio"]
      },
      "application/x-csh": {
        source: "apache",
        extensions: ["csh"]
      },
      "application/x-deb": {
        compressible: false
      },
      "application/x-debian-package": {
        source: "apache",
        extensions: ["deb", "udeb"]
      },
      "application/x-dgc-compressed": {
        source: "apache",
        extensions: ["dgc"]
      },
      "application/x-director": {
        source: "apache",
        extensions: ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"]
      },
      "application/x-doom": {
        source: "apache",
        extensions: ["wad"]
      },
      "application/x-dtbncx+xml": {
        source: "apache",
        compressible: true,
        extensions: ["ncx"]
      },
      "application/x-dtbook+xml": {
        source: "apache",
        compressible: true,
        extensions: ["dtb"]
      },
      "application/x-dtbresource+xml": {
        source: "apache",
        compressible: true,
        extensions: ["res"]
      },
      "application/x-dvi": {
        source: "apache",
        compressible: false,
        extensions: ["dvi"]
      },
      "application/x-envoy": {
        source: "apache",
        extensions: ["evy"]
      },
      "application/x-eva": {
        source: "apache",
        extensions: ["eva"]
      },
      "application/x-font-bdf": {
        source: "apache",
        extensions: ["bdf"]
      },
      "application/x-font-dos": {
        source: "apache"
      },
      "application/x-font-framemaker": {
        source: "apache"
      },
      "application/x-font-ghostscript": {
        source: "apache",
        extensions: ["gsf"]
      },
      "application/x-font-libgrx": {
        source: "apache"
      },
      "application/x-font-linux-psf": {
        source: "apache",
        extensions: ["psf"]
      },
      "application/x-font-pcf": {
        source: "apache",
        extensions: ["pcf"]
      },
      "application/x-font-snf": {
        source: "apache",
        extensions: ["snf"]
      },
      "application/x-font-speedo": {
        source: "apache"
      },
      "application/x-font-sunos-news": {
        source: "apache"
      },
      "application/x-font-type1": {
        source: "apache",
        extensions: ["pfa", "pfb", "pfm", "afm"]
      },
      "application/x-font-vfont": {
        source: "apache"
      },
      "application/x-freearc": {
        source: "apache",
        extensions: ["arc"]
      },
      "application/x-futuresplash": {
        source: "apache",
        extensions: ["spl"]
      },
      "application/x-gca-compressed": {
        source: "apache",
        extensions: ["gca"]
      },
      "application/x-glulx": {
        source: "apache",
        extensions: ["ulx"]
      },
      "application/x-gnumeric": {
        source: "apache",
        extensions: ["gnumeric"]
      },
      "application/x-gramps-xml": {
        source: "apache",
        extensions: ["gramps"]
      },
      "application/x-gtar": {
        source: "apache",
        extensions: ["gtar"]
      },
      "application/x-gzip": {
        source: "apache"
      },
      "application/x-hdf": {
        source: "apache",
        extensions: ["hdf"]
      },
      "application/x-httpd-php": {
        compressible: true,
        extensions: ["php"]
      },
      "application/x-install-instructions": {
        source: "apache",
        extensions: ["install"]
      },
      "application/x-iso9660-image": {
        source: "apache",
        extensions: ["iso"]
      },
      "application/x-iwork-keynote-sffkey": {
        extensions: ["key"]
      },
      "application/x-iwork-numbers-sffnumbers": {
        extensions: ["numbers"]
      },
      "application/x-iwork-pages-sffpages": {
        extensions: ["pages"]
      },
      "application/x-java-archive-diff": {
        source: "nginx",
        extensions: ["jardiff"]
      },
      "application/x-java-jnlp-file": {
        source: "apache",
        compressible: false,
        extensions: ["jnlp"]
      },
      "application/x-javascript": {
        compressible: true
      },
      "application/x-keepass2": {
        extensions: ["kdbx"]
      },
      "application/x-latex": {
        source: "apache",
        compressible: false,
        extensions: ["latex"]
      },
      "application/x-lua-bytecode": {
        extensions: ["luac"]
      },
      "application/x-lzh-compressed": {
        source: "apache",
        extensions: ["lzh", "lha"]
      },
      "application/x-makeself": {
        source: "nginx",
        extensions: ["run"]
      },
      "application/x-mie": {
        source: "apache",
        extensions: ["mie"]
      },
      "application/x-mobipocket-ebook": {
        source: "apache",
        extensions: ["prc", "mobi"]
      },
      "application/x-mpegurl": {
        compressible: false
      },
      "application/x-ms-application": {
        source: "apache",
        extensions: ["application"]
      },
      "application/x-ms-shortcut": {
        source: "apache",
        extensions: ["lnk"]
      },
      "application/x-ms-wmd": {
        source: "apache",
        extensions: ["wmd"]
      },
      "application/x-ms-wmz": {
        source: "apache",
        extensions: ["wmz"]
      },
      "application/x-ms-xbap": {
        source: "apache",
        extensions: ["xbap"]
      },
      "application/x-msaccess": {
        source: "apache",
        extensions: ["mdb"]
      },
      "application/x-msbinder": {
        source: "apache",
        extensions: ["obd"]
      },
      "application/x-mscardfile": {
        source: "apache",
        extensions: ["crd"]
      },
      "application/x-msclip": {
        source: "apache",
        extensions: ["clp"]
      },
      "application/x-msdos-program": {
        extensions: ["exe"]
      },
      "application/x-msdownload": {
        source: "apache",
        extensions: ["exe", "dll", "com", "bat", "msi"]
      },
      "application/x-msmediaview": {
        source: "apache",
        extensions: ["mvb", "m13", "m14"]
      },
      "application/x-msmetafile": {
        source: "apache",
        extensions: ["wmf", "wmz", "emf", "emz"]
      },
      "application/x-msmoney": {
        source: "apache",
        extensions: ["mny"]
      },
      "application/x-mspublisher": {
        source: "apache",
        extensions: ["pub"]
      },
      "application/x-msschedule": {
        source: "apache",
        extensions: ["scd"]
      },
      "application/x-msterminal": {
        source: "apache",
        extensions: ["trm"]
      },
      "application/x-mswrite": {
        source: "apache",
        extensions: ["wri"]
      },
      "application/x-netcdf": {
        source: "apache",
        extensions: ["nc", "cdf"]
      },
      "application/x-ns-proxy-autoconfig": {
        compressible: true,
        extensions: ["pac"]
      },
      "application/x-nzb": {
        source: "apache",
        extensions: ["nzb"]
      },
      "application/x-perl": {
        source: "nginx",
        extensions: ["pl", "pm"]
      },
      "application/x-pilot": {
        source: "nginx",
        extensions: ["prc", "pdb"]
      },
      "application/x-pkcs12": {
        source: "apache",
        compressible: false,
        extensions: ["p12", "pfx"]
      },
      "application/x-pkcs7-certificates": {
        source: "apache",
        extensions: ["p7b", "spc"]
      },
      "application/x-pkcs7-certreqresp": {
        source: "apache",
        extensions: ["p7r"]
      },
      "application/x-pki-message": {
        source: "iana"
      },
      "application/x-rar-compressed": {
        source: "apache",
        compressible: false,
        extensions: ["rar"]
      },
      "application/x-redhat-package-manager": {
        source: "nginx",
        extensions: ["rpm"]
      },
      "application/x-research-info-systems": {
        source: "apache",
        extensions: ["ris"]
      },
      "application/x-sea": {
        source: "nginx",
        extensions: ["sea"]
      },
      "application/x-sh": {
        source: "apache",
        compressible: true,
        extensions: ["sh"]
      },
      "application/x-shar": {
        source: "apache",
        extensions: ["shar"]
      },
      "application/x-shockwave-flash": {
        source: "apache",
        compressible: false,
        extensions: ["swf"]
      },
      "application/x-silverlight-app": {
        source: "apache",
        extensions: ["xap"]
      },
      "application/x-sql": {
        source: "apache",
        extensions: ["sql"]
      },
      "application/x-stuffit": {
        source: "apache",
        compressible: false,
        extensions: ["sit"]
      },
      "application/x-stuffitx": {
        source: "apache",
        extensions: ["sitx"]
      },
      "application/x-subrip": {
        source: "apache",
        extensions: ["srt"]
      },
      "application/x-sv4cpio": {
        source: "apache",
        extensions: ["sv4cpio"]
      },
      "application/x-sv4crc": {
        source: "apache",
        extensions: ["sv4crc"]
      },
      "application/x-t3vm-image": {
        source: "apache",
        extensions: ["t3"]
      },
      "application/x-tads": {
        source: "apache",
        extensions: ["gam"]
      },
      "application/x-tar": {
        source: "apache",
        compressible: true,
        extensions: ["tar"]
      },
      "application/x-tcl": {
        source: "apache",
        extensions: ["tcl", "tk"]
      },
      "application/x-tex": {
        source: "apache",
        extensions: ["tex"]
      },
      "application/x-tex-tfm": {
        source: "apache",
        extensions: ["tfm"]
      },
      "application/x-texinfo": {
        source: "apache",
        extensions: ["texinfo", "texi"]
      },
      "application/x-tgif": {
        source: "apache",
        extensions: ["obj"]
      },
      "application/x-ustar": {
        source: "apache",
        extensions: ["ustar"]
      },
      "application/x-virtualbox-hdd": {
        compressible: true,
        extensions: ["hdd"]
      },
      "application/x-virtualbox-ova": {
        compressible: true,
        extensions: ["ova"]
      },
      "application/x-virtualbox-ovf": {
        compressible: true,
        extensions: ["ovf"]
      },
      "application/x-virtualbox-vbox": {
        compressible: true,
        extensions: ["vbox"]
      },
      "application/x-virtualbox-vbox-extpack": {
        compressible: false,
        extensions: ["vbox-extpack"]
      },
      "application/x-virtualbox-vdi": {
        compressible: true,
        extensions: ["vdi"]
      },
      "application/x-virtualbox-vhd": {
        compressible: true,
        extensions: ["vhd"]
      },
      "application/x-virtualbox-vmdk": {
        compressible: true,
        extensions: ["vmdk"]
      },
      "application/x-wais-source": {
        source: "apache",
        extensions: ["src"]
      },
      "application/x-web-app-manifest+json": {
        compressible: true,
        extensions: ["webapp"]
      },
      "application/x-www-form-urlencoded": {
        source: "iana",
        compressible: true
      },
      "application/x-x509-ca-cert": {
        source: "iana",
        extensions: ["der", "crt", "pem"]
      },
      "application/x-x509-ca-ra-cert": {
        source: "iana"
      },
      "application/x-x509-next-ca-cert": {
        source: "iana"
      },
      "application/x-xfig": {
        source: "apache",
        extensions: ["fig"]
      },
      "application/x-xliff+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xlf"]
      },
      "application/x-xpinstall": {
        source: "apache",
        compressible: false,
        extensions: ["xpi"]
      },
      "application/x-xz": {
        source: "apache",
        extensions: ["xz"]
      },
      "application/x-zmachine": {
        source: "apache",
        extensions: ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"]
      },
      "application/x400-bp": {
        source: "iana"
      },
      "application/xacml+xml": {
        source: "iana",
        compressible: true
      },
      "application/xaml+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xaml"]
      },
      "application/xcap-att+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xav"]
      },
      "application/xcap-caps+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xca"]
      },
      "application/xcap-diff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdf"]
      },
      "application/xcap-el+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xel"]
      },
      "application/xcap-error+xml": {
        source: "iana",
        compressible: true
      },
      "application/xcap-ns+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xns"]
      },
      "application/xcon-conference-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/xcon-conference-info-diff+xml": {
        source: "iana",
        compressible: true
      },
      "application/xenc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xenc"]
      },
      "application/xhtml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xhtml", "xht"]
      },
      "application/xhtml-voice+xml": {
        source: "apache",
        compressible: true
      },
      "application/xliff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xlf"]
      },
      "application/xml": {
        source: "iana",
        compressible: true,
        extensions: ["xml", "xsl", "xsd", "rng"]
      },
      "application/xml-dtd": {
        source: "iana",
        compressible: true,
        extensions: ["dtd"]
      },
      "application/xml-external-parsed-entity": {
        source: "iana"
      },
      "application/xml-patch+xml": {
        source: "iana",
        compressible: true
      },
      "application/xmpp+xml": {
        source: "iana",
        compressible: true
      },
      "application/xop+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xop"]
      },
      "application/xproc+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xpl"]
      },
      "application/xslt+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xsl", "xslt"]
      },
      "application/xspf+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xspf"]
      },
      "application/xv+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mxml", "xhvml", "xvml", "xvm"]
      },
      "application/yang": {
        source: "iana",
        extensions: ["yang"]
      },
      "application/yang-data+json": {
        source: "iana",
        compressible: true
      },
      "application/yang-data+xml": {
        source: "iana",
        compressible: true
      },
      "application/yang-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/yang-patch+xml": {
        source: "iana",
        compressible: true
      },
      "application/yin+xml": {
        source: "iana",
        compressible: true,
        extensions: ["yin"]
      },
      "application/zip": {
        source: "iana",
        compressible: false,
        extensions: ["zip"]
      },
      "application/zlib": {
        source: "iana"
      },
      "application/zstd": {
        source: "iana"
      },
      "audio/1d-interleaved-parityfec": {
        source: "iana"
      },
      "audio/32kadpcm": {
        source: "iana"
      },
      "audio/3gpp": {
        source: "iana",
        compressible: false,
        extensions: ["3gpp"]
      },
      "audio/3gpp2": {
        source: "iana"
      },
      "audio/aac": {
        source: "iana"
      },
      "audio/ac3": {
        source: "iana"
      },
      "audio/adpcm": {
        source: "apache",
        extensions: ["adp"]
      },
      "audio/amr": {
        source: "iana",
        extensions: ["amr"]
      },
      "audio/amr-wb": {
        source: "iana"
      },
      "audio/amr-wb+": {
        source: "iana"
      },
      "audio/aptx": {
        source: "iana"
      },
      "audio/asc": {
        source: "iana"
      },
      "audio/atrac-advanced-lossless": {
        source: "iana"
      },
      "audio/atrac-x": {
        source: "iana"
      },
      "audio/atrac3": {
        source: "iana"
      },
      "audio/basic": {
        source: "iana",
        compressible: false,
        extensions: ["au", "snd"]
      },
      "audio/bv16": {
        source: "iana"
      },
      "audio/bv32": {
        source: "iana"
      },
      "audio/clearmode": {
        source: "iana"
      },
      "audio/cn": {
        source: "iana"
      },
      "audio/dat12": {
        source: "iana"
      },
      "audio/dls": {
        source: "iana"
      },
      "audio/dsr-es201108": {
        source: "iana"
      },
      "audio/dsr-es202050": {
        source: "iana"
      },
      "audio/dsr-es202211": {
        source: "iana"
      },
      "audio/dsr-es202212": {
        source: "iana"
      },
      "audio/dv": {
        source: "iana"
      },
      "audio/dvi4": {
        source: "iana"
      },
      "audio/eac3": {
        source: "iana"
      },
      "audio/encaprtp": {
        source: "iana"
      },
      "audio/evrc": {
        source: "iana"
      },
      "audio/evrc-qcp": {
        source: "iana"
      },
      "audio/evrc0": {
        source: "iana"
      },
      "audio/evrc1": {
        source: "iana"
      },
      "audio/evrcb": {
        source: "iana"
      },
      "audio/evrcb0": {
        source: "iana"
      },
      "audio/evrcb1": {
        source: "iana"
      },
      "audio/evrcnw": {
        source: "iana"
      },
      "audio/evrcnw0": {
        source: "iana"
      },
      "audio/evrcnw1": {
        source: "iana"
      },
      "audio/evrcwb": {
        source: "iana"
      },
      "audio/evrcwb0": {
        source: "iana"
      },
      "audio/evrcwb1": {
        source: "iana"
      },
      "audio/evs": {
        source: "iana"
      },
      "audio/flexfec": {
        source: "iana"
      },
      "audio/fwdred": {
        source: "iana"
      },
      "audio/g711-0": {
        source: "iana"
      },
      "audio/g719": {
        source: "iana"
      },
      "audio/g722": {
        source: "iana"
      },
      "audio/g7221": {
        source: "iana"
      },
      "audio/g723": {
        source: "iana"
      },
      "audio/g726-16": {
        source: "iana"
      },
      "audio/g726-24": {
        source: "iana"
      },
      "audio/g726-32": {
        source: "iana"
      },
      "audio/g726-40": {
        source: "iana"
      },
      "audio/g728": {
        source: "iana"
      },
      "audio/g729": {
        source: "iana"
      },
      "audio/g7291": {
        source: "iana"
      },
      "audio/g729d": {
        source: "iana"
      },
      "audio/g729e": {
        source: "iana"
      },
      "audio/gsm": {
        source: "iana"
      },
      "audio/gsm-efr": {
        source: "iana"
      },
      "audio/gsm-hr-08": {
        source: "iana"
      },
      "audio/ilbc": {
        source: "iana"
      },
      "audio/ip-mr_v2.5": {
        source: "iana"
      },
      "audio/isac": {
        source: "apache"
      },
      "audio/l16": {
        source: "iana"
      },
      "audio/l20": {
        source: "iana"
      },
      "audio/l24": {
        source: "iana",
        compressible: false
      },
      "audio/l8": {
        source: "iana"
      },
      "audio/lpc": {
        source: "iana"
      },
      "audio/melp": {
        source: "iana"
      },
      "audio/melp1200": {
        source: "iana"
      },
      "audio/melp2400": {
        source: "iana"
      },
      "audio/melp600": {
        source: "iana"
      },
      "audio/mhas": {
        source: "iana"
      },
      "audio/midi": {
        source: "apache",
        extensions: ["mid", "midi", "kar", "rmi"]
      },
      "audio/mobile-xmf": {
        source: "iana",
        extensions: ["mxmf"]
      },
      "audio/mp3": {
        compressible: false,
        extensions: ["mp3"]
      },
      "audio/mp4": {
        source: "iana",
        compressible: false,
        extensions: ["m4a", "mp4a"]
      },
      "audio/mp4a-latm": {
        source: "iana"
      },
      "audio/mpa": {
        source: "iana"
      },
      "audio/mpa-robust": {
        source: "iana"
      },
      "audio/mpeg": {
        source: "iana",
        compressible: false,
        extensions: ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"]
      },
      "audio/mpeg4-generic": {
        source: "iana"
      },
      "audio/musepack": {
        source: "apache"
      },
      "audio/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["oga", "ogg", "spx", "opus"]
      },
      "audio/opus": {
        source: "iana"
      },
      "audio/parityfec": {
        source: "iana"
      },
      "audio/pcma": {
        source: "iana"
      },
      "audio/pcma-wb": {
        source: "iana"
      },
      "audio/pcmu": {
        source: "iana"
      },
      "audio/pcmu-wb": {
        source: "iana"
      },
      "audio/prs.sid": {
        source: "iana"
      },
      "audio/qcelp": {
        source: "iana"
      },
      "audio/raptorfec": {
        source: "iana"
      },
      "audio/red": {
        source: "iana"
      },
      "audio/rtp-enc-aescm128": {
        source: "iana"
      },
      "audio/rtp-midi": {
        source: "iana"
      },
      "audio/rtploopback": {
        source: "iana"
      },
      "audio/rtx": {
        source: "iana"
      },
      "audio/s3m": {
        source: "apache",
        extensions: ["s3m"]
      },
      "audio/scip": {
        source: "iana"
      },
      "audio/silk": {
        source: "apache",
        extensions: ["sil"]
      },
      "audio/smv": {
        source: "iana"
      },
      "audio/smv-qcp": {
        source: "iana"
      },
      "audio/smv0": {
        source: "iana"
      },
      "audio/sofa": {
        source: "iana"
      },
      "audio/sp-midi": {
        source: "iana"
      },
      "audio/speex": {
        source: "iana"
      },
      "audio/t140c": {
        source: "iana"
      },
      "audio/t38": {
        source: "iana"
      },
      "audio/telephone-event": {
        source: "iana"
      },
      "audio/tetra_acelp": {
        source: "iana"
      },
      "audio/tetra_acelp_bb": {
        source: "iana"
      },
      "audio/tone": {
        source: "iana"
      },
      "audio/tsvcis": {
        source: "iana"
      },
      "audio/uemclip": {
        source: "iana"
      },
      "audio/ulpfec": {
        source: "iana"
      },
      "audio/usac": {
        source: "iana"
      },
      "audio/vdvi": {
        source: "iana"
      },
      "audio/vmr-wb": {
        source: "iana"
      },
      "audio/vnd.3gpp.iufp": {
        source: "iana"
      },
      "audio/vnd.4sb": {
        source: "iana"
      },
      "audio/vnd.audiokoz": {
        source: "iana"
      },
      "audio/vnd.celp": {
        source: "iana"
      },
      "audio/vnd.cisco.nse": {
        source: "iana"
      },
      "audio/vnd.cmles.radio-events": {
        source: "iana"
      },
      "audio/vnd.cns.anp1": {
        source: "iana"
      },
      "audio/vnd.cns.inf1": {
        source: "iana"
      },
      "audio/vnd.dece.audio": {
        source: "iana",
        extensions: ["uva", "uvva"]
      },
      "audio/vnd.digital-winds": {
        source: "iana",
        extensions: ["eol"]
      },
      "audio/vnd.dlna.adts": {
        source: "iana"
      },
      "audio/vnd.dolby.heaac.1": {
        source: "iana"
      },
      "audio/vnd.dolby.heaac.2": {
        source: "iana"
      },
      "audio/vnd.dolby.mlp": {
        source: "iana"
      },
      "audio/vnd.dolby.mps": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2x": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2z": {
        source: "iana"
      },
      "audio/vnd.dolby.pulse.1": {
        source: "iana"
      },
      "audio/vnd.dra": {
        source: "iana",
        extensions: ["dra"]
      },
      "audio/vnd.dts": {
        source: "iana",
        extensions: ["dts"]
      },
      "audio/vnd.dts.hd": {
        source: "iana",
        extensions: ["dtshd"]
      },
      "audio/vnd.dts.uhd": {
        source: "iana"
      },
      "audio/vnd.dvb.file": {
        source: "iana"
      },
      "audio/vnd.everad.plj": {
        source: "iana"
      },
      "audio/vnd.hns.audio": {
        source: "iana"
      },
      "audio/vnd.lucent.voice": {
        source: "iana",
        extensions: ["lvp"]
      },
      "audio/vnd.ms-playready.media.pya": {
        source: "iana",
        extensions: ["pya"]
      },
      "audio/vnd.nokia.mobile-xmf": {
        source: "iana"
      },
      "audio/vnd.nortel.vbk": {
        source: "iana"
      },
      "audio/vnd.nuera.ecelp4800": {
        source: "iana",
        extensions: ["ecelp4800"]
      },
      "audio/vnd.nuera.ecelp7470": {
        source: "iana",
        extensions: ["ecelp7470"]
      },
      "audio/vnd.nuera.ecelp9600": {
        source: "iana",
        extensions: ["ecelp9600"]
      },
      "audio/vnd.octel.sbc": {
        source: "iana"
      },
      "audio/vnd.presonus.multitrack": {
        source: "iana"
      },
      "audio/vnd.qcelp": {
        source: "iana"
      },
      "audio/vnd.rhetorex.32kadpcm": {
        source: "iana"
      },
      "audio/vnd.rip": {
        source: "iana",
        extensions: ["rip"]
      },
      "audio/vnd.rn-realaudio": {
        compressible: false
      },
      "audio/vnd.sealedmedia.softseal.mpeg": {
        source: "iana"
      },
      "audio/vnd.vmx.cvsd": {
        source: "iana"
      },
      "audio/vnd.wave": {
        compressible: false
      },
      "audio/vorbis": {
        source: "iana",
        compressible: false
      },
      "audio/vorbis-config": {
        source: "iana"
      },
      "audio/wav": {
        compressible: false,
        extensions: ["wav"]
      },
      "audio/wave": {
        compressible: false,
        extensions: ["wav"]
      },
      "audio/webm": {
        source: "apache",
        compressible: false,
        extensions: ["weba"]
      },
      "audio/x-aac": {
        source: "apache",
        compressible: false,
        extensions: ["aac"]
      },
      "audio/x-aiff": {
        source: "apache",
        extensions: ["aif", "aiff", "aifc"]
      },
      "audio/x-caf": {
        source: "apache",
        compressible: false,
        extensions: ["caf"]
      },
      "audio/x-flac": {
        source: "apache",
        extensions: ["flac"]
      },
      "audio/x-m4a": {
        source: "nginx",
        extensions: ["m4a"]
      },
      "audio/x-matroska": {
        source: "apache",
        extensions: ["mka"]
      },
      "audio/x-mpegurl": {
        source: "apache",
        extensions: ["m3u"]
      },
      "audio/x-ms-wax": {
        source: "apache",
        extensions: ["wax"]
      },
      "audio/x-ms-wma": {
        source: "apache",
        extensions: ["wma"]
      },
      "audio/x-pn-realaudio": {
        source: "apache",
        extensions: ["ram", "ra"]
      },
      "audio/x-pn-realaudio-plugin": {
        source: "apache",
        extensions: ["rmp"]
      },
      "audio/x-realaudio": {
        source: "nginx",
        extensions: ["ra"]
      },
      "audio/x-tta": {
        source: "apache"
      },
      "audio/x-wav": {
        source: "apache",
        extensions: ["wav"]
      },
      "audio/xm": {
        source: "apache",
        extensions: ["xm"]
      },
      "chemical/x-cdx": {
        source: "apache",
        extensions: ["cdx"]
      },
      "chemical/x-cif": {
        source: "apache",
        extensions: ["cif"]
      },
      "chemical/x-cmdf": {
        source: "apache",
        extensions: ["cmdf"]
      },
      "chemical/x-cml": {
        source: "apache",
        extensions: ["cml"]
      },
      "chemical/x-csml": {
        source: "apache",
        extensions: ["csml"]
      },
      "chemical/x-pdb": {
        source: "apache"
      },
      "chemical/x-xyz": {
        source: "apache",
        extensions: ["xyz"]
      },
      "font/collection": {
        source: "iana",
        extensions: ["ttc"]
      },
      "font/otf": {
        source: "iana",
        compressible: true,
        extensions: ["otf"]
      },
      "font/sfnt": {
        source: "iana"
      },
      "font/ttf": {
        source: "iana",
        compressible: true,
        extensions: ["ttf"]
      },
      "font/woff": {
        source: "iana",
        extensions: ["woff"]
      },
      "font/woff2": {
        source: "iana",
        extensions: ["woff2"]
      },
      "image/aces": {
        source: "iana",
        extensions: ["exr"]
      },
      "image/apng": {
        compressible: false,
        extensions: ["apng"]
      },
      "image/avci": {
        source: "iana",
        extensions: ["avci"]
      },
      "image/avcs": {
        source: "iana",
        extensions: ["avcs"]
      },
      "image/avif": {
        source: "iana",
        compressible: false,
        extensions: ["avif"]
      },
      "image/bmp": {
        source: "iana",
        compressible: true,
        extensions: ["bmp"]
      },
      "image/cgm": {
        source: "iana",
        extensions: ["cgm"]
      },
      "image/dicom-rle": {
        source: "iana",
        extensions: ["drle"]
      },
      "image/emf": {
        source: "iana",
        extensions: ["emf"]
      },
      "image/fits": {
        source: "iana",
        extensions: ["fits"]
      },
      "image/g3fax": {
        source: "iana",
        extensions: ["g3"]
      },
      "image/gif": {
        source: "iana",
        compressible: false,
        extensions: ["gif"]
      },
      "image/heic": {
        source: "iana",
        extensions: ["heic"]
      },
      "image/heic-sequence": {
        source: "iana",
        extensions: ["heics"]
      },
      "image/heif": {
        source: "iana",
        extensions: ["heif"]
      },
      "image/heif-sequence": {
        source: "iana",
        extensions: ["heifs"]
      },
      "image/hej2k": {
        source: "iana",
        extensions: ["hej2"]
      },
      "image/hsj2": {
        source: "iana",
        extensions: ["hsj2"]
      },
      "image/ief": {
        source: "iana",
        extensions: ["ief"]
      },
      "image/jls": {
        source: "iana",
        extensions: ["jls"]
      },
      "image/jp2": {
        source: "iana",
        compressible: false,
        extensions: ["jp2", "jpg2"]
      },
      "image/jpeg": {
        source: "iana",
        compressible: false,
        extensions: ["jpeg", "jpg", "jpe"]
      },
      "image/jph": {
        source: "iana",
        extensions: ["jph"]
      },
      "image/jphc": {
        source: "iana",
        extensions: ["jhc"]
      },
      "image/jpm": {
        source: "iana",
        compressible: false,
        extensions: ["jpm"]
      },
      "image/jpx": {
        source: "iana",
        compressible: false,
        extensions: ["jpx", "jpf"]
      },
      "image/jxr": {
        source: "iana",
        extensions: ["jxr"]
      },
      "image/jxra": {
        source: "iana",
        extensions: ["jxra"]
      },
      "image/jxrs": {
        source: "iana",
        extensions: ["jxrs"]
      },
      "image/jxs": {
        source: "iana",
        extensions: ["jxs"]
      },
      "image/jxsc": {
        source: "iana",
        extensions: ["jxsc"]
      },
      "image/jxsi": {
        source: "iana",
        extensions: ["jxsi"]
      },
      "image/jxss": {
        source: "iana",
        extensions: ["jxss"]
      },
      "image/ktx": {
        source: "iana",
        extensions: ["ktx"]
      },
      "image/ktx2": {
        source: "iana",
        extensions: ["ktx2"]
      },
      "image/naplps": {
        source: "iana"
      },
      "image/pjpeg": {
        compressible: false
      },
      "image/png": {
        source: "iana",
        compressible: false,
        extensions: ["png"]
      },
      "image/prs.btif": {
        source: "iana",
        extensions: ["btif"]
      },
      "image/prs.pti": {
        source: "iana",
        extensions: ["pti"]
      },
      "image/pwg-raster": {
        source: "iana"
      },
      "image/sgi": {
        source: "apache",
        extensions: ["sgi"]
      },
      "image/svg+xml": {
        source: "iana",
        compressible: true,
        extensions: ["svg", "svgz"]
      },
      "image/t38": {
        source: "iana",
        extensions: ["t38"]
      },
      "image/tiff": {
        source: "iana",
        compressible: false,
        extensions: ["tif", "tiff"]
      },
      "image/tiff-fx": {
        source: "iana",
        extensions: ["tfx"]
      },
      "image/vnd.adobe.photoshop": {
        source: "iana",
        compressible: true,
        extensions: ["psd"]
      },
      "image/vnd.airzip.accelerator.azv": {
        source: "iana",
        extensions: ["azv"]
      },
      "image/vnd.cns.inf2": {
        source: "iana"
      },
      "image/vnd.dece.graphic": {
        source: "iana",
        extensions: ["uvi", "uvvi", "uvg", "uvvg"]
      },
      "image/vnd.djvu": {
        source: "iana",
        extensions: ["djvu", "djv"]
      },
      "image/vnd.dvb.subtitle": {
        source: "iana",
        extensions: ["sub"]
      },
      "image/vnd.dwg": {
        source: "iana",
        extensions: ["dwg"]
      },
      "image/vnd.dxf": {
        source: "iana",
        extensions: ["dxf"]
      },
      "image/vnd.fastbidsheet": {
        source: "iana",
        extensions: ["fbs"]
      },
      "image/vnd.fpx": {
        source: "iana",
        extensions: ["fpx"]
      },
      "image/vnd.fst": {
        source: "iana",
        extensions: ["fst"]
      },
      "image/vnd.fujixerox.edmics-mmr": {
        source: "iana",
        extensions: ["mmr"]
      },
      "image/vnd.fujixerox.edmics-rlc": {
        source: "iana",
        extensions: ["rlc"]
      },
      "image/vnd.globalgraphics.pgb": {
        source: "iana"
      },
      "image/vnd.microsoft.icon": {
        source: "iana",
        compressible: true,
        extensions: ["ico"]
      },
      "image/vnd.mix": {
        source: "iana"
      },
      "image/vnd.mozilla.apng": {
        source: "iana"
      },
      "image/vnd.ms-dds": {
        compressible: true,
        extensions: ["dds"]
      },
      "image/vnd.ms-modi": {
        source: "iana",
        extensions: ["mdi"]
      },
      "image/vnd.ms-photo": {
        source: "apache",
        extensions: ["wdp"]
      },
      "image/vnd.net-fpx": {
        source: "iana",
        extensions: ["npx"]
      },
      "image/vnd.pco.b16": {
        source: "iana",
        extensions: ["b16"]
      },
      "image/vnd.radiance": {
        source: "iana"
      },
      "image/vnd.sealed.png": {
        source: "iana"
      },
      "image/vnd.sealedmedia.softseal.gif": {
        source: "iana"
      },
      "image/vnd.sealedmedia.softseal.jpg": {
        source: "iana"
      },
      "image/vnd.svf": {
        source: "iana"
      },
      "image/vnd.tencent.tap": {
        source: "iana",
        extensions: ["tap"]
      },
      "image/vnd.valve.source.texture": {
        source: "iana",
        extensions: ["vtf"]
      },
      "image/vnd.wap.wbmp": {
        source: "iana",
        extensions: ["wbmp"]
      },
      "image/vnd.xiff": {
        source: "iana",
        extensions: ["xif"]
      },
      "image/vnd.zbrush.pcx": {
        source: "iana",
        extensions: ["pcx"]
      },
      "image/webp": {
        source: "apache",
        extensions: ["webp"]
      },
      "image/wmf": {
        source: "iana",
        extensions: ["wmf"]
      },
      "image/x-3ds": {
        source: "apache",
        extensions: ["3ds"]
      },
      "image/x-cmu-raster": {
        source: "apache",
        extensions: ["ras"]
      },
      "image/x-cmx": {
        source: "apache",
        extensions: ["cmx"]
      },
      "image/x-freehand": {
        source: "apache",
        extensions: ["fh", "fhc", "fh4", "fh5", "fh7"]
      },
      "image/x-icon": {
        source: "apache",
        compressible: true,
        extensions: ["ico"]
      },
      "image/x-jng": {
        source: "nginx",
        extensions: ["jng"]
      },
      "image/x-mrsid-image": {
        source: "apache",
        extensions: ["sid"]
      },
      "image/x-ms-bmp": {
        source: "nginx",
        compressible: true,
        extensions: ["bmp"]
      },
      "image/x-pcx": {
        source: "apache",
        extensions: ["pcx"]
      },
      "image/x-pict": {
        source: "apache",
        extensions: ["pic", "pct"]
      },
      "image/x-portable-anymap": {
        source: "apache",
        extensions: ["pnm"]
      },
      "image/x-portable-bitmap": {
        source: "apache",
        extensions: ["pbm"]
      },
      "image/x-portable-graymap": {
        source: "apache",
        extensions: ["pgm"]
      },
      "image/x-portable-pixmap": {
        source: "apache",
        extensions: ["ppm"]
      },
      "image/x-rgb": {
        source: "apache",
        extensions: ["rgb"]
      },
      "image/x-tga": {
        source: "apache",
        extensions: ["tga"]
      },
      "image/x-xbitmap": {
        source: "apache",
        extensions: ["xbm"]
      },
      "image/x-xcf": {
        compressible: false
      },
      "image/x-xpixmap": {
        source: "apache",
        extensions: ["xpm"]
      },
      "image/x-xwindowdump": {
        source: "apache",
        extensions: ["xwd"]
      },
      "message/cpim": {
        source: "iana"
      },
      "message/delivery-status": {
        source: "iana"
      },
      "message/disposition-notification": {
        source: "iana",
        extensions: [
          "disposition-notification"
        ]
      },
      "message/external-body": {
        source: "iana"
      },
      "message/feedback-report": {
        source: "iana"
      },
      "message/global": {
        source: "iana",
        extensions: ["u8msg"]
      },
      "message/global-delivery-status": {
        source: "iana",
        extensions: ["u8dsn"]
      },
      "message/global-disposition-notification": {
        source: "iana",
        extensions: ["u8mdn"]
      },
      "message/global-headers": {
        source: "iana",
        extensions: ["u8hdr"]
      },
      "message/http": {
        source: "iana",
        compressible: false
      },
      "message/imdn+xml": {
        source: "iana",
        compressible: true
      },
      "message/news": {
        source: "iana"
      },
      "message/partial": {
        source: "iana",
        compressible: false
      },
      "message/rfc822": {
        source: "iana",
        compressible: true,
        extensions: ["eml", "mime"]
      },
      "message/s-http": {
        source: "iana"
      },
      "message/sip": {
        source: "iana"
      },
      "message/sipfrag": {
        source: "iana"
      },
      "message/tracking-status": {
        source: "iana"
      },
      "message/vnd.si.simp": {
        source: "iana"
      },
      "message/vnd.wfa.wsc": {
        source: "iana",
        extensions: ["wsc"]
      },
      "model/3mf": {
        source: "iana",
        extensions: ["3mf"]
      },
      "model/e57": {
        source: "iana"
      },
      "model/gltf+json": {
        source: "iana",
        compressible: true,
        extensions: ["gltf"]
      },
      "model/gltf-binary": {
        source: "iana",
        compressible: true,
        extensions: ["glb"]
      },
      "model/iges": {
        source: "iana",
        compressible: false,
        extensions: ["igs", "iges"]
      },
      "model/mesh": {
        source: "iana",
        compressible: false,
        extensions: ["msh", "mesh", "silo"]
      },
      "model/mtl": {
        source: "iana",
        extensions: ["mtl"]
      },
      "model/obj": {
        source: "iana",
        extensions: ["obj"]
      },
      "model/step": {
        source: "iana"
      },
      "model/step+xml": {
        source: "iana",
        compressible: true,
        extensions: ["stpx"]
      },
      "model/step+zip": {
        source: "iana",
        compressible: false,
        extensions: ["stpz"]
      },
      "model/step-xml+zip": {
        source: "iana",
        compressible: false,
        extensions: ["stpxz"]
      },
      "model/stl": {
        source: "iana",
        extensions: ["stl"]
      },
      "model/vnd.collada+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dae"]
      },
      "model/vnd.dwf": {
        source: "iana",
        extensions: ["dwf"]
      },
      "model/vnd.flatland.3dml": {
        source: "iana"
      },
      "model/vnd.gdl": {
        source: "iana",
        extensions: ["gdl"]
      },
      "model/vnd.gs-gdl": {
        source: "apache"
      },
      "model/vnd.gs.gdl": {
        source: "iana"
      },
      "model/vnd.gtw": {
        source: "iana",
        extensions: ["gtw"]
      },
      "model/vnd.moml+xml": {
        source: "iana",
        compressible: true
      },
      "model/vnd.mts": {
        source: "iana",
        extensions: ["mts"]
      },
      "model/vnd.opengex": {
        source: "iana",
        extensions: ["ogex"]
      },
      "model/vnd.parasolid.transmit.binary": {
        source: "iana",
        extensions: ["x_b"]
      },
      "model/vnd.parasolid.transmit.text": {
        source: "iana",
        extensions: ["x_t"]
      },
      "model/vnd.pytha.pyox": {
        source: "iana"
      },
      "model/vnd.rosette.annotated-data-model": {
        source: "iana"
      },
      "model/vnd.sap.vds": {
        source: "iana",
        extensions: ["vds"]
      },
      "model/vnd.usdz+zip": {
        source: "iana",
        compressible: false,
        extensions: ["usdz"]
      },
      "model/vnd.valve.source.compiled-map": {
        source: "iana",
        extensions: ["bsp"]
      },
      "model/vnd.vtu": {
        source: "iana",
        extensions: ["vtu"]
      },
      "model/vrml": {
        source: "iana",
        compressible: false,
        extensions: ["wrl", "vrml"]
      },
      "model/x3d+binary": {
        source: "apache",
        compressible: false,
        extensions: ["x3db", "x3dbz"]
      },
      "model/x3d+fastinfoset": {
        source: "iana",
        extensions: ["x3db"]
      },
      "model/x3d+vrml": {
        source: "apache",
        compressible: false,
        extensions: ["x3dv", "x3dvz"]
      },
      "model/x3d+xml": {
        source: "iana",
        compressible: true,
        extensions: ["x3d", "x3dz"]
      },
      "model/x3d-vrml": {
        source: "iana",
        extensions: ["x3dv"]
      },
      "multipart/alternative": {
        source: "iana",
        compressible: false
      },
      "multipart/appledouble": {
        source: "iana"
      },
      "multipart/byteranges": {
        source: "iana"
      },
      "multipart/digest": {
        source: "iana"
      },
      "multipart/encrypted": {
        source: "iana",
        compressible: false
      },
      "multipart/form-data": {
        source: "iana",
        compressible: false
      },
      "multipart/header-set": {
        source: "iana"
      },
      "multipart/mixed": {
        source: "iana"
      },
      "multipart/multilingual": {
        source: "iana"
      },
      "multipart/parallel": {
        source: "iana"
      },
      "multipart/related": {
        source: "iana",
        compressible: false
      },
      "multipart/report": {
        source: "iana"
      },
      "multipart/signed": {
        source: "iana",
        compressible: false
      },
      "multipart/vnd.bint.med-plus": {
        source: "iana"
      },
      "multipart/voice-message": {
        source: "iana"
      },
      "multipart/x-mixed-replace": {
        source: "iana"
      },
      "text/1d-interleaved-parityfec": {
        source: "iana"
      },
      "text/cache-manifest": {
        source: "iana",
        compressible: true,
        extensions: ["appcache", "manifest"]
      },
      "text/calendar": {
        source: "iana",
        extensions: ["ics", "ifb"]
      },
      "text/calender": {
        compressible: true
      },
      "text/cmd": {
        compressible: true
      },
      "text/coffeescript": {
        extensions: ["coffee", "litcoffee"]
      },
      "text/cql": {
        source: "iana"
      },
      "text/cql-expression": {
        source: "iana"
      },
      "text/cql-identifier": {
        source: "iana"
      },
      "text/css": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["css"]
      },
      "text/csv": {
        source: "iana",
        compressible: true,
        extensions: ["csv"]
      },
      "text/csv-schema": {
        source: "iana"
      },
      "text/directory": {
        source: "iana"
      },
      "text/dns": {
        source: "iana"
      },
      "text/ecmascript": {
        source: "iana"
      },
      "text/encaprtp": {
        source: "iana"
      },
      "text/enriched": {
        source: "iana"
      },
      "text/fhirpath": {
        source: "iana"
      },
      "text/flexfec": {
        source: "iana"
      },
      "text/fwdred": {
        source: "iana"
      },
      "text/gff3": {
        source: "iana"
      },
      "text/grammar-ref-list": {
        source: "iana"
      },
      "text/html": {
        source: "iana",
        compressible: true,
        extensions: ["html", "htm", "shtml"]
      },
      "text/jade": {
        extensions: ["jade"]
      },
      "text/javascript": {
        source: "iana",
        compressible: true
      },
      "text/jcr-cnd": {
        source: "iana"
      },
      "text/jsx": {
        compressible: true,
        extensions: ["jsx"]
      },
      "text/less": {
        compressible: true,
        extensions: ["less"]
      },
      "text/markdown": {
        source: "iana",
        compressible: true,
        extensions: ["markdown", "md"]
      },
      "text/mathml": {
        source: "nginx",
        extensions: ["mml"]
      },
      "text/mdx": {
        compressible: true,
        extensions: ["mdx"]
      },
      "text/mizar": {
        source: "iana"
      },
      "text/n3": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["n3"]
      },
      "text/parameters": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/parityfec": {
        source: "iana"
      },
      "text/plain": {
        source: "iana",
        compressible: true,
        extensions: ["txt", "text", "conf", "def", "list", "log", "in", "ini"]
      },
      "text/provenance-notation": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/prs.fallenstein.rst": {
        source: "iana"
      },
      "text/prs.lines.tag": {
        source: "iana",
        extensions: ["dsc"]
      },
      "text/prs.prop.logic": {
        source: "iana"
      },
      "text/raptorfec": {
        source: "iana"
      },
      "text/red": {
        source: "iana"
      },
      "text/rfc822-headers": {
        source: "iana"
      },
      "text/richtext": {
        source: "iana",
        compressible: true,
        extensions: ["rtx"]
      },
      "text/rtf": {
        source: "iana",
        compressible: true,
        extensions: ["rtf"]
      },
      "text/rtp-enc-aescm128": {
        source: "iana"
      },
      "text/rtploopback": {
        source: "iana"
      },
      "text/rtx": {
        source: "iana"
      },
      "text/sgml": {
        source: "iana",
        extensions: ["sgml", "sgm"]
      },
      "text/shaclc": {
        source: "iana"
      },
      "text/shex": {
        source: "iana",
        extensions: ["shex"]
      },
      "text/slim": {
        extensions: ["slim", "slm"]
      },
      "text/spdx": {
        source: "iana",
        extensions: ["spdx"]
      },
      "text/strings": {
        source: "iana"
      },
      "text/stylus": {
        extensions: ["stylus", "styl"]
      },
      "text/t140": {
        source: "iana"
      },
      "text/tab-separated-values": {
        source: "iana",
        compressible: true,
        extensions: ["tsv"]
      },
      "text/troff": {
        source: "iana",
        extensions: ["t", "tr", "roff", "man", "me", "ms"]
      },
      "text/turtle": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["ttl"]
      },
      "text/ulpfec": {
        source: "iana"
      },
      "text/uri-list": {
        source: "iana",
        compressible: true,
        extensions: ["uri", "uris", "urls"]
      },
      "text/vcard": {
        source: "iana",
        compressible: true,
        extensions: ["vcard"]
      },
      "text/vnd.a": {
        source: "iana"
      },
      "text/vnd.abc": {
        source: "iana"
      },
      "text/vnd.ascii-art": {
        source: "iana"
      },
      "text/vnd.curl": {
        source: "iana",
        extensions: ["curl"]
      },
      "text/vnd.curl.dcurl": {
        source: "apache",
        extensions: ["dcurl"]
      },
      "text/vnd.curl.mcurl": {
        source: "apache",
        extensions: ["mcurl"]
      },
      "text/vnd.curl.scurl": {
        source: "apache",
        extensions: ["scurl"]
      },
      "text/vnd.debian.copyright": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/vnd.dmclientscript": {
        source: "iana"
      },
      "text/vnd.dvb.subtitle": {
        source: "iana",
        extensions: ["sub"]
      },
      "text/vnd.esmertec.theme-descriptor": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/vnd.familysearch.gedcom": {
        source: "iana",
        extensions: ["ged"]
      },
      "text/vnd.ficlab.flt": {
        source: "iana"
      },
      "text/vnd.fly": {
        source: "iana",
        extensions: ["fly"]
      },
      "text/vnd.fmi.flexstor": {
        source: "iana",
        extensions: ["flx"]
      },
      "text/vnd.gml": {
        source: "iana"
      },
      "text/vnd.graphviz": {
        source: "iana",
        extensions: ["gv"]
      },
      "text/vnd.hans": {
        source: "iana"
      },
      "text/vnd.hgl": {
        source: "iana"
      },
      "text/vnd.in3d.3dml": {
        source: "iana",
        extensions: ["3dml"]
      },
      "text/vnd.in3d.spot": {
        source: "iana",
        extensions: ["spot"]
      },
      "text/vnd.iptc.newsml": {
        source: "iana"
      },
      "text/vnd.iptc.nitf": {
        source: "iana"
      },
      "text/vnd.latex-z": {
        source: "iana"
      },
      "text/vnd.motorola.reflex": {
        source: "iana"
      },
      "text/vnd.ms-mediapackage": {
        source: "iana"
      },
      "text/vnd.net2phone.commcenter.command": {
        source: "iana"
      },
      "text/vnd.radisys.msml-basic-layout": {
        source: "iana"
      },
      "text/vnd.senx.warpscript": {
        source: "iana"
      },
      "text/vnd.si.uricatalogue": {
        source: "iana"
      },
      "text/vnd.sosi": {
        source: "iana"
      },
      "text/vnd.sun.j2me.app-descriptor": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["jad"]
      },
      "text/vnd.trolltech.linguist": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/vnd.wap.si": {
        source: "iana"
      },
      "text/vnd.wap.sl": {
        source: "iana"
      },
      "text/vnd.wap.wml": {
        source: "iana",
        extensions: ["wml"]
      },
      "text/vnd.wap.wmlscript": {
        source: "iana",
        extensions: ["wmls"]
      },
      "text/vtt": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["vtt"]
      },
      "text/x-asm": {
        source: "apache",
        extensions: ["s", "asm"]
      },
      "text/x-c": {
        source: "apache",
        extensions: ["c", "cc", "cxx", "cpp", "h", "hh", "dic"]
      },
      "text/x-component": {
        source: "nginx",
        extensions: ["htc"]
      },
      "text/x-fortran": {
        source: "apache",
        extensions: ["f", "for", "f77", "f90"]
      },
      "text/x-gwt-rpc": {
        compressible: true
      },
      "text/x-handlebars-template": {
        extensions: ["hbs"]
      },
      "text/x-java-source": {
        source: "apache",
        extensions: ["java"]
      },
      "text/x-jquery-tmpl": {
        compressible: true
      },
      "text/x-lua": {
        extensions: ["lua"]
      },
      "text/x-markdown": {
        compressible: true,
        extensions: ["mkd"]
      },
      "text/x-nfo": {
        source: "apache",
        extensions: ["nfo"]
      },
      "text/x-opml": {
        source: "apache",
        extensions: ["opml"]
      },
      "text/x-org": {
        compressible: true,
        extensions: ["org"]
      },
      "text/x-pascal": {
        source: "apache",
        extensions: ["p", "pas"]
      },
      "text/x-processing": {
        compressible: true,
        extensions: ["pde"]
      },
      "text/x-sass": {
        extensions: ["sass"]
      },
      "text/x-scss": {
        extensions: ["scss"]
      },
      "text/x-setext": {
        source: "apache",
        extensions: ["etx"]
      },
      "text/x-sfv": {
        source: "apache",
        extensions: ["sfv"]
      },
      "text/x-suse-ymp": {
        compressible: true,
        extensions: ["ymp"]
      },
      "text/x-uuencode": {
        source: "apache",
        extensions: ["uu"]
      },
      "text/x-vcalendar": {
        source: "apache",
        extensions: ["vcs"]
      },
      "text/x-vcard": {
        source: "apache",
        extensions: ["vcf"]
      },
      "text/xml": {
        source: "iana",
        compressible: true,
        extensions: ["xml"]
      },
      "text/xml-external-parsed-entity": {
        source: "iana"
      },
      "text/yaml": {
        compressible: true,
        extensions: ["yaml", "yml"]
      },
      "video/1d-interleaved-parityfec": {
        source: "iana"
      },
      "video/3gpp": {
        source: "iana",
        extensions: ["3gp", "3gpp"]
      },
      "video/3gpp-tt": {
        source: "iana"
      },
      "video/3gpp2": {
        source: "iana",
        extensions: ["3g2"]
      },
      "video/av1": {
        source: "iana"
      },
      "video/bmpeg": {
        source: "iana"
      },
      "video/bt656": {
        source: "iana"
      },
      "video/celb": {
        source: "iana"
      },
      "video/dv": {
        source: "iana"
      },
      "video/encaprtp": {
        source: "iana"
      },
      "video/ffv1": {
        source: "iana"
      },
      "video/flexfec": {
        source: "iana"
      },
      "video/h261": {
        source: "iana",
        extensions: ["h261"]
      },
      "video/h263": {
        source: "iana",
        extensions: ["h263"]
      },
      "video/h263-1998": {
        source: "iana"
      },
      "video/h263-2000": {
        source: "iana"
      },
      "video/h264": {
        source: "iana",
        extensions: ["h264"]
      },
      "video/h264-rcdo": {
        source: "iana"
      },
      "video/h264-svc": {
        source: "iana"
      },
      "video/h265": {
        source: "iana"
      },
      "video/iso.segment": {
        source: "iana",
        extensions: ["m4s"]
      },
      "video/jpeg": {
        source: "iana",
        extensions: ["jpgv"]
      },
      "video/jpeg2000": {
        source: "iana"
      },
      "video/jpm": {
        source: "apache",
        extensions: ["jpm", "jpgm"]
      },
      "video/jxsv": {
        source: "iana"
      },
      "video/mj2": {
        source: "iana",
        extensions: ["mj2", "mjp2"]
      },
      "video/mp1s": {
        source: "iana"
      },
      "video/mp2p": {
        source: "iana"
      },
      "video/mp2t": {
        source: "iana",
        extensions: ["ts"]
      },
      "video/mp4": {
        source: "iana",
        compressible: false,
        extensions: ["mp4", "mp4v", "mpg4"]
      },
      "video/mp4v-es": {
        source: "iana"
      },
      "video/mpeg": {
        source: "iana",
        compressible: false,
        extensions: ["mpeg", "mpg", "mpe", "m1v", "m2v"]
      },
      "video/mpeg4-generic": {
        source: "iana"
      },
      "video/mpv": {
        source: "iana"
      },
      "video/nv": {
        source: "iana"
      },
      "video/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["ogv"]
      },
      "video/parityfec": {
        source: "iana"
      },
      "video/pointer": {
        source: "iana"
      },
      "video/quicktime": {
        source: "iana",
        compressible: false,
        extensions: ["qt", "mov"]
      },
      "video/raptorfec": {
        source: "iana"
      },
      "video/raw": {
        source: "iana"
      },
      "video/rtp-enc-aescm128": {
        source: "iana"
      },
      "video/rtploopback": {
        source: "iana"
      },
      "video/rtx": {
        source: "iana"
      },
      "video/scip": {
        source: "iana"
      },
      "video/smpte291": {
        source: "iana"
      },
      "video/smpte292m": {
        source: "iana"
      },
      "video/ulpfec": {
        source: "iana"
      },
      "video/vc1": {
        source: "iana"
      },
      "video/vc2": {
        source: "iana"
      },
      "video/vnd.cctv": {
        source: "iana"
      },
      "video/vnd.dece.hd": {
        source: "iana",
        extensions: ["uvh", "uvvh"]
      },
      "video/vnd.dece.mobile": {
        source: "iana",
        extensions: ["uvm", "uvvm"]
      },
      "video/vnd.dece.mp4": {
        source: "iana"
      },
      "video/vnd.dece.pd": {
        source: "iana",
        extensions: ["uvp", "uvvp"]
      },
      "video/vnd.dece.sd": {
        source: "iana",
        extensions: ["uvs", "uvvs"]
      },
      "video/vnd.dece.video": {
        source: "iana",
        extensions: ["uvv", "uvvv"]
      },
      "video/vnd.directv.mpeg": {
        source: "iana"
      },
      "video/vnd.directv.mpeg-tts": {
        source: "iana"
      },
      "video/vnd.dlna.mpeg-tts": {
        source: "iana"
      },
      "video/vnd.dvb.file": {
        source: "iana",
        extensions: ["dvb"]
      },
      "video/vnd.fvt": {
        source: "iana",
        extensions: ["fvt"]
      },
      "video/vnd.hns.video": {
        source: "iana"
      },
      "video/vnd.iptvforum.1dparityfec-1010": {
        source: "iana"
      },
      "video/vnd.iptvforum.1dparityfec-2005": {
        source: "iana"
      },
      "video/vnd.iptvforum.2dparityfec-1010": {
        source: "iana"
      },
      "video/vnd.iptvforum.2dparityfec-2005": {
        source: "iana"
      },
      "video/vnd.iptvforum.ttsavc": {
        source: "iana"
      },
      "video/vnd.iptvforum.ttsmpeg2": {
        source: "iana"
      },
      "video/vnd.motorola.video": {
        source: "iana"
      },
      "video/vnd.motorola.videop": {
        source: "iana"
      },
      "video/vnd.mpegurl": {
        source: "iana",
        extensions: ["mxu", "m4u"]
      },
      "video/vnd.ms-playready.media.pyv": {
        source: "iana",
        extensions: ["pyv"]
      },
      "video/vnd.nokia.interleaved-multimedia": {
        source: "iana"
      },
      "video/vnd.nokia.mp4vr": {
        source: "iana"
      },
      "video/vnd.nokia.videovoip": {
        source: "iana"
      },
      "video/vnd.objectvideo": {
        source: "iana"
      },
      "video/vnd.radgamettools.bink": {
        source: "iana"
      },
      "video/vnd.radgamettools.smacker": {
        source: "iana"
      },
      "video/vnd.sealed.mpeg1": {
        source: "iana"
      },
      "video/vnd.sealed.mpeg4": {
        source: "iana"
      },
      "video/vnd.sealed.swf": {
        source: "iana"
      },
      "video/vnd.sealedmedia.softseal.mov": {
        source: "iana"
      },
      "video/vnd.uvvu.mp4": {
        source: "iana",
        extensions: ["uvu", "uvvu"]
      },
      "video/vnd.vivo": {
        source: "iana",
        extensions: ["viv"]
      },
      "video/vnd.youtube.yt": {
        source: "iana"
      },
      "video/vp8": {
        source: "iana"
      },
      "video/vp9": {
        source: "iana"
      },
      "video/webm": {
        source: "apache",
        compressible: false,
        extensions: ["webm"]
      },
      "video/x-f4v": {
        source: "apache",
        extensions: ["f4v"]
      },
      "video/x-fli": {
        source: "apache",
        extensions: ["fli"]
      },
      "video/x-flv": {
        source: "apache",
        compressible: false,
        extensions: ["flv"]
      },
      "video/x-m4v": {
        source: "apache",
        extensions: ["m4v"]
      },
      "video/x-matroska": {
        source: "apache",
        compressible: false,
        extensions: ["mkv", "mk3d", "mks"]
      },
      "video/x-mng": {
        source: "apache",
        extensions: ["mng"]
      },
      "video/x-ms-asf": {
        source: "apache",
        extensions: ["asf", "asx"]
      },
      "video/x-ms-vob": {
        source: "apache",
        extensions: ["vob"]
      },
      "video/x-ms-wm": {
        source: "apache",
        extensions: ["wm"]
      },
      "video/x-ms-wmv": {
        source: "apache",
        compressible: false,
        extensions: ["wmv"]
      },
      "video/x-ms-wmx": {
        source: "apache",
        extensions: ["wmx"]
      },
      "video/x-ms-wvx": {
        source: "apache",
        extensions: ["wvx"]
      },
      "video/x-msvideo": {
        source: "apache",
        extensions: ["avi"]
      },
      "video/x-sgi-movie": {
        source: "apache",
        extensions: ["movie"]
      },
      "video/x-smv": {
        source: "apache",
        extensions: ["smv"]
      },
      "x-conference/x-cooltalk": {
        source: "apache",
        extensions: ["ice"]
      },
      "x-shader/x-fragment": {
        compressible: true
      },
      "x-shader/x-vertex": {
        compressible: true
      }
    };
  }
});

// ../../node_modules/.pnpm/mime-db@1.52.0/node_modules/mime-db/index.js
var require_mime_db = __commonJS({
  "../../node_modules/.pnpm/mime-db@1.52.0/node_modules/mime-db/index.js"(exports, module) {
    init_esm();
    module.exports = require_db();
  }
});

// ../../node_modules/.pnpm/mime-types@2.1.35/node_modules/mime-types/index.js
var require_mime_types = __commonJS({
  "../../node_modules/.pnpm/mime-types@2.1.35/node_modules/mime-types/index.js"(exports) {
    "use strict";
    init_esm();
    var db = require_mime_db();
    var extname = __require("path").extname;
    var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
    var TEXT_TYPE_REGEXP = /^text\//i;
    exports.charset = charset;
    exports.charsets = { lookup: charset };
    exports.contentType = contentType;
    exports.extension = extension;
    exports.extensions = /* @__PURE__ */ Object.create(null);
    exports.lookup = lookup;
    exports.types = /* @__PURE__ */ Object.create(null);
    populateMaps(exports.extensions, exports.types);
    function charset(type) {
      if (!type || typeof type !== "string") {
        return false;
      }
      var match = EXTRACT_TYPE_REGEXP.exec(type);
      var mime = match && db[match[1].toLowerCase()];
      if (mime && mime.charset) {
        return mime.charset;
      }
      if (match && TEXT_TYPE_REGEXP.test(match[1])) {
        return "UTF-8";
      }
      return false;
    }
    function contentType(str) {
      if (!str || typeof str !== "string") {
        return false;
      }
      var mime = str.indexOf("/") === -1 ? exports.lookup(str) : str;
      if (!mime) {
        return false;
      }
      if (mime.indexOf("charset") === -1) {
        var charset2 = exports.charset(mime);
        if (charset2) mime += "; charset=" + charset2.toLowerCase();
      }
      return mime;
    }
    function extension(type) {
      if (!type || typeof type !== "string") {
        return false;
      }
      var match = EXTRACT_TYPE_REGEXP.exec(type);
      var exts = match && exports.extensions[match[1].toLowerCase()];
      if (!exts || !exts.length) {
        return false;
      }
      return exts[0];
    }
    function lookup(path) {
      if (!path || typeof path !== "string") {
        return false;
      }
      var extension2 = extname("x." + path).toLowerCase().substr(1);
      if (!extension2) {
        return false;
      }
      return exports.types[extension2] || false;
    }
    function populateMaps(extensions, types) {
      var preference = ["nginx", "apache", void 0, "iana"];
      Object.keys(db).forEach(function forEachMimeType(type) {
        var mime = db[type];
        var exts = mime.extensions;
        if (!exts || !exts.length) {
          return;
        }
        extensions[type] = exts;
        for (var i = 0; i < exts.length; i++) {
          var extension2 = exts[i];
          if (types[extension2]) {
            var from = preference.indexOf(db[types[extension2]].source);
            var to = preference.indexOf(mime.source);
            if (types[extension2] !== "application/octet-stream" && (from > to || from === to && types[extension2].substr(0, 12) === "application/")) {
              continue;
            }
          }
          types[extension2] = type;
        }
      });
    }
  }
});

// ../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/defer.js
var require_defer = __commonJS({
  "../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/defer.js"(exports, module) {
    init_esm();
    module.exports = defer;
    function defer(fn) {
      var nextTick = typeof setImmediate == "function" ? setImmediate : typeof process == "object" && typeof process.nextTick == "function" ? process.nextTick : null;
      if (nextTick) {
        nextTick(fn);
      } else {
        setTimeout(fn, 0);
      }
    }
  }
});

// ../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/async.js
var require_async = __commonJS({
  "../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/async.js"(exports, module) {
    init_esm();
    var defer = require_defer();
    module.exports = async;
    function async(callback) {
      var isAsync = false;
      defer(function() {
        isAsync = true;
      });
      return function async_callback(err, result) {
        if (isAsync) {
          callback(err, result);
        } else {
          defer(function nextTick_callback() {
            callback(err, result);
          });
        }
      };
    }
  }
});

// ../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/abort.js
var require_abort = __commonJS({
  "../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/abort.js"(exports, module) {
    init_esm();
    module.exports = abort;
    function abort(state) {
      Object.keys(state.jobs).forEach(clean.bind(state));
      state.jobs = {};
    }
    function clean(key) {
      if (typeof this.jobs[key] == "function") {
        this.jobs[key]();
      }
    }
  }
});

// ../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/iterate.js
var require_iterate = __commonJS({
  "../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/iterate.js"(exports, module) {
    init_esm();
    var async = require_async();
    var abort = require_abort();
    module.exports = iterate;
    function iterate(list, iterator, state, callback) {
      var key = state["keyedList"] ? state["keyedList"][state.index] : state.index;
      state.jobs[key] = runJob(iterator, key, list[key], function(error, output) {
        if (!(key in state.jobs)) {
          return;
        }
        delete state.jobs[key];
        if (error) {
          abort(state);
        } else {
          state.results[key] = output;
        }
        callback(error, state.results);
      });
    }
    function runJob(iterator, key, item, callback) {
      var aborter;
      if (iterator.length == 2) {
        aborter = iterator(item, async(callback));
      } else {
        aborter = iterator(item, key, async(callback));
      }
      return aborter;
    }
  }
});

// ../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/state.js
var require_state = __commonJS({
  "../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/state.js"(exports, module) {
    init_esm();
    module.exports = state;
    function state(list, sortMethod) {
      var isNamedList = !Array.isArray(list), initState = {
        index: 0,
        keyedList: isNamedList || sortMethod ? Object.keys(list) : null,
        jobs: {},
        results: isNamedList ? {} : [],
        size: isNamedList ? Object.keys(list).length : list.length
      };
      if (sortMethod) {
        initState.keyedList.sort(isNamedList ? sortMethod : function(a, b) {
          return sortMethod(list[a], list[b]);
        });
      }
      return initState;
    }
  }
});

// ../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/terminator.js
var require_terminator = __commonJS({
  "../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/terminator.js"(exports, module) {
    init_esm();
    var abort = require_abort();
    var async = require_async();
    module.exports = terminator;
    function terminator(callback) {
      if (!Object.keys(this.jobs).length) {
        return;
      }
      this.index = this.size;
      abort(this);
      async(callback)(null, this.results);
    }
  }
});

// ../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/parallel.js
var require_parallel = __commonJS({
  "../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/parallel.js"(exports, module) {
    init_esm();
    var iterate = require_iterate();
    var initState = require_state();
    var terminator = require_terminator();
    module.exports = parallel;
    function parallel(list, iterator, callback) {
      var state = initState(list);
      while (state.index < (state["keyedList"] || list).length) {
        iterate(list, iterator, state, function(error, result) {
          if (error) {
            callback(error, result);
            return;
          }
          if (Object.keys(state.jobs).length === 0) {
            callback(null, state.results);
            return;
          }
        });
        state.index++;
      }
      return terminator.bind(state, callback);
    }
  }
});

// ../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/serialOrdered.js
var require_serialOrdered = __commonJS({
  "../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/serialOrdered.js"(exports, module) {
    init_esm();
    var iterate = require_iterate();
    var initState = require_state();
    var terminator = require_terminator();
    module.exports = serialOrdered;
    module.exports.ascending = ascending;
    module.exports.descending = descending;
    function serialOrdered(list, iterator, sortMethod, callback) {
      var state = initState(list, sortMethod);
      iterate(list, iterator, state, function iteratorHandler(error, result) {
        if (error) {
          callback(error, result);
          return;
        }
        state.index++;
        if (state.index < (state["keyedList"] || list).length) {
          iterate(list, iterator, state, iteratorHandler);
          return;
        }
        callback(null, state.results);
      });
      return terminator.bind(state, callback);
    }
    function ascending(a, b) {
      return a < b ? -1 : a > b ? 1 : 0;
    }
    function descending(a, b) {
      return -1 * ascending(a, b);
    }
  }
});

// ../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/serial.js
var require_serial = __commonJS({
  "../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/serial.js"(exports, module) {
    init_esm();
    var serialOrdered = require_serialOrdered();
    module.exports = serial;
    function serial(list, iterator, callback) {
      return serialOrdered(list, iterator, null, callback);
    }
  }
});

// ../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/index.js
var require_asynckit = __commonJS({
  "../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/index.js"(exports, module) {
    init_esm();
    module.exports = {
      parallel: require_parallel(),
      serial: require_serial(),
      serialOrdered: require_serialOrdered()
    };
  }
});

// ../../node_modules/.pnpm/es-object-atoms@1.1.1/node_modules/es-object-atoms/index.js
var require_es_object_atoms = __commonJS({
  "../../node_modules/.pnpm/es-object-atoms@1.1.1/node_modules/es-object-atoms/index.js"(exports, module) {
    "use strict";
    init_esm();
    module.exports = Object;
  }
});

// ../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/index.js
var require_es_errors = __commonJS({
  "../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/index.js"(exports, module) {
    "use strict";
    init_esm();
    module.exports = Error;
  }
});

// ../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/eval.js
var require_eval = __commonJS({
  "../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/eval.js"(exports, module) {
    "use strict";
    init_esm();
    module.exports = EvalError;
  }
});

// ../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/range.js
var require_range = __commonJS({
  "../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/range.js"(exports, module) {
    "use strict";
    init_esm();
    module.exports = RangeError;
  }
});

// ../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/ref.js
var require_ref = __commonJS({
  "../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/ref.js"(exports, module) {
    "use strict";
    init_esm();
    module.exports = ReferenceError;
  }
});

// ../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/syntax.js
var require_syntax = __commonJS({
  "../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/syntax.js"(exports, module) {
    "use strict";
    init_esm();
    module.exports = SyntaxError;
  }
});

// ../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/type.js
var require_type = __commonJS({
  "../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/type.js"(exports, module) {
    "use strict";
    init_esm();
    module.exports = TypeError;
  }
});

// ../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/uri.js
var require_uri = __commonJS({
  "../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/uri.js"(exports, module) {
    "use strict";
    init_esm();
    module.exports = URIError;
  }
});

// ../../node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/abs.js
var require_abs = __commonJS({
  "../../node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/abs.js"(exports, module) {
    "use strict";
    init_esm();
    module.exports = Math.abs;
  }
});

// ../../node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/floor.js
var require_floor = __commonJS({
  "../../node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/floor.js"(exports, module) {
    "use strict";
    init_esm();
    module.exports = Math.floor;
  }
});

// ../../node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/max.js
var require_max = __commonJS({
  "../../node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/max.js"(exports, module) {
    "use strict";
    init_esm();
    module.exports = Math.max;
  }
});

// ../../node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/min.js
var require_min = __commonJS({
  "../../node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/min.js"(exports, module) {
    "use strict";
    init_esm();
    module.exports = Math.min;
  }
});

// ../../node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/pow.js
var require_pow = __commonJS({
  "../../node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/pow.js"(exports, module) {
    "use strict";
    init_esm();
    module.exports = Math.pow;
  }
});

// ../../node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/round.js
var require_round = __commonJS({
  "../../node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/round.js"(exports, module) {
    "use strict";
    init_esm();
    module.exports = Math.round;
  }
});

// ../../node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/isNaN.js
var require_isNaN = __commonJS({
  "../../node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/isNaN.js"(exports, module) {
    "use strict";
    init_esm();
    module.exports = Number.isNaN || function isNaN2(a) {
      return a !== a;
    };
  }
});

// ../../node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/sign.js
var require_sign = __commonJS({
  "../../node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/sign.js"(exports, module) {
    "use strict";
    init_esm();
    var $isNaN = require_isNaN();
    module.exports = function sign(number) {
      if ($isNaN(number) || number === 0) {
        return number;
      }
      return number < 0 ? -1 : 1;
    };
  }
});

// ../../node_modules/.pnpm/gopd@1.2.0/node_modules/gopd/gOPD.js
var require_gOPD = __commonJS({
  "../../node_modules/.pnpm/gopd@1.2.0/node_modules/gopd/gOPD.js"(exports, module) {
    "use strict";
    init_esm();
    module.exports = Object.getOwnPropertyDescriptor;
  }
});

// ../../node_modules/.pnpm/gopd@1.2.0/node_modules/gopd/index.js
var require_gopd = __commonJS({
  "../../node_modules/.pnpm/gopd@1.2.0/node_modules/gopd/index.js"(exports, module) {
    "use strict";
    init_esm();
    var $gOPD = require_gOPD();
    if ($gOPD) {
      try {
        $gOPD([], "length");
      } catch (e) {
        $gOPD = null;
      }
    }
    module.exports = $gOPD;
  }
});

// ../../node_modules/.pnpm/es-define-property@1.0.1/node_modules/es-define-property/index.js
var require_es_define_property = __commonJS({
  "../../node_modules/.pnpm/es-define-property@1.0.1/node_modules/es-define-property/index.js"(exports, module) {
    "use strict";
    init_esm();
    var $defineProperty = Object.defineProperty || false;
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
      } catch (e) {
        $defineProperty = false;
      }
    }
    module.exports = $defineProperty;
  }
});

// ../../node_modules/.pnpm/has-symbols@1.1.0/node_modules/has-symbols/shams.js
var require_shams = __commonJS({
  "../../node_modules/.pnpm/has-symbols@1.1.0/node_modules/has-symbols/shams.js"(exports, module) {
    "use strict";
    init_esm();
    module.exports = function hasSymbols() {
      if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
        return false;
      }
      if (typeof Symbol.iterator === "symbol") {
        return true;
      }
      var obj = {};
      var sym = Symbol("test");
      var symObj = Object(sym);
      if (typeof sym === "string") {
        return false;
      }
      if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
        return false;
      }
      if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
        return false;
      }
      var symVal = 42;
      obj[sym] = symVal;
      for (var _ in obj) {
        return false;
      }
      if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
        return false;
      }
      if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
        return false;
      }
      var syms = Object.getOwnPropertySymbols(obj);
      if (syms.length !== 1 || syms[0] !== sym) {
        return false;
      }
      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
      }
      if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = (
          /** @type {PropertyDescriptor} */
          Object.getOwnPropertyDescriptor(obj, sym)
        );
        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
          return false;
        }
      }
      return true;
    };
  }
});

// ../../node_modules/.pnpm/has-symbols@1.1.0/node_modules/has-symbols/index.js
var require_has_symbols = __commonJS({
  "../../node_modules/.pnpm/has-symbols@1.1.0/node_modules/has-symbols/index.js"(exports, module) {
    "use strict";
    init_esm();
    var origSymbol = typeof Symbol !== "undefined" && Symbol;
    var hasSymbolSham = require_shams();
    module.exports = function hasNativeSymbols() {
      if (typeof origSymbol !== "function") {
        return false;
      }
      if (typeof Symbol !== "function") {
        return false;
      }
      if (typeof origSymbol("foo") !== "symbol") {
        return false;
      }
      if (typeof Symbol("bar") !== "symbol") {
        return false;
      }
      return hasSymbolSham();
    };
  }
});

// ../../node_modules/.pnpm/get-proto@1.0.1/node_modules/get-proto/Reflect.getPrototypeOf.js
var require_Reflect_getPrototypeOf = __commonJS({
  "../../node_modules/.pnpm/get-proto@1.0.1/node_modules/get-proto/Reflect.getPrototypeOf.js"(exports, module) {
    "use strict";
    init_esm();
    module.exports = typeof Reflect !== "undefined" && Reflect.getPrototypeOf || null;
  }
});

// ../../node_modules/.pnpm/get-proto@1.0.1/node_modules/get-proto/Object.getPrototypeOf.js
var require_Object_getPrototypeOf = __commonJS({
  "../../node_modules/.pnpm/get-proto@1.0.1/node_modules/get-proto/Object.getPrototypeOf.js"(exports, module) {
    "use strict";
    init_esm();
    var $Object = require_es_object_atoms();
    module.exports = $Object.getPrototypeOf || null;
  }
});

// ../../node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/implementation.js
var require_implementation = __commonJS({
  "../../node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/implementation.js"(exports, module) {
    "use strict";
    init_esm();
    var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
    var toStr = Object.prototype.toString;
    var max = Math.max;
    var funcType = "[object Function]";
    var concatty = function concatty2(a, b) {
      var arr = [];
      for (var i = 0; i < a.length; i += 1) {
        arr[i] = a[i];
      }
      for (var j = 0; j < b.length; j += 1) {
        arr[j + a.length] = b[j];
      }
      return arr;
    };
    var slicy = function slicy2(arrLike, offset) {
      var arr = [];
      for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
        arr[j] = arrLike[i];
      }
      return arr;
    };
    var joiny = function(arr, joiner) {
      var str = "";
      for (var i = 0; i < arr.length; i += 1) {
        str += arr[i];
        if (i + 1 < arr.length) {
          str += joiner;
        }
      }
      return str;
    };
    module.exports = function bind(that) {
      var target = this;
      if (typeof target !== "function" || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slicy(arguments, 1);
      var bound;
      var binder = function() {
        if (this instanceof bound) {
          var result = target.apply(
            this,
            concatty(args, arguments)
          );
          if (Object(result) === result) {
            return result;
          }
          return this;
        }
        return target.apply(
          that,
          concatty(args, arguments)
        );
      };
      var boundLength = max(0, target.length - args.length);
      var boundArgs = [];
      for (var i = 0; i < boundLength; i++) {
        boundArgs[i] = "$" + i;
      }
      bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
      if (target.prototype) {
        var Empty = function Empty2() {
        };
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
      }
      return bound;
    };
  }
});

// ../../node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/index.js
var require_function_bind = __commonJS({
  "../../node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/index.js"(exports, module) {
    "use strict";
    init_esm();
    var implementation = require_implementation();
    module.exports = Function.prototype.bind || implementation;
  }
});

// ../../node_modules/.pnpm/call-bind-apply-helpers@1.0.1/node_modules/call-bind-apply-helpers/functionCall.js
var require_functionCall = __commonJS({
  "../../node_modules/.pnpm/call-bind-apply-helpers@1.0.1/node_modules/call-bind-apply-helpers/functionCall.js"(exports, module) {
    "use strict";
    init_esm();
    module.exports = Function.prototype.call;
  }
});

// ../../node_modules/.pnpm/call-bind-apply-helpers@1.0.1/node_modules/call-bind-apply-helpers/functionApply.js
var require_functionApply = __commonJS({
  "../../node_modules/.pnpm/call-bind-apply-helpers@1.0.1/node_modules/call-bind-apply-helpers/functionApply.js"(exports, module) {
    "use strict";
    init_esm();
    module.exports = Function.prototype.apply;
  }
});

// ../../node_modules/.pnpm/call-bind-apply-helpers@1.0.1/node_modules/call-bind-apply-helpers/reflectApply.js
var require_reflectApply = __commonJS({
  "../../node_modules/.pnpm/call-bind-apply-helpers@1.0.1/node_modules/call-bind-apply-helpers/reflectApply.js"(exports, module) {
    "use strict";
    init_esm();
    module.exports = typeof Reflect !== "undefined" && Reflect && Reflect.apply;
  }
});

// ../../node_modules/.pnpm/call-bind-apply-helpers@1.0.1/node_modules/call-bind-apply-helpers/actualApply.js
var require_actualApply = __commonJS({
  "../../node_modules/.pnpm/call-bind-apply-helpers@1.0.1/node_modules/call-bind-apply-helpers/actualApply.js"(exports, module) {
    "use strict";
    init_esm();
    var bind = require_function_bind();
    var $apply = require_functionApply();
    var $call = require_functionCall();
    var $reflectApply = require_reflectApply();
    module.exports = $reflectApply || bind.call($call, $apply);
  }
});

// ../../node_modules/.pnpm/call-bind-apply-helpers@1.0.1/node_modules/call-bind-apply-helpers/index.js
var require_call_bind_apply_helpers = __commonJS({
  "../../node_modules/.pnpm/call-bind-apply-helpers@1.0.1/node_modules/call-bind-apply-helpers/index.js"(exports, module) {
    "use strict";
    init_esm();
    var bind = require_function_bind();
    var $TypeError = require_type();
    var $call = require_functionCall();
    var $actualApply = require_actualApply();
    module.exports = function callBindBasic(args) {
      if (args.length < 1 || typeof args[0] !== "function") {
        throw new $TypeError("a function is required");
      }
      return $actualApply(bind, $call, args);
    };
  }
});

// ../../node_modules/.pnpm/dunder-proto@1.0.1/node_modules/dunder-proto/get.js
var require_get = __commonJS({
  "../../node_modules/.pnpm/dunder-proto@1.0.1/node_modules/dunder-proto/get.js"(exports, module) {
    "use strict";
    init_esm();
    var callBind = require_call_bind_apply_helpers();
    var gOPD = require_gopd();
    var hasProtoAccessor;
    try {
      hasProtoAccessor = /** @type {{ __proto__?: typeof Array.prototype }} */
      [].__proto__ === Array.prototype;
    } catch (e) {
      if (!e || typeof e !== "object" || !("code" in e) || e.code !== "ERR_PROTO_ACCESS") {
        throw e;
      }
    }
    var desc = !!hasProtoAccessor && gOPD && gOPD(
      Object.prototype,
      /** @type {keyof typeof Object.prototype} */
      "__proto__"
    );
    var $Object = Object;
    var $getPrototypeOf = $Object.getPrototypeOf;
    module.exports = desc && typeof desc.get === "function" ? callBind([desc.get]) : typeof $getPrototypeOf === "function" ? (
      /** @type {import('./get')} */
      function getDunder(value) {
        return $getPrototypeOf(value == null ? value : $Object(value));
      }
    ) : false;
  }
});

// ../../node_modules/.pnpm/get-proto@1.0.1/node_modules/get-proto/index.js
var require_get_proto = __commonJS({
  "../../node_modules/.pnpm/get-proto@1.0.1/node_modules/get-proto/index.js"(exports, module) {
    "use strict";
    init_esm();
    var reflectGetProto = require_Reflect_getPrototypeOf();
    var originalGetProto = require_Object_getPrototypeOf();
    var getDunderProto = require_get();
    module.exports = reflectGetProto ? function getProto(O) {
      return reflectGetProto(O);
    } : originalGetProto ? function getProto(O) {
      if (!O || typeof O !== "object" && typeof O !== "function") {
        throw new TypeError("getProto: not an object");
      }
      return originalGetProto(O);
    } : getDunderProto ? function getProto(O) {
      return getDunderProto(O);
    } : null;
  }
});

// ../../node_modules/.pnpm/hasown@2.0.2/node_modules/hasown/index.js
var require_hasown = __commonJS({
  "../../node_modules/.pnpm/hasown@2.0.2/node_modules/hasown/index.js"(exports, module) {
    "use strict";
    init_esm();
    var call = Function.prototype.call;
    var $hasOwn = Object.prototype.hasOwnProperty;
    var bind = require_function_bind();
    module.exports = bind.call(call, $hasOwn);
  }
});

// ../../node_modules/.pnpm/get-intrinsic@1.2.7/node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS({
  "../../node_modules/.pnpm/get-intrinsic@1.2.7/node_modules/get-intrinsic/index.js"(exports, module) {
    "use strict";
    init_esm();
    var undefined2;
    var $Object = require_es_object_atoms();
    var $Error = require_es_errors();
    var $EvalError = require_eval();
    var $RangeError = require_range();
    var $ReferenceError = require_ref();
    var $SyntaxError = require_syntax();
    var $TypeError = require_type();
    var $URIError = require_uri();
    var abs = require_abs();
    var floor = require_floor();
    var max = require_max();
    var min = require_min();
    var pow = require_pow();
    var round = require_round();
    var sign = require_sign();
    var $Function = Function;
    var getEvalledConstructor = function(expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
      } catch (e) {
      }
    };
    var $gOPD = require_gopd();
    var $defineProperty = require_es_define_property();
    var throwTypeError = function() {
      throw new $TypeError();
    };
    var ThrowTypeError = $gOPD ? function() {
      try {
        arguments.callee;
        return throwTypeError;
      } catch (calleeThrows) {
        try {
          return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    }() : throwTypeError;
    var hasSymbols = require_has_symbols()();
    var getProto = require_get_proto();
    var $ObjectGPO = require_Object_getPrototypeOf();
    var $ReflectGPO = require_Reflect_getPrototypeOf();
    var $apply = require_functionApply();
    var $call = require_functionCall();
    var needsEval = {};
    var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined2 : getProto(Uint8Array);
    var INTRINSICS = {
      __proto__: null,
      "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
      "%Array%": Array,
      "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
      "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2,
      "%AsyncFromSyncIteratorPrototype%": undefined2,
      "%AsyncFunction%": needsEval,
      "%AsyncGenerator%": needsEval,
      "%AsyncGeneratorFunction%": needsEval,
      "%AsyncIteratorPrototype%": needsEval,
      "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
      "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
      "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined2 : BigInt64Array,
      "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined2 : BigUint64Array,
      "%Boolean%": Boolean,
      "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
      "%Date%": Date,
      "%decodeURI%": decodeURI,
      "%decodeURIComponent%": decodeURIComponent,
      "%encodeURI%": encodeURI,
      "%encodeURIComponent%": encodeURIComponent,
      "%Error%": $Error,
      "%eval%": eval,
      // eslint-disable-line no-eval
      "%EvalError%": $EvalError,
      "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
      "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
      "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
      "%Function%": $Function,
      "%GeneratorFunction%": needsEval,
      "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
      "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
      "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
      "%isFinite%": isFinite,
      "%isNaN%": isNaN,
      "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined2,
      "%JSON%": typeof JSON === "object" ? JSON : undefined2,
      "%Map%": typeof Map === "undefined" ? undefined2 : Map,
      "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
      "%Math%": Math,
      "%Number%": Number,
      "%Object%": $Object,
      "%Object.getOwnPropertyDescriptor%": $gOPD,
      "%parseFloat%": parseFloat,
      "%parseInt%": parseInt,
      "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
      "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
      "%RangeError%": $RangeError,
      "%ReferenceError%": $ReferenceError,
      "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
      "%RegExp%": RegExp,
      "%Set%": typeof Set === "undefined" ? undefined2 : Set,
      "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
      "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
      "%String%": String,
      "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined2,
      "%Symbol%": hasSymbols ? Symbol : undefined2,
      "%SyntaxError%": $SyntaxError,
      "%ThrowTypeError%": ThrowTypeError,
      "%TypedArray%": TypedArray,
      "%TypeError%": $TypeError,
      "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
      "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
      "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
      "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
      "%URIError%": $URIError,
      "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
      "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
      "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet,
      "%Function.prototype.call%": $call,
      "%Function.prototype.apply%": $apply,
      "%Object.defineProperty%": $defineProperty,
      "%Object.getPrototypeOf%": $ObjectGPO,
      "%Math.abs%": abs,
      "%Math.floor%": floor,
      "%Math.max%": max,
      "%Math.min%": min,
      "%Math.pow%": pow,
      "%Math.round%": round,
      "%Math.sign%": sign,
      "%Reflect.getPrototypeOf%": $ReflectGPO
    };
    if (getProto) {
      try {
        null.error;
      } catch (e) {
        errorProto = getProto(getProto(e));
        INTRINSICS["%Error.prototype%"] = errorProto;
      }
    }
    var errorProto;
    var doEval = function doEval2(name) {
      var value;
      if (name === "%AsyncFunction%") {
        value = getEvalledConstructor("async function () {}");
      } else if (name === "%GeneratorFunction%") {
        value = getEvalledConstructor("function* () {}");
      } else if (name === "%AsyncGeneratorFunction%") {
        value = getEvalledConstructor("async function* () {}");
      } else if (name === "%AsyncGenerator%") {
        var fn = doEval2("%AsyncGeneratorFunction%");
        if (fn) {
          value = fn.prototype;
        }
      } else if (name === "%AsyncIteratorPrototype%") {
        var gen = doEval2("%AsyncGenerator%");
        if (gen && getProto) {
          value = getProto(gen.prototype);
        }
      }
      INTRINSICS[name] = value;
      return value;
    };
    var LEGACY_ALIASES = {
      __proto__: null,
      "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
      "%ArrayPrototype%": ["Array", "prototype"],
      "%ArrayProto_entries%": ["Array", "prototype", "entries"],
      "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
      "%ArrayProto_keys%": ["Array", "prototype", "keys"],
      "%ArrayProto_values%": ["Array", "prototype", "values"],
      "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
      "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
      "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
      "%BooleanPrototype%": ["Boolean", "prototype"],
      "%DataViewPrototype%": ["DataView", "prototype"],
      "%DatePrototype%": ["Date", "prototype"],
      "%ErrorPrototype%": ["Error", "prototype"],
      "%EvalErrorPrototype%": ["EvalError", "prototype"],
      "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
      "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
      "%FunctionPrototype%": ["Function", "prototype"],
      "%Generator%": ["GeneratorFunction", "prototype"],
      "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
      "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
      "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
      "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
      "%JSONParse%": ["JSON", "parse"],
      "%JSONStringify%": ["JSON", "stringify"],
      "%MapPrototype%": ["Map", "prototype"],
      "%NumberPrototype%": ["Number", "prototype"],
      "%ObjectPrototype%": ["Object", "prototype"],
      "%ObjProto_toString%": ["Object", "prototype", "toString"],
      "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
      "%PromisePrototype%": ["Promise", "prototype"],
      "%PromiseProto_then%": ["Promise", "prototype", "then"],
      "%Promise_all%": ["Promise", "all"],
      "%Promise_reject%": ["Promise", "reject"],
      "%Promise_resolve%": ["Promise", "resolve"],
      "%RangeErrorPrototype%": ["RangeError", "prototype"],
      "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
      "%RegExpPrototype%": ["RegExp", "prototype"],
      "%SetPrototype%": ["Set", "prototype"],
      "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
      "%StringPrototype%": ["String", "prototype"],
      "%SymbolPrototype%": ["Symbol", "prototype"],
      "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
      "%TypedArrayPrototype%": ["TypedArray", "prototype"],
      "%TypeErrorPrototype%": ["TypeError", "prototype"],
      "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
      "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
      "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
      "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
      "%URIErrorPrototype%": ["URIError", "prototype"],
      "%WeakMapPrototype%": ["WeakMap", "prototype"],
      "%WeakSetPrototype%": ["WeakSet", "prototype"]
    };
    var bind = require_function_bind();
    var hasOwn = require_hasown();
    var $concat = bind.call($call, Array.prototype.concat);
    var $spliceApply = bind.call($apply, Array.prototype.splice);
    var $replace = bind.call($call, String.prototype.replace);
    var $strSlice = bind.call($call, String.prototype.slice);
    var $exec = bind.call($call, RegExp.prototype.exec);
    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = function stringToPath2(string) {
      var first = $strSlice(string, 0, 1);
      var last = $strSlice(string, -1);
      if (first === "%" && last !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
      } else if (last === "%" && first !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
      }
      var result = [];
      $replace(string, rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
      });
      return result;
    };
    var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
      var intrinsicName = name;
      var alias;
      if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
      }
      if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) {
          value = doEval(intrinsicName);
        }
        if (typeof value === "undefined" && !allowMissing) {
          throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
        }
        return {
          alias,
          name: intrinsicName,
          value
        };
      }
      throw new $SyntaxError("intrinsic " + name + " does not exist!");
    };
    module.exports = function GetIntrinsic(name, allowMissing) {
      if (typeof name !== "string" || name.length === 0) {
        throw new $TypeError("intrinsic name must be a non-empty string");
      }
      if (arguments.length > 1 && typeof allowMissing !== "boolean") {
        throw new $TypeError('"allowMissing" argument must be a boolean');
      }
      if ($exec(/^%?[^%]*%?$/, name) === null) {
        throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
      }
      var parts = stringToPath(name);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
      var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([0, 1], alias));
      }
      for (var i = 1, isOwn = true; i < parts.length; i += 1) {
        var part = parts[i];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
          throw new $SyntaxError("property names with quotes must have matching quotes");
        }
        if (part === "constructor" || !isOwn) {
          skipFurtherCaching = true;
        }
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) {
          value = INTRINSICS[intrinsicRealName];
        } else if (value != null) {
          if (!(part in value)) {
            if (!allowMissing) {
              throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
            }
            return void 0;
          }
          if ($gOPD && i + 1 >= parts.length) {
            var desc = $gOPD(value, part);
            isOwn = !!desc;
            if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
              value = desc.get;
            } else {
              value = value[part];
            }
          } else {
            isOwn = hasOwn(value, part);
            value = value[part];
          }
          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value;
          }
        }
      }
      return value;
    };
  }
});

// ../../node_modules/.pnpm/has-tostringtag@1.0.2/node_modules/has-tostringtag/shams.js
var require_shams2 = __commonJS({
  "../../node_modules/.pnpm/has-tostringtag@1.0.2/node_modules/has-tostringtag/shams.js"(exports, module) {
    "use strict";
    init_esm();
    var hasSymbols = require_shams();
    module.exports = function hasToStringTagShams() {
      return hasSymbols() && !!Symbol.toStringTag;
    };
  }
});

// ../../node_modules/.pnpm/es-set-tostringtag@2.1.0/node_modules/es-set-tostringtag/index.js
var require_es_set_tostringtag = __commonJS({
  "../../node_modules/.pnpm/es-set-tostringtag@2.1.0/node_modules/es-set-tostringtag/index.js"(exports, module) {
    "use strict";
    init_esm();
    var GetIntrinsic = require_get_intrinsic();
    var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
    var hasToStringTag = require_shams2()();
    var hasOwn = require_hasown();
    var $TypeError = require_type();
    var toStringTag = hasToStringTag ? Symbol.toStringTag : null;
    module.exports = function setToStringTag(object, value) {
      var overrideIfSet = arguments.length > 2 && !!arguments[2] && arguments[2].force;
      var nonConfigurable = arguments.length > 2 && !!arguments[2] && arguments[2].nonConfigurable;
      if (typeof overrideIfSet !== "undefined" && typeof overrideIfSet !== "boolean" || typeof nonConfigurable !== "undefined" && typeof nonConfigurable !== "boolean") {
        throw new $TypeError("if provided, the `overrideIfSet` and `nonConfigurable` options must be booleans");
      }
      if (toStringTag && (overrideIfSet || !hasOwn(object, toStringTag))) {
        if ($defineProperty) {
          $defineProperty(object, toStringTag, {
            configurable: !nonConfigurable,
            enumerable: false,
            value,
            writable: false
          });
        } else {
          object[toStringTag] = value;
        }
      }
    };
  }
});

// ../../node_modules/.pnpm/form-data@4.0.2/node_modules/form-data/lib/populate.js
var require_populate = __commonJS({
  "../../node_modules/.pnpm/form-data@4.0.2/node_modules/form-data/lib/populate.js"(exports, module) {
    init_esm();
    module.exports = function(dst, src) {
      Object.keys(src).forEach(function(prop) {
        dst[prop] = dst[prop] || src[prop];
      });
      return dst;
    };
  }
});

// ../../node_modules/.pnpm/form-data@4.0.2/node_modules/form-data/lib/form_data.js
var require_form_data = __commonJS({
  "../../node_modules/.pnpm/form-data@4.0.2/node_modules/form-data/lib/form_data.js"(exports, module) {
    init_esm();
    var CombinedStream = require_combined_stream();
    var util = __require("util");
    var path = __require("path");
    var http = __require("http");
    var https = __require("https");
    var parseUrl = __require("url").parse;
    var fs = __require("fs");
    var Stream = __require("stream").Stream;
    var mime = require_mime_types();
    var asynckit = require_asynckit();
    var setToStringTag = require_es_set_tostringtag();
    var populate = require_populate();
    module.exports = FormData2;
    util.inherits(FormData2, CombinedStream);
    function FormData2(options) {
      if (!(this instanceof FormData2)) {
        return new FormData2(options);
      }
      this._overheadLength = 0;
      this._valueLength = 0;
      this._valuesToMeasure = [];
      CombinedStream.call(this);
      options = options || {};
      for (var option in options) {
        this[option] = options[option];
      }
    }
    FormData2.LINE_BREAK = "\r\n";
    FormData2.DEFAULT_CONTENT_TYPE = "application/octet-stream";
    FormData2.prototype.append = function(field, value, options) {
      options = options || {};
      if (typeof options == "string") {
        options = { filename: options };
      }
      var append = CombinedStream.prototype.append.bind(this);
      if (typeof value == "number") {
        value = "" + value;
      }
      if (Array.isArray(value)) {
        this._error(new Error("Arrays are not supported."));
        return;
      }
      var header = this._multiPartHeader(field, value, options);
      var footer = this._multiPartFooter();
      append(header);
      append(value);
      append(footer);
      this._trackLength(header, value, options);
    };
    FormData2.prototype._trackLength = function(header, value, options) {
      var valueLength = 0;
      if (options.knownLength != null) {
        valueLength += +options.knownLength;
      } else if (Buffer.isBuffer(value)) {
        valueLength = value.length;
      } else if (typeof value === "string") {
        valueLength = Buffer.byteLength(value);
      }
      this._valueLength += valueLength;
      this._overheadLength += Buffer.byteLength(header) + FormData2.LINE_BREAK.length;
      if (!value || !value.path && !(value.readable && Object.prototype.hasOwnProperty.call(value, "httpVersion")) && !(value instanceof Stream)) {
        return;
      }
      if (!options.knownLength) {
        this._valuesToMeasure.push(value);
      }
    };
    FormData2.prototype._lengthRetriever = function(value, callback) {
      if (Object.prototype.hasOwnProperty.call(value, "fd")) {
        if (value.end != void 0 && value.end != Infinity && value.start != void 0) {
          callback(null, value.end + 1 - (value.start ? value.start : 0));
        } else {
          fs.stat(value.path, function(err, stat) {
            var fileSize;
            if (err) {
              callback(err);
              return;
            }
            fileSize = stat.size - (value.start ? value.start : 0);
            callback(null, fileSize);
          });
        }
      } else if (Object.prototype.hasOwnProperty.call(value, "httpVersion")) {
        callback(null, +value.headers["content-length"]);
      } else if (Object.prototype.hasOwnProperty.call(value, "httpModule")) {
        value.on("response", function(response) {
          value.pause();
          callback(null, +response.headers["content-length"]);
        });
        value.resume();
      } else {
        callback("Unknown stream");
      }
    };
    FormData2.prototype._multiPartHeader = function(field, value, options) {
      if (typeof options.header == "string") {
        return options.header;
      }
      var contentDisposition = this._getContentDisposition(value, options);
      var contentType = this._getContentType(value, options);
      var contents = "";
      var headers = {
        // add custom disposition as third element or keep it two elements if not
        "Content-Disposition": ["form-data", 'name="' + field + '"'].concat(contentDisposition || []),
        // if no content type. allow it to be empty array
        "Content-Type": [].concat(contentType || [])
      };
      if (typeof options.header == "object") {
        populate(headers, options.header);
      }
      var header;
      for (var prop in headers) {
        if (Object.prototype.hasOwnProperty.call(headers, prop)) {
          header = headers[prop];
          if (header == null) {
            continue;
          }
          if (!Array.isArray(header)) {
            header = [header];
          }
          if (header.length) {
            contents += prop + ": " + header.join("; ") + FormData2.LINE_BREAK;
          }
        }
      }
      return "--" + this.getBoundary() + FormData2.LINE_BREAK + contents + FormData2.LINE_BREAK;
    };
    FormData2.prototype._getContentDisposition = function(value, options) {
      var filename, contentDisposition;
      if (typeof options.filepath === "string") {
        filename = path.normalize(options.filepath).replace(/\\/g, "/");
      } else if (options.filename || value.name || value.path) {
        filename = path.basename(options.filename || value.name || value.path);
      } else if (value.readable && Object.prototype.hasOwnProperty.call(value, "httpVersion")) {
        filename = path.basename(value.client._httpMessage.path || "");
      }
      if (filename) {
        contentDisposition = 'filename="' + filename + '"';
      }
      return contentDisposition;
    };
    FormData2.prototype._getContentType = function(value, options) {
      var contentType = options.contentType;
      if (!contentType && value.name) {
        contentType = mime.lookup(value.name);
      }
      if (!contentType && value.path) {
        contentType = mime.lookup(value.path);
      }
      if (!contentType && value.readable && Object.prototype.hasOwnProperty.call(value, "httpVersion")) {
        contentType = value.headers["content-type"];
      }
      if (!contentType && (options.filepath || options.filename)) {
        contentType = mime.lookup(options.filepath || options.filename);
      }
      if (!contentType && typeof value == "object") {
        contentType = FormData2.DEFAULT_CONTENT_TYPE;
      }
      return contentType;
    };
    FormData2.prototype._multiPartFooter = function() {
      return function(next) {
        var footer = FormData2.LINE_BREAK;
        var lastPart = this._streams.length === 0;
        if (lastPart) {
          footer += this._lastBoundary();
        }
        next(footer);
      }.bind(this);
    };
    FormData2.prototype._lastBoundary = function() {
      return "--" + this.getBoundary() + "--" + FormData2.LINE_BREAK;
    };
    FormData2.prototype.getHeaders = function(userHeaders) {
      var header;
      var formHeaders = {
        "content-type": "multipart/form-data; boundary=" + this.getBoundary()
      };
      for (header in userHeaders) {
        if (Object.prototype.hasOwnProperty.call(userHeaders, header)) {
          formHeaders[header.toLowerCase()] = userHeaders[header];
        }
      }
      return formHeaders;
    };
    FormData2.prototype.setBoundary = function(boundary) {
      this._boundary = boundary;
    };
    FormData2.prototype.getBoundary = function() {
      if (!this._boundary) {
        this._generateBoundary();
      }
      return this._boundary;
    };
    FormData2.prototype.getBuffer = function() {
      var dataBuffer = new Buffer.alloc(0);
      var boundary = this.getBoundary();
      for (var i = 0, len = this._streams.length; i < len; i++) {
        if (typeof this._streams[i] !== "function") {
          if (Buffer.isBuffer(this._streams[i])) {
            dataBuffer = Buffer.concat([dataBuffer, this._streams[i]]);
          } else {
            dataBuffer = Buffer.concat([dataBuffer, Buffer.from(this._streams[i])]);
          }
          if (typeof this._streams[i] !== "string" || this._streams[i].substring(2, boundary.length + 2) !== boundary) {
            dataBuffer = Buffer.concat([dataBuffer, Buffer.from(FormData2.LINE_BREAK)]);
          }
        }
      }
      return Buffer.concat([dataBuffer, Buffer.from(this._lastBoundary())]);
    };
    FormData2.prototype._generateBoundary = function() {
      var boundary = "--------------------------";
      for (var i = 0; i < 24; i++) {
        boundary += Math.floor(Math.random() * 10).toString(16);
      }
      this._boundary = boundary;
    };
    FormData2.prototype.getLengthSync = function() {
      var knownLength = this._overheadLength + this._valueLength;
      if (this._streams.length) {
        knownLength += this._lastBoundary().length;
      }
      if (!this.hasKnownLength()) {
        this._error(new Error("Cannot calculate proper length in synchronous way."));
      }
      return knownLength;
    };
    FormData2.prototype.hasKnownLength = function() {
      var hasKnownLength = true;
      if (this._valuesToMeasure.length) {
        hasKnownLength = false;
      }
      return hasKnownLength;
    };
    FormData2.prototype.getLength = function(cb) {
      var knownLength = this._overheadLength + this._valueLength;
      if (this._streams.length) {
        knownLength += this._lastBoundary().length;
      }
      if (!this._valuesToMeasure.length) {
        process.nextTick(cb.bind(this, null, knownLength));
        return;
      }
      asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {
        if (err) {
          cb(err);
          return;
        }
        values.forEach(function(length) {
          knownLength += length;
        });
        cb(null, knownLength);
      });
    };
    FormData2.prototype.submit = function(params, cb) {
      var request, options, defaults = { method: "post" };
      if (typeof params == "string") {
        params = parseUrl(params);
        options = populate({
          port: params.port,
          path: params.pathname,
          host: params.hostname,
          protocol: params.protocol
        }, defaults);
      } else {
        options = populate(params, defaults);
        if (!options.port) {
          options.port = options.protocol == "https:" ? 443 : 80;
        }
      }
      options.headers = this.getHeaders(params.headers);
      if (options.protocol == "https:") {
        request = https.request(options);
      } else {
        request = http.request(options);
      }
      this.getLength(function(err, length) {
        if (err && err !== "Unknown stream") {
          this._error(err);
          return;
        }
        if (length) {
          request.setHeader("Content-Length", length);
        }
        this.pipe(request);
        if (cb) {
          var onResponse;
          var callback = function(error, responce) {
            request.removeListener("error", callback);
            request.removeListener("response", onResponse);
            return cb.call(this, error, responce);
          };
          onResponse = callback.bind(this, null);
          request.on("error", callback);
          request.on("response", onResponse);
        }
      }.bind(this));
      return request;
    };
    FormData2.prototype._error = function(err) {
      if (!this.error) {
        this.error = err;
        this.pause();
        this.emit("error", err);
      }
    };
    FormData2.prototype.toString = function() {
      return "[object FormData]";
    };
    setToStringTag(FormData2, "FormData");
  }
});

// ../../node_modules/.pnpm/proxy-from-env@1.1.0/node_modules/proxy-from-env/index.js
var require_proxy_from_env = __commonJS({
  "../../node_modules/.pnpm/proxy-from-env@1.1.0/node_modules/proxy-from-env/index.js"(exports) {
    "use strict";
    init_esm();
    var parseUrl = __require("url").parse;
    var DEFAULT_PORTS = {
      ftp: 21,
      gopher: 70,
      http: 80,
      https: 443,
      ws: 80,
      wss: 443
    };
    var stringEndsWith = String.prototype.endsWith || function(s) {
      return s.length <= this.length && this.indexOf(s, this.length - s.length) !== -1;
    };
    function getProxyForUrl(url) {
      var parsedUrl = typeof url === "string" ? parseUrl(url) : url || {};
      var proto = parsedUrl.protocol;
      var hostname = parsedUrl.host;
      var port = parsedUrl.port;
      if (typeof hostname !== "string" || !hostname || typeof proto !== "string") {
        return "";
      }
      proto = proto.split(":", 1)[0];
      hostname = hostname.replace(/:\d*$/, "");
      port = parseInt(port) || DEFAULT_PORTS[proto] || 0;
      if (!shouldProxy(hostname, port)) {
        return "";
      }
      var proxy = getEnv("npm_config_" + proto + "_proxy") || getEnv(proto + "_proxy") || getEnv("npm_config_proxy") || getEnv("all_proxy");
      if (proxy && proxy.indexOf("://") === -1) {
        proxy = proto + "://" + proxy;
      }
      return proxy;
    }
    function shouldProxy(hostname, port) {
      var NO_PROXY = (getEnv("npm_config_no_proxy") || getEnv("no_proxy")).toLowerCase();
      if (!NO_PROXY) {
        return true;
      }
      if (NO_PROXY === "*") {
        return false;
      }
      return NO_PROXY.split(/[,\s]/).every(function(proxy) {
        if (!proxy) {
          return true;
        }
        var parsedProxy = proxy.match(/^(.+):(\d+)$/);
        var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;
        var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;
        if (parsedProxyPort && parsedProxyPort !== port) {
          return true;
        }
        if (!/^[.*]/.test(parsedProxyHostname)) {
          return hostname !== parsedProxyHostname;
        }
        if (parsedProxyHostname.charAt(0) === "*") {
          parsedProxyHostname = parsedProxyHostname.slice(1);
        }
        return !stringEndsWith.call(hostname, parsedProxyHostname);
      });
    }
    function getEnv(key) {
      return process.env[key.toLowerCase()] || process.env[key.toUpperCase()] || "";
    }
    exports.getProxyForUrl = getProxyForUrl;
  }
});

// ../../node_modules/.pnpm/ms@2.1.2/node_modules/ms/index.js
var require_ms = __commonJS({
  "../../node_modules/.pnpm/ms@2.1.2/node_modules/ms/index.js"(exports, module) {
    init_esm();
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse(val);
      } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + "m";
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, "hour");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// ../../node_modules/.pnpm/debug@4.3.2/node_modules/debug/src/common.js
var require_common = __commonJS({
  "../../node_modules/.pnpm/debug@4.3.2/node_modules/debug/src/common.js"(exports, module) {
    init_esm();
    function setup(env2) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require_ms();
      createDebug.destroy = destroy;
      Object.keys(env2).forEach((key) => {
        createDebug[key] = env2[key];
      });
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i = 0; i < namespace.length; i++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i);
          hash |= 0;
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug(...args) {
          if (!debug.enabled) {
            return;
          }
          const self2 = debug;
          const curr = Number(/* @__PURE__ */ new Date());
          const ms = curr - (prevTime || curr);
          self2.diff = ms;
          self2.prev = prevTime;
          self2.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
            if (match === "%%") {
              return "%";
            }
            index++;
            const formatter = createDebug.formatters[format];
            if (typeof formatter === "function") {
              const val = args[index];
              match = formatter.call(self2, val);
              args.splice(index, 1);
              index--;
            }
            return match;
          });
          createDebug.formatArgs.call(self2, args);
          const logFn = self2.log || createDebug.log;
          logFn.apply(self2, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy;
        Object.defineProperty(debug, "enabled", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v) => {
            enableOverride = v;
          }
        });
        if (typeof createDebug.init === "function") {
          createDebug.init(debug);
        }
        return debug;
      }
      function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i;
        const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        const len = split.length;
        for (i = 0; i < len; i++) {
          if (!split[i]) {
            continue;
          }
          namespaces = split[i].replace(/\*/g, ".*?");
          if (namespaces[0] === "-") {
            createDebug.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
          } else {
            createDebug.names.push(new RegExp("^" + namespaces + "$"));
          }
        }
      }
      function disable() {
        const namespaces = [
          ...createDebug.names.map(toNamespace),
          ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
      }
      function enabled(name) {
        if (name[name.length - 1] === "*") {
          return true;
        }
        let i;
        let len;
        for (i = 0, len = createDebug.skips.length; i < len; i++) {
          if (createDebug.skips[i].test(name)) {
            return false;
          }
        }
        for (i = 0, len = createDebug.names.length; i < len; i++) {
          if (createDebug.names[i].test(name)) {
            return true;
          }
        }
        return false;
      }
      function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    module.exports = setup;
  }
});

// ../../node_modules/.pnpm/debug@4.3.2/node_modules/debug/src/browser.js
var require_browser = __commonJS({
  "../../node_modules/.pnpm/debug@4.3.2/node_modules/debug/src/browser.js"(exports, module) {
    init_esm();
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = /* @__PURE__ */ (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index++;
        if (match === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports.storage.setItem("debug", namespaces);
        } else {
          exports.storage.removeItem("debug");
        }
      } catch (error) {
      }
    }
    function load() {
      let r;
      try {
        r = exports.storage.getItem("debug");
      } catch (error) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error) {
      }
    }
    module.exports = require_common()(exports);
    var { formatters } = module.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
      }
    };
  }
});

// ../../node_modules/.pnpm/supports-color@9.4.0/node_modules/supports-color/index.js
var supports_color_exports = {};
__export(supports_color_exports, {
  createSupportsColor: () => createSupportsColor,
  default: () => supports_color_default
});
import process2 from "node:process";
import os from "node:os";
import tty from "node:tty";
function hasFlag(flag, argv = globalThis.Deno ? globalThis.Deno.args : process2.argv) {
  const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
  const position = argv.indexOf(prefix + flag);
  const terminatorPosition = argv.indexOf("--");
  return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
}
function envForceColor() {
  if ("FORCE_COLOR" in env) {
    if (env.FORCE_COLOR === "true") {
      return 1;
    }
    if (env.FORCE_COLOR === "false") {
      return 0;
    }
    return env.FORCE_COLOR.length === 0 ? 1 : Math.min(Number.parseInt(env.FORCE_COLOR, 10), 3);
  }
}
function translateLevel(level) {
  if (level === 0) {
    return false;
  }
  return {
    level,
    hasBasic: true,
    has256: level >= 2,
    has16m: level >= 3
  };
}
function _supportsColor(haveStream, { streamIsTTY, sniffFlags = true } = {}) {
  const noFlagForceColor = envForceColor();
  if (noFlagForceColor !== void 0) {
    flagForceColor = noFlagForceColor;
  }
  const forceColor = sniffFlags ? flagForceColor : noFlagForceColor;
  if (forceColor === 0) {
    return 0;
  }
  if (sniffFlags) {
    if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
      return 3;
    }
    if (hasFlag("color=256")) {
      return 2;
    }
  }
  if ("TF_BUILD" in env && "AGENT_NAME" in env) {
    return 1;
  }
  if (haveStream && !streamIsTTY && forceColor === void 0) {
    return 0;
  }
  const min = forceColor || 0;
  if (env.TERM === "dumb") {
    return min;
  }
  if (process2.platform === "win32") {
    const osRelease = os.release().split(".");
    if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
      return Number(osRelease[2]) >= 14931 ? 3 : 2;
    }
    return 1;
  }
  if ("CI" in env) {
    if ("GITHUB_ACTIONS" in env || "GITEA_ACTIONS" in env) {
      return 3;
    }
    if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "BUILDKITE", "DRONE"].some((sign) => sign in env) || env.CI_NAME === "codeship") {
      return 1;
    }
    return min;
  }
  if ("TEAMCITY_VERSION" in env) {
    return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
  }
  if (env.COLORTERM === "truecolor") {
    return 3;
  }
  if (env.TERM === "xterm-kitty") {
    return 3;
  }
  if ("TERM_PROGRAM" in env) {
    const version = Number.parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
    switch (env.TERM_PROGRAM) {
      case "iTerm.app": {
        return version >= 3 ? 3 : 2;
      }
      case "Apple_Terminal": {
        return 2;
      }
    }
  }
  if (/-256(color)?$/i.test(env.TERM)) {
    return 2;
  }
  if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
    return 1;
  }
  if ("COLORTERM" in env) {
    return 1;
  }
  return min;
}
function createSupportsColor(stream, options = {}) {
  const level = _supportsColor(stream, {
    streamIsTTY: stream && stream.isTTY,
    ...options
  });
  return translateLevel(level);
}
var env, flagForceColor, supportsColor, supports_color_default;
var init_supports_color = __esm({
  "../../node_modules/.pnpm/supports-color@9.4.0/node_modules/supports-color/index.js"() {
    init_esm();
    ({ env } = process2);
    if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) {
      flagForceColor = 0;
    } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
      flagForceColor = 1;
    }
    supportsColor = {
      stdout: createSupportsColor({ isTTY: tty.isatty(1) }),
      stderr: createSupportsColor({ isTTY: tty.isatty(2) })
    };
    supports_color_default = supportsColor;
  }
});

// ../../node_modules/.pnpm/debug@4.3.2/node_modules/debug/src/node.js
var require_node = __commonJS({
  "../../node_modules/.pnpm/debug@4.3.2/node_modules/debug/src/node.js"(exports, module) {
    init_esm();
    var tty2 = __require("tty");
    var util = __require("util");
    exports.init = init;
    exports.log = log;
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.destroy = util.deprecate(
      () => {
      },
      "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
    );
    exports.colors = [6, 2, 3, 4, 5, 1];
    try {
      const supportsColor2 = (init_supports_color(), __toCommonJS(supports_color_exports));
      if (supportsColor2 && (supportsColor2.stderr || supportsColor2).level >= 2) {
        exports.colors = [
          20,
          21,
          26,
          27,
          32,
          33,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          56,
          57,
          62,
          63,
          68,
          69,
          74,
          75,
          76,
          77,
          78,
          79,
          80,
          81,
          92,
          93,
          98,
          99,
          112,
          113,
          128,
          129,
          134,
          135,
          148,
          149,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          178,
          179,
          184,
          185,
          196,
          197,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          209,
          214,
          215,
          220,
          221
        ];
      }
    } catch (error) {
    }
    exports.inspectOpts = Object.keys(process.env).filter((key) => {
      return /^debug_/i.test(key);
    }).reduce((obj, key) => {
      const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => {
        return k.toUpperCase();
      });
      let val = process.env[key];
      if (/^(yes|on|true|enabled)$/i.test(val)) {
        val = true;
      } else if (/^(no|off|false|disabled)$/i.test(val)) {
        val = false;
      } else if (val === "null") {
        val = null;
      } else {
        val = Number(val);
      }
      obj[prop] = val;
      return obj;
    }, {});
    function useColors() {
      return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty2.isatty(process.stderr.fd);
    }
    function formatArgs(args) {
      const { namespace: name, useColors: useColors2 } = this;
      if (useColors2) {
        const c = this.color;
        const colorCode = "\x1B[3" + (c < 8 ? c : "8;5;" + c);
        const prefix = `  ${colorCode};1m${name} \x1B[0m`;
        args[0] = prefix + args[0].split("\n").join("\n" + prefix);
        args.push(colorCode + "m+" + module.exports.humanize(this.diff) + "\x1B[0m");
      } else {
        args[0] = getDate() + name + " " + args[0];
      }
    }
    function getDate() {
      if (exports.inspectOpts.hideDate) {
        return "";
      }
      return (/* @__PURE__ */ new Date()).toISOString() + " ";
    }
    function log(...args) {
      return process.stderr.write(util.format(...args) + "\n");
    }
    function save(namespaces) {
      if (namespaces) {
        process.env.DEBUG = namespaces;
      } else {
        delete process.env.DEBUG;
      }
    }
    function load() {
      return process.env.DEBUG;
    }
    function init(debug) {
      debug.inspectOpts = {};
      const keys = Object.keys(exports.inspectOpts);
      for (let i = 0; i < keys.length; i++) {
        debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
      }
    }
    module.exports = require_common()(exports);
    var { formatters } = module.exports;
    formatters.o = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts).split("\n").map((str) => str.trim()).join(" ");
    };
    formatters.O = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts);
    };
  }
});

// ../../node_modules/.pnpm/debug@4.3.2/node_modules/debug/src/index.js
var require_src = __commonJS({
  "../../node_modules/.pnpm/debug@4.3.2/node_modules/debug/src/index.js"(exports, module) {
    init_esm();
    if (typeof process === "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs) {
      module.exports = require_browser();
    } else {
      module.exports = require_node();
    }
  }
});

// ../../node_modules/.pnpm/follow-redirects@1.15.9_debug@4.3.2/node_modules/follow-redirects/debug.js
var require_debug = __commonJS({
  "../../node_modules/.pnpm/follow-redirects@1.15.9_debug@4.3.2/node_modules/follow-redirects/debug.js"(exports, module) {
    init_esm();
    var debug;
    module.exports = function() {
      if (!debug) {
        try {
          debug = require_src()("follow-redirects");
        } catch (error) {
        }
        if (typeof debug !== "function") {
          debug = function() {
          };
        }
      }
      debug.apply(null, arguments);
    };
  }
});

// ../../node_modules/.pnpm/follow-redirects@1.15.9_debug@4.3.2/node_modules/follow-redirects/index.js
var require_follow_redirects = __commonJS({
  "../../node_modules/.pnpm/follow-redirects@1.15.9_debug@4.3.2/node_modules/follow-redirects/index.js"(exports, module) {
    init_esm();
    var url = __require("url");
    var URL2 = url.URL;
    var http = __require("http");
    var https = __require("https");
    var Writable = __require("stream").Writable;
    var assert = __require("assert");
    var debug = require_debug();
    (function detectUnsupportedEnvironment() {
      var looksLikeNode = typeof process !== "undefined";
      var looksLikeBrowser = typeof window !== "undefined" && typeof document !== "undefined";
      var looksLikeV8 = isFunction(Error.captureStackTrace);
      if (!looksLikeNode && (looksLikeBrowser || !looksLikeV8)) {
        console.warn("The follow-redirects package should be excluded from browser builds.");
      }
    })();
    var useNativeURL = false;
    try {
      assert(new URL2(""));
    } catch (error) {
      useNativeURL = error.code === "ERR_INVALID_URL";
    }
    var preservedUrlFields = [
      "auth",
      "host",
      "hostname",
      "href",
      "path",
      "pathname",
      "port",
      "protocol",
      "query",
      "search",
      "hash"
    ];
    var events = ["abort", "aborted", "connect", "error", "socket", "timeout"];
    var eventHandlers = /* @__PURE__ */ Object.create(null);
    events.forEach(function(event) {
      eventHandlers[event] = function(arg1, arg2, arg3) {
        this._redirectable.emit(event, arg1, arg2, arg3);
      };
    });
    var InvalidUrlError = createErrorType(
      "ERR_INVALID_URL",
      "Invalid URL",
      TypeError
    );
    var RedirectionError = createErrorType(
      "ERR_FR_REDIRECTION_FAILURE",
      "Redirected request failed"
    );
    var TooManyRedirectsError = createErrorType(
      "ERR_FR_TOO_MANY_REDIRECTS",
      "Maximum number of redirects exceeded",
      RedirectionError
    );
    var MaxBodyLengthExceededError = createErrorType(
      "ERR_FR_MAX_BODY_LENGTH_EXCEEDED",
      "Request body larger than maxBodyLength limit"
    );
    var WriteAfterEndError = createErrorType(
      "ERR_STREAM_WRITE_AFTER_END",
      "write after end"
    );
    var destroy = Writable.prototype.destroy || noop;
    function RedirectableRequest(options, responseCallback) {
      Writable.call(this);
      this._sanitizeOptions(options);
      this._options = options;
      this._ended = false;
      this._ending = false;
      this._redirectCount = 0;
      this._redirects = [];
      this._requestBodyLength = 0;
      this._requestBodyBuffers = [];
      if (responseCallback) {
        this.on("response", responseCallback);
      }
      var self2 = this;
      this._onNativeResponse = function(response) {
        try {
          self2._processResponse(response);
        } catch (cause) {
          self2.emit("error", cause instanceof RedirectionError ? cause : new RedirectionError({ cause }));
        }
      };
      this._performRequest();
    }
    RedirectableRequest.prototype = Object.create(Writable.prototype);
    RedirectableRequest.prototype.abort = function() {
      destroyRequest(this._currentRequest);
      this._currentRequest.abort();
      this.emit("abort");
    };
    RedirectableRequest.prototype.destroy = function(error) {
      destroyRequest(this._currentRequest, error);
      destroy.call(this, error);
      return this;
    };
    RedirectableRequest.prototype.write = function(data, encoding, callback) {
      if (this._ending) {
        throw new WriteAfterEndError();
      }
      if (!isString(data) && !isBuffer(data)) {
        throw new TypeError("data should be a string, Buffer or Uint8Array");
      }
      if (isFunction(encoding)) {
        callback = encoding;
        encoding = null;
      }
      if (data.length === 0) {
        if (callback) {
          callback();
        }
        return;
      }
      if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
        this._requestBodyLength += data.length;
        this._requestBodyBuffers.push({ data, encoding });
        this._currentRequest.write(data, encoding, callback);
      } else {
        this.emit("error", new MaxBodyLengthExceededError());
        this.abort();
      }
    };
    RedirectableRequest.prototype.end = function(data, encoding, callback) {
      if (isFunction(data)) {
        callback = data;
        data = encoding = null;
      } else if (isFunction(encoding)) {
        callback = encoding;
        encoding = null;
      }
      if (!data) {
        this._ended = this._ending = true;
        this._currentRequest.end(null, null, callback);
      } else {
        var self2 = this;
        var currentRequest = this._currentRequest;
        this.write(data, encoding, function() {
          self2._ended = true;
          currentRequest.end(null, null, callback);
        });
        this._ending = true;
      }
    };
    RedirectableRequest.prototype.setHeader = function(name, value) {
      this._options.headers[name] = value;
      this._currentRequest.setHeader(name, value);
    };
    RedirectableRequest.prototype.removeHeader = function(name) {
      delete this._options.headers[name];
      this._currentRequest.removeHeader(name);
    };
    RedirectableRequest.prototype.setTimeout = function(msecs, callback) {
      var self2 = this;
      function destroyOnTimeout(socket) {
        socket.setTimeout(msecs);
        socket.removeListener("timeout", socket.destroy);
        socket.addListener("timeout", socket.destroy);
      }
      function startTimer(socket) {
        if (self2._timeout) {
          clearTimeout(self2._timeout);
        }
        self2._timeout = setTimeout(function() {
          self2.emit("timeout");
          clearTimer();
        }, msecs);
        destroyOnTimeout(socket);
      }
      function clearTimer() {
        if (self2._timeout) {
          clearTimeout(self2._timeout);
          self2._timeout = null;
        }
        self2.removeListener("abort", clearTimer);
        self2.removeListener("error", clearTimer);
        self2.removeListener("response", clearTimer);
        self2.removeListener("close", clearTimer);
        if (callback) {
          self2.removeListener("timeout", callback);
        }
        if (!self2.socket) {
          self2._currentRequest.removeListener("socket", startTimer);
        }
      }
      if (callback) {
        this.on("timeout", callback);
      }
      if (this.socket) {
        startTimer(this.socket);
      } else {
        this._currentRequest.once("socket", startTimer);
      }
      this.on("socket", destroyOnTimeout);
      this.on("abort", clearTimer);
      this.on("error", clearTimer);
      this.on("response", clearTimer);
      this.on("close", clearTimer);
      return this;
    };
    [
      "flushHeaders",
      "getHeader",
      "setNoDelay",
      "setSocketKeepAlive"
    ].forEach(function(method) {
      RedirectableRequest.prototype[method] = function(a, b) {
        return this._currentRequest[method](a, b);
      };
    });
    ["aborted", "connection", "socket"].forEach(function(property) {
      Object.defineProperty(RedirectableRequest.prototype, property, {
        get: function() {
          return this._currentRequest[property];
        }
      });
    });
    RedirectableRequest.prototype._sanitizeOptions = function(options) {
      if (!options.headers) {
        options.headers = {};
      }
      if (options.host) {
        if (!options.hostname) {
          options.hostname = options.host;
        }
        delete options.host;
      }
      if (!options.pathname && options.path) {
        var searchPos = options.path.indexOf("?");
        if (searchPos < 0) {
          options.pathname = options.path;
        } else {
          options.pathname = options.path.substring(0, searchPos);
          options.search = options.path.substring(searchPos);
        }
      }
    };
    RedirectableRequest.prototype._performRequest = function() {
      var protocol = this._options.protocol;
      var nativeProtocol = this._options.nativeProtocols[protocol];
      if (!nativeProtocol) {
        throw new TypeError("Unsupported protocol " + protocol);
      }
      if (this._options.agents) {
        var scheme = protocol.slice(0, -1);
        this._options.agent = this._options.agents[scheme];
      }
      var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);
      request._redirectable = this;
      for (var event of events) {
        request.on(event, eventHandlers[event]);
      }
      this._currentUrl = /^\//.test(this._options.path) ? url.format(this._options) : (
        // When making a request to a proxy, […]
        // a client MUST send the target URI in absolute-form […].
        this._options.path
      );
      if (this._isRedirect) {
        var i = 0;
        var self2 = this;
        var buffers = this._requestBodyBuffers;
        (function writeNext(error) {
          if (request === self2._currentRequest) {
            if (error) {
              self2.emit("error", error);
            } else if (i < buffers.length) {
              var buffer = buffers[i++];
              if (!request.finished) {
                request.write(buffer.data, buffer.encoding, writeNext);
              }
            } else if (self2._ended) {
              request.end();
            }
          }
        })();
      }
    };
    RedirectableRequest.prototype._processResponse = function(response) {
      var statusCode = response.statusCode;
      if (this._options.trackRedirects) {
        this._redirects.push({
          url: this._currentUrl,
          headers: response.headers,
          statusCode
        });
      }
      var location = response.headers.location;
      if (!location || this._options.followRedirects === false || statusCode < 300 || statusCode >= 400) {
        response.responseUrl = this._currentUrl;
        response.redirects = this._redirects;
        this.emit("response", response);
        this._requestBodyBuffers = [];
        return;
      }
      destroyRequest(this._currentRequest);
      response.destroy();
      if (++this._redirectCount > this._options.maxRedirects) {
        throw new TooManyRedirectsError();
      }
      var requestHeaders;
      var beforeRedirect = this._options.beforeRedirect;
      if (beforeRedirect) {
        requestHeaders = Object.assign({
          // The Host header was set by nativeProtocol.request
          Host: response.req.getHeader("host")
        }, this._options.headers);
      }
      var method = this._options.method;
      if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" || // RFC7231§6.4.4: The 303 (See Other) status code indicates that
      // the server is redirecting the user agent to a different resource […]
      // A user agent can perform a retrieval request targeting that URI
      // (a GET or HEAD request if using HTTP) […]
      statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method)) {
        this._options.method = "GET";
        this._requestBodyBuffers = [];
        removeMatchingHeaders(/^content-/i, this._options.headers);
      }
      var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);
      var currentUrlParts = parseUrl(this._currentUrl);
      var currentHost = currentHostHeader || currentUrlParts.host;
      var currentUrl = /^\w+:/.test(location) ? this._currentUrl : url.format(Object.assign(currentUrlParts, { host: currentHost }));
      var redirectUrl = resolveUrl(location, currentUrl);
      debug("redirecting to", redirectUrl.href);
      this._isRedirect = true;
      spreadUrlObject(redirectUrl, this._options);
      if (redirectUrl.protocol !== currentUrlParts.protocol && redirectUrl.protocol !== "https:" || redirectUrl.host !== currentHost && !isSubdomain(redirectUrl.host, currentHost)) {
        removeMatchingHeaders(/^(?:(?:proxy-)?authorization|cookie)$/i, this._options.headers);
      }
      if (isFunction(beforeRedirect)) {
        var responseDetails = {
          headers: response.headers,
          statusCode
        };
        var requestDetails = {
          url: currentUrl,
          method,
          headers: requestHeaders
        };
        beforeRedirect(this._options, responseDetails, requestDetails);
        this._sanitizeOptions(this._options);
      }
      this._performRequest();
    };
    function wrap(protocols) {
      var exports2 = {
        maxRedirects: 21,
        maxBodyLength: 10 * 1024 * 1024
      };
      var nativeProtocols = {};
      Object.keys(protocols).forEach(function(scheme) {
        var protocol = scheme + ":";
        var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
        var wrappedProtocol = exports2[scheme] = Object.create(nativeProtocol);
        function request(input, options, callback) {
          if (isURL(input)) {
            input = spreadUrlObject(input);
          } else if (isString(input)) {
            input = spreadUrlObject(parseUrl(input));
          } else {
            callback = options;
            options = validateUrl(input);
            input = { protocol };
          }
          if (isFunction(options)) {
            callback = options;
            options = null;
          }
          options = Object.assign({
            maxRedirects: exports2.maxRedirects,
            maxBodyLength: exports2.maxBodyLength
          }, input, options);
          options.nativeProtocols = nativeProtocols;
          if (!isString(options.host) && !isString(options.hostname)) {
            options.hostname = "::1";
          }
          assert.equal(options.protocol, protocol, "protocol mismatch");
          debug("options", options);
          return new RedirectableRequest(options, callback);
        }
        function get(input, options, callback) {
          var wrappedRequest = wrappedProtocol.request(input, options, callback);
          wrappedRequest.end();
          return wrappedRequest;
        }
        Object.defineProperties(wrappedProtocol, {
          request: { value: request, configurable: true, enumerable: true, writable: true },
          get: { value: get, configurable: true, enumerable: true, writable: true }
        });
      });
      return exports2;
    }
    function noop() {
    }
    function parseUrl(input) {
      var parsed;
      if (useNativeURL) {
        parsed = new URL2(input);
      } else {
        parsed = validateUrl(url.parse(input));
        if (!isString(parsed.protocol)) {
          throw new InvalidUrlError({ input });
        }
      }
      return parsed;
    }
    function resolveUrl(relative, base) {
      return useNativeURL ? new URL2(relative, base) : parseUrl(url.resolve(base, relative));
    }
    function validateUrl(input) {
      if (/^\[/.test(input.hostname) && !/^\[[:0-9a-f]+\]$/i.test(input.hostname)) {
        throw new InvalidUrlError({ input: input.href || input });
      }
      if (/^\[/.test(input.host) && !/^\[[:0-9a-f]+\](:\d+)?$/i.test(input.host)) {
        throw new InvalidUrlError({ input: input.href || input });
      }
      return input;
    }
    function spreadUrlObject(urlObject, target) {
      var spread = target || {};
      for (var key of preservedUrlFields) {
        spread[key] = urlObject[key];
      }
      if (spread.hostname.startsWith("[")) {
        spread.hostname = spread.hostname.slice(1, -1);
      }
      if (spread.port !== "") {
        spread.port = Number(spread.port);
      }
      spread.path = spread.search ? spread.pathname + spread.search : spread.pathname;
      return spread;
    }
    function removeMatchingHeaders(regex, headers) {
      var lastValue;
      for (var header in headers) {
        if (regex.test(header)) {
          lastValue = headers[header];
          delete headers[header];
        }
      }
      return lastValue === null || typeof lastValue === "undefined" ? void 0 : String(lastValue).trim();
    }
    function createErrorType(code, message, baseClass) {
      function CustomError(properties) {
        if (isFunction(Error.captureStackTrace)) {
          Error.captureStackTrace(this, this.constructor);
        }
        Object.assign(this, properties || {});
        this.code = code;
        this.message = this.cause ? message + ": " + this.cause.message : message;
      }
      CustomError.prototype = new (baseClass || Error)();
      Object.defineProperties(CustomError.prototype, {
        constructor: {
          value: CustomError,
          enumerable: false
        },
        name: {
          value: "Error [" + code + "]",
          enumerable: false
        }
      });
      return CustomError;
    }
    function destroyRequest(request, error) {
      for (var event of events) {
        request.removeListener(event, eventHandlers[event]);
      }
      request.on("error", noop);
      request.destroy(error);
    }
    function isSubdomain(subdomain, domain) {
      assert(isString(subdomain) && isString(domain));
      var dot = subdomain.length - domain.length - 1;
      return dot > 0 && subdomain[dot] === "." && subdomain.endsWith(domain);
    }
    function isString(value) {
      return typeof value === "string" || value instanceof String;
    }
    function isFunction(value) {
      return typeof value === "function";
    }
    function isBuffer(value) {
      return typeof value === "object" && "length" in value;
    }
    function isURL(value) {
      return URL2 && value instanceof URL2;
    }
    module.exports = wrap({ http, https });
    module.exports.wrap = wrap;
  }
});

// ../../node_modules/.pnpm/axios@1.8.1/node_modules/axios/dist/node/axios.cjs
var require_axios = __commonJS({
  "../../node_modules/.pnpm/axios@1.8.1/node_modules/axios/dist/node/axios.cjs"(exports, module) {
    "use strict";
    init_esm();
    var FormData$1 = require_form_data();
    var crypto = __require("crypto");
    var url = __require("url");
    var proxyFromEnv = require_proxy_from_env();
    var http = __require("http");
    var https = __require("https");
    var util = __require("util");
    var followRedirects = require_follow_redirects();
    var zlib = __require("zlib");
    var stream = __require("stream");
    var events = __require("events");
    function _interopDefaultLegacy(e) {
      return e && typeof e === "object" && "default" in e ? e : { "default": e };
    }
    var FormData__default = /* @__PURE__ */ _interopDefaultLegacy(FormData$1);
    var crypto__default = /* @__PURE__ */ _interopDefaultLegacy(crypto);
    var url__default = /* @__PURE__ */ _interopDefaultLegacy(url);
    var proxyFromEnv__default = /* @__PURE__ */ _interopDefaultLegacy(proxyFromEnv);
    var http__default = /* @__PURE__ */ _interopDefaultLegacy(http);
    var https__default = /* @__PURE__ */ _interopDefaultLegacy(https);
    var util__default = /* @__PURE__ */ _interopDefaultLegacy(util);
    var followRedirects__default = /* @__PURE__ */ _interopDefaultLegacy(followRedirects);
    var zlib__default = /* @__PURE__ */ _interopDefaultLegacy(zlib);
    var stream__default = /* @__PURE__ */ _interopDefaultLegacy(stream);
    function bind(fn, thisArg) {
      return function wrap() {
        return fn.apply(thisArg, arguments);
      };
    }
    var { toString } = Object.prototype;
    var { getPrototypeOf } = Object;
    var kindOf = /* @__PURE__ */ ((cache) => (thing) => {
      const str = toString.call(thing);
      return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    })(/* @__PURE__ */ Object.create(null));
    var kindOfTest = (type) => {
      type = type.toLowerCase();
      return (thing) => kindOf(thing) === type;
    };
    var typeOfTest = (type) => (thing) => typeof thing === type;
    var { isArray } = Array;
    var isUndefined = typeOfTest("undefined");
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
    }
    var isArrayBuffer = kindOfTest("ArrayBuffer");
    function isArrayBufferView(val) {
      let result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && isArrayBuffer(val.buffer);
      }
      return result;
    }
    var isString = typeOfTest("string");
    var isFunction = typeOfTest("function");
    var isNumber = typeOfTest("number");
    var isObject = (thing) => thing !== null && typeof thing === "object";
    var isBoolean = (thing) => thing === true || thing === false;
    var isPlainObject = (val) => {
      if (kindOf(val) !== "object") {
        return false;
      }
      const prototype2 = getPrototypeOf(val);
      return (prototype2 === null || prototype2 === Object.prototype || Object.getPrototypeOf(prototype2) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
    };
    var isDate = kindOfTest("Date");
    var isFile = kindOfTest("File");
    var isBlob = kindOfTest("Blob");
    var isFileList = kindOfTest("FileList");
    var isStream = (val) => isObject(val) && isFunction(val.pipe);
    var isFormData = (thing) => {
      let kind;
      return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
      kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
    };
    var isURLSearchParams = kindOfTest("URLSearchParams");
    var [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
    var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
    function forEach(obj, fn, { allOwnKeys = false } = {}) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      let i;
      let l;
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
        const len = keys.length;
        let key;
        for (i = 0; i < len; i++) {
          key = keys[i];
          fn.call(null, obj[key], key, obj);
        }
      }
    }
    function findKey(obj, key) {
      key = key.toLowerCase();
      const keys = Object.keys(obj);
      let i = keys.length;
      let _key;
      while (i-- > 0) {
        _key = keys[i];
        if (key === _key.toLowerCase()) {
          return _key;
        }
      }
      return null;
    }
    var _global = (() => {
      if (typeof globalThis !== "undefined") return globalThis;
      return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
    })();
    var isContextDefined = (context) => !isUndefined(context) && context !== _global;
    function merge() {
      const { caseless } = isContextDefined(this) && this || {};
      const result = {};
      const assignValue = (val, key) => {
        const targetKey = caseless && findKey(result, key) || key;
        if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
          result[targetKey] = merge(result[targetKey], val);
        } else if (isPlainObject(val)) {
          result[targetKey] = merge({}, val);
        } else if (isArray(val)) {
          result[targetKey] = val.slice();
        } else {
          result[targetKey] = val;
        }
      };
      for (let i = 0, l = arguments.length; i < l; i++) {
        arguments[i] && forEach(arguments[i], assignValue);
      }
      return result;
    }
    var extend = (a, b, thisArg, { allOwnKeys } = {}) => {
      forEach(b, (val, key) => {
        if (thisArg && isFunction(val)) {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      }, { allOwnKeys });
      return a;
    };
    var stripBOM = (content) => {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    };
    var inherits = (constructor, superConstructor, props, descriptors2) => {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
      constructor.prototype.constructor = constructor;
      Object.defineProperty(constructor, "super", {
        value: superConstructor.prototype
      });
      props && Object.assign(constructor.prototype, props);
    };
    var toFlatObject = (sourceObj, destObj, filter, propFilter) => {
      let props;
      let i;
      let prop;
      const merged = {};
      destObj = destObj || {};
      if (sourceObj == null) return destObj;
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = filter !== false && getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    };
    var endsWith = (str, searchString, position) => {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      const lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };
    var toArray = (thing) => {
      if (!thing) return null;
      if (isArray(thing)) return thing;
      let i = thing.length;
      if (!isNumber(i)) return null;
      const arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    };
    var isTypedArray = /* @__PURE__ */ ((TypedArray) => {
      return (thing) => {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
    var forEachEntry = (obj, fn) => {
      const generator = obj && obj[Symbol.iterator];
      const iterator = generator.call(obj);
      let result;
      while ((result = iterator.next()) && !result.done) {
        const pair = result.value;
        fn.call(obj, pair[0], pair[1]);
      }
    };
    var matchAll = (regExp, str) => {
      let matches;
      const arr = [];
      while ((matches = regExp.exec(str)) !== null) {
        arr.push(matches);
      }
      return arr;
    };
    var isHTMLForm = kindOfTest("HTMLFormElement");
    var toCamelCase = (str) => {
      return str.toLowerCase().replace(
        /[-_\s]([a-z\d])(\w*)/g,
        function replacer(m, p1, p2) {
          return p1.toUpperCase() + p2;
        }
      );
    };
    var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
    var isRegExp = kindOfTest("RegExp");
    var reduceDescriptors = (obj, reducer) => {
      const descriptors2 = Object.getOwnPropertyDescriptors(obj);
      const reducedDescriptors = {};
      forEach(descriptors2, (descriptor, name) => {
        let ret;
        if ((ret = reducer(descriptor, name, obj)) !== false) {
          reducedDescriptors[name] = ret || descriptor;
        }
      });
      Object.defineProperties(obj, reducedDescriptors);
    };
    var freezeMethods = (obj) => {
      reduceDescriptors(obj, (descriptor, name) => {
        if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
          return false;
        }
        const value = obj[name];
        if (!isFunction(value)) return;
        descriptor.enumerable = false;
        if ("writable" in descriptor) {
          descriptor.writable = false;
          return;
        }
        if (!descriptor.set) {
          descriptor.set = () => {
            throw Error("Can not rewrite read-only method '" + name + "'");
          };
        }
      });
    };
    var toObjectSet = (arrayOrString, delimiter) => {
      const obj = {};
      const define = (arr) => {
        arr.forEach((value) => {
          obj[value] = true;
        });
      };
      isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
      return obj;
    };
    var noop = () => {
    };
    var toFiniteNumber = (value, defaultValue) => {
      return value != null && Number.isFinite(value = +value) ? value : defaultValue;
    };
    function isSpecCompliantForm(thing) {
      return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
    }
    var toJSONObject = (obj) => {
      const stack = new Array(10);
      const visit = (source, i) => {
        if (isObject(source)) {
          if (stack.indexOf(source) >= 0) {
            return;
          }
          if (!("toJSON" in source)) {
            stack[i] = source;
            const target = isArray(source) ? [] : {};
            forEach(source, (value, key) => {
              const reducedValue = visit(value, i + 1);
              !isUndefined(reducedValue) && (target[key] = reducedValue);
            });
            stack[i] = void 0;
            return target;
          }
        }
        return source;
      };
      return visit(obj, 0);
    };
    var isAsyncFn = kindOfTest("AsyncFunction");
    var isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
    var _setImmediate = ((setImmediateSupported, postMessageSupported) => {
      if (setImmediateSupported) {
        return setImmediate;
      }
      return postMessageSupported ? ((token, callbacks) => {
        _global.addEventListener("message", ({ source, data }) => {
          if (source === _global && data === token) {
            callbacks.length && callbacks.shift()();
          }
        }, false);
        return (cb) => {
          callbacks.push(cb);
          _global.postMessage(token, "*");
        };
      })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
    })(
      typeof setImmediate === "function",
      isFunction(_global.postMessage)
    );
    var asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;
    var utils$1 = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isBoolean,
      isObject,
      isPlainObject,
      isReadableStream,
      isRequest,
      isResponse,
      isHeaders,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isRegExp,
      isFunction,
      isStream,
      isURLSearchParams,
      isTypedArray,
      isFileList,
      forEach,
      merge,
      extend,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray,
      forEachEntry,
      matchAll,
      isHTMLForm,
      hasOwnProperty,
      hasOwnProp: hasOwnProperty,
      // an alias to avoid ESLint no-prototype-builtins detection
      reduceDescriptors,
      freezeMethods,
      toObjectSet,
      toCamelCase,
      noop,
      toFiniteNumber,
      findKey,
      global: _global,
      isContextDefined,
      isSpecCompliantForm,
      toJSONObject,
      isAsyncFn,
      isThenable,
      setImmediate: _setImmediate,
      asap
    };
    function AxiosError(message, code, config, request, response) {
      Error.call(this);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error().stack;
      }
      this.message = message;
      this.name = "AxiosError";
      code && (this.code = code);
      config && (this.config = config);
      request && (this.request = request);
      if (response) {
        this.response = response;
        this.status = response.status ? response.status : null;
      }
    }
    utils$1.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: utils$1.toJSONObject(this.config),
          code: this.code,
          status: this.status
        };
      }
    });
    var prototype$1 = AxiosError.prototype;
    var descriptors = {};
    [
      "ERR_BAD_OPTION_VALUE",
      "ERR_BAD_OPTION",
      "ECONNABORTED",
      "ETIMEDOUT",
      "ERR_NETWORK",
      "ERR_FR_TOO_MANY_REDIRECTS",
      "ERR_DEPRECATED",
      "ERR_BAD_RESPONSE",
      "ERR_BAD_REQUEST",
      "ERR_CANCELED",
      "ERR_NOT_SUPPORT",
      "ERR_INVALID_URL"
      // eslint-disable-next-line func-names
    ].forEach((code) => {
      descriptors[code] = { value: code };
    });
    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype$1, "isAxiosError", { value: true });
    AxiosError.from = (error, code, config, request, response, customProps) => {
      const axiosError = Object.create(prototype$1);
      utils$1.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
      }, (prop) => {
        return prop !== "isAxiosError";
      });
      AxiosError.call(axiosError, error.message, code, config, request, response);
      axiosError.cause = error;
      axiosError.name = error.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    function isVisitable(thing) {
      return utils$1.isPlainObject(thing) || utils$1.isArray(thing);
    }
    function removeBrackets(key) {
      return utils$1.endsWith(key, "[]") ? key.slice(0, -2) : key;
    }
    function renderKey(path, key, dots) {
      if (!path) return key;
      return path.concat(key).map(function each(token, i) {
        token = removeBrackets(token);
        return !dots && i ? "[" + token + "]" : token;
      }).join(dots ? "." : "");
    }
    function isFlatArray(arr) {
      return utils$1.isArray(arr) && !arr.some(isVisitable);
    }
    var predicates = utils$1.toFlatObject(utils$1, {}, null, function filter(prop) {
      return /^is[A-Z]/.test(prop);
    });
    function toFormData(obj, formData, options) {
      if (!utils$1.isObject(obj)) {
        throw new TypeError("target must be an object");
      }
      formData = formData || new (FormData__default["default"] || FormData)();
      options = utils$1.toFlatObject(options, {
        metaTokens: true,
        dots: false,
        indexes: false
      }, false, function defined(option, source) {
        return !utils$1.isUndefined(source[option]);
      });
      const metaTokens = options.metaTokens;
      const visitor = options.visitor || defaultVisitor;
      const dots = options.dots;
      const indexes = options.indexes;
      const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
      const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);
      if (!utils$1.isFunction(visitor)) {
        throw new TypeError("visitor must be a function");
      }
      function convertValue(value) {
        if (value === null) return "";
        if (utils$1.isDate(value)) {
          return value.toISOString();
        }
        if (!useBlob && utils$1.isBlob(value)) {
          throw new AxiosError("Blob is not supported. Use a Buffer instead.");
        }
        if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {
          return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
        }
        return value;
      }
      function defaultVisitor(value, key, path) {
        let arr = value;
        if (value && !path && typeof value === "object") {
          if (utils$1.endsWith(key, "{}")) {
            key = metaTokens ? key : key.slice(0, -2);
            value = JSON.stringify(value);
          } else if (utils$1.isArray(value) && isFlatArray(value) || (utils$1.isFileList(value) || utils$1.endsWith(key, "[]")) && (arr = utils$1.toArray(value))) {
            key = removeBrackets(key);
            arr.forEach(function each(el, index) {
              !(utils$1.isUndefined(el) || el === null) && formData.append(
                // eslint-disable-next-line no-nested-ternary
                indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
                convertValue(el)
              );
            });
            return false;
          }
        }
        if (isVisitable(value)) {
          return true;
        }
        formData.append(renderKey(path, key, dots), convertValue(value));
        return false;
      }
      const stack = [];
      const exposedHelpers = Object.assign(predicates, {
        defaultVisitor,
        convertValue,
        isVisitable
      });
      function build(value, path) {
        if (utils$1.isUndefined(value)) return;
        if (stack.indexOf(value) !== -1) {
          throw Error("Circular reference detected in " + path.join("."));
        }
        stack.push(value);
        utils$1.forEach(value, function each(el, key) {
          const result = !(utils$1.isUndefined(el) || el === null) && visitor.call(
            formData,
            el,
            utils$1.isString(key) ? key.trim() : key,
            path,
            exposedHelpers
          );
          if (result === true) {
            build(el, path ? path.concat(key) : [key]);
          }
        });
        stack.pop();
      }
      if (!utils$1.isObject(obj)) {
        throw new TypeError("data must be an object");
      }
      build(obj);
      return formData;
    }
    function encode$1(str) {
      const charMap = {
        "!": "%21",
        "'": "%27",
        "(": "%28",
        ")": "%29",
        "~": "%7E",
        "%20": "+",
        "%00": "\0"
      };
      return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
        return charMap[match];
      });
    }
    function AxiosURLSearchParams(params, options) {
      this._pairs = [];
      params && toFormData(params, this, options);
    }
    var prototype = AxiosURLSearchParams.prototype;
    prototype.append = function append(name, value) {
      this._pairs.push([name, value]);
    };
    prototype.toString = function toString2(encoder) {
      const _encode = encoder ? function(value) {
        return encoder.call(this, value, encode$1);
      } : encode$1;
      return this._pairs.map(function each(pair) {
        return _encode(pair[0]) + "=" + _encode(pair[1]);
      }, "").join("&");
    };
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    function buildURL(url2, params, options) {
      if (!params) {
        return url2;
      }
      const _encode = options && options.encode || encode;
      if (utils$1.isFunction(options)) {
        options = {
          serialize: options
        };
      }
      const serializeFn = options && options.serialize;
      let serializedParams;
      if (serializeFn) {
        serializedParams = serializeFn(params, options);
      } else {
        serializedParams = utils$1.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options).toString(_encode);
      }
      if (serializedParams) {
        const hashmarkIndex = url2.indexOf("#");
        if (hashmarkIndex !== -1) {
          url2 = url2.slice(0, hashmarkIndex);
        }
        url2 += (url2.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url2;
    }
    var InterceptorManager = class {
      constructor() {
        this.handlers = [];
      }
      /**
       * Add a new interceptor to the stack
       *
       * @param {Function} fulfilled The function to handle `then` for a `Promise`
       * @param {Function} rejected The function to handle `reject` for a `Promise`
       *
       * @return {Number} An ID used to remove interceptor later
       */
      use(fulfilled, rejected, options) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options ? options.synchronous : false,
          runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
      }
      /**
       * Remove an interceptor from the stack
       *
       * @param {Number} id The ID that was returned by `use`
       *
       * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
       */
      eject(id) {
        if (this.handlers[id]) {
          this.handlers[id] = null;
        }
      }
      /**
       * Clear all interceptors from the stack
       *
       * @returns {void}
       */
      clear() {
        if (this.handlers) {
          this.handlers = [];
        }
      }
      /**
       * Iterate over all the registered interceptors
       *
       * This method is particularly useful for skipping over any
       * interceptors that may have become `null` calling `eject`.
       *
       * @param {Function} fn The function to call for each interceptor
       *
       * @returns {void}
       */
      forEach(fn) {
        utils$1.forEach(this.handlers, function forEachHandler(h) {
          if (h !== null) {
            fn(h);
          }
        });
      }
    };
    var InterceptorManager$1 = InterceptorManager;
    var transitionalDefaults = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
    var URLSearchParams2 = url__default["default"].URLSearchParams;
    var ALPHA = "abcdefghijklmnopqrstuvwxyz";
    var DIGIT = "0123456789";
    var ALPHABET = {
      DIGIT,
      ALPHA,
      ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
    };
    var generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
      let str = "";
      const { length } = alphabet;
      const randomValues = new Uint32Array(size);
      crypto__default["default"].randomFillSync(randomValues);
      for (let i = 0; i < size; i++) {
        str += alphabet[randomValues[i] % length];
      }
      return str;
    };
    var platform$1 = {
      isNode: true,
      classes: {
        URLSearchParams: URLSearchParams2,
        FormData: FormData__default["default"],
        Blob: typeof Blob !== "undefined" && Blob || null
      },
      ALPHABET,
      generateString,
      protocols: ["http", "https", "file", "data"]
    };
    var hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
    var _navigator = typeof navigator === "object" && navigator || void 0;
    var hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || ["ReactNative", "NativeScript", "NS"].indexOf(_navigator.product) < 0);
    var hasStandardBrowserWebWorkerEnv = (() => {
      return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
      self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
    })();
    var origin = hasBrowserEnv && window.location.href || "http://localhost";
    var utils = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      hasBrowserEnv,
      hasStandardBrowserWebWorkerEnv,
      hasStandardBrowserEnv,
      navigator: _navigator,
      origin
    });
    var platform = {
      ...utils,
      ...platform$1
    };
    function toURLEncodedForm(data, options) {
      return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
        visitor: function(value, key, path, helpers) {
          if (platform.isNode && utils$1.isBuffer(value)) {
            this.append(key, value.toString("base64"));
            return false;
          }
          return helpers.defaultVisitor.apply(this, arguments);
        }
      }, options));
    }
    function parsePropPath(name) {
      return utils$1.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
        return match[0] === "[]" ? "" : match[1] || match[0];
      });
    }
    function arrayToObject(arr) {
      const obj = {};
      const keys = Object.keys(arr);
      let i;
      const len = keys.length;
      let key;
      for (i = 0; i < len; i++) {
        key = keys[i];
        obj[key] = arr[key];
      }
      return obj;
    }
    function formDataToJSON(formData) {
      function buildPath(path, value, target, index) {
        let name = path[index++];
        if (name === "__proto__") return true;
        const isNumericKey = Number.isFinite(+name);
        const isLast = index >= path.length;
        name = !name && utils$1.isArray(target) ? target.length : name;
        if (isLast) {
          if (utils$1.hasOwnProp(target, name)) {
            target[name] = [target[name], value];
          } else {
            target[name] = value;
          }
          return !isNumericKey;
        }
        if (!target[name] || !utils$1.isObject(target[name])) {
          target[name] = [];
        }
        const result = buildPath(path, value, target[name], index);
        if (result && utils$1.isArray(target[name])) {
          target[name] = arrayToObject(target[name]);
        }
        return !isNumericKey;
      }
      if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {
        const obj = {};
        utils$1.forEachEntry(formData, (name, value) => {
          buildPath(parsePropPath(name), value, obj, 0);
        });
        return obj;
      }
      return null;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils$1.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils$1.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: transitionalDefaults,
      adapter: ["xhr", "http", "fetch"],
      transformRequest: [function transformRequest(data, headers) {
        const contentType = headers.getContentType() || "";
        const hasJSONContentType = contentType.indexOf("application/json") > -1;
        const isObjectPayload = utils$1.isObject(data);
        if (isObjectPayload && utils$1.isHTMLForm(data)) {
          data = new FormData(data);
        }
        const isFormData2 = utils$1.isFormData(data);
        if (isFormData2) {
          return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
        }
        if (utils$1.isArrayBuffer(data) || utils$1.isBuffer(data) || utils$1.isStream(data) || utils$1.isFile(data) || utils$1.isBlob(data) || utils$1.isReadableStream(data)) {
          return data;
        }
        if (utils$1.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils$1.isURLSearchParams(data)) {
          headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
          return data.toString();
        }
        let isFileList2;
        if (isObjectPayload) {
          if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
            return toURLEncodedForm(data, this.formSerializer).toString();
          }
          if ((isFileList2 = utils$1.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
            const _FormData = this.env && this.env.FormData;
            return toFormData(
              isFileList2 ? { "files[]": data } : data,
              _FormData && new _FormData(),
              this.formSerializer
            );
          }
        }
        if (isObjectPayload || hasJSONContentType) {
          headers.setContentType("application/json", false);
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        const transitional = this.transitional || defaults.transitional;
        const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        const JSONRequested = this.responseType === "json";
        if (utils$1.isResponse(data) || utils$1.isReadableStream(data)) {
          return data;
        }
        if (data && utils$1.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
          const silentJSONParsing = transitional && transitional.silentJSONParsing;
          const strictJSONParsing = !silentJSONParsing && JSONRequested;
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: platform.classes.FormData,
        Blob: platform.classes.Blob
      },
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*",
          "Content-Type": void 0
        }
      }
    };
    utils$1.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
      defaults.headers[method] = {};
    });
    var defaults$1 = defaults;
    var ignoreDuplicateOf = utils$1.toObjectSet([
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ]);
    var parseHeaders = (rawHeaders) => {
      const parsed = {};
      let key;
      let val;
      let i;
      rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
        i = line.indexOf(":");
        key = line.substring(0, i).trim().toLowerCase();
        val = line.substring(i + 1).trim();
        if (!key || parsed[key] && ignoreDuplicateOf[key]) {
          return;
        }
        if (key === "set-cookie") {
          if (parsed[key]) {
            parsed[key].push(val);
          } else {
            parsed[key] = [val];
          }
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
        }
      });
      return parsed;
    };
    var $internals = Symbol("internals");
    function normalizeHeader(header) {
      return header && String(header).trim().toLowerCase();
    }
    function normalizeValue(value) {
      if (value === false || value == null) {
        return value;
      }
      return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);
    }
    function parseTokens(str) {
      const tokens = /* @__PURE__ */ Object.create(null);
      const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
      let match;
      while (match = tokensRE.exec(str)) {
        tokens[match[1]] = match[2];
      }
      return tokens;
    }
    var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
    function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
      if (utils$1.isFunction(filter)) {
        return filter.call(this, value, header);
      }
      if (isHeaderNameFilter) {
        value = header;
      }
      if (!utils$1.isString(value)) return;
      if (utils$1.isString(filter)) {
        return value.indexOf(filter) !== -1;
      }
      if (utils$1.isRegExp(filter)) {
        return filter.test(value);
      }
    }
    function formatHeader(header) {
      return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
        return char.toUpperCase() + str;
      });
    }
    function buildAccessors(obj, header) {
      const accessorName = utils$1.toCamelCase(" " + header);
      ["get", "set", "has"].forEach((methodName) => {
        Object.defineProperty(obj, methodName + accessorName, {
          value: function(arg1, arg2, arg3) {
            return this[methodName].call(this, header, arg1, arg2, arg3);
          },
          configurable: true
        });
      });
    }
    var AxiosHeaders = class {
      constructor(headers) {
        headers && this.set(headers);
      }
      set(header, valueOrRewrite, rewrite) {
        const self2 = this;
        function setHeader(_value, _header, _rewrite) {
          const lHeader = normalizeHeader(_header);
          if (!lHeader) {
            throw new Error("header name must be a non-empty string");
          }
          const key = utils$1.findKey(self2, lHeader);
          if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
            self2[key || _header] = normalizeValue(_value);
          }
        }
        const setHeaders = (headers, _rewrite) => utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
        if (utils$1.isPlainObject(header) || header instanceof this.constructor) {
          setHeaders(header, valueOrRewrite);
        } else if (utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
          setHeaders(parseHeaders(header), valueOrRewrite);
        } else if (utils$1.isHeaders(header)) {
          for (const [key, value] of header.entries()) {
            setHeader(value, key, rewrite);
          }
        } else {
          header != null && setHeader(valueOrRewrite, header, rewrite);
        }
        return this;
      }
      get(header, parser) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils$1.findKey(this, header);
          if (key) {
            const value = this[key];
            if (!parser) {
              return value;
            }
            if (parser === true) {
              return parseTokens(value);
            }
            if (utils$1.isFunction(parser)) {
              return parser.call(this, value, key);
            }
            if (utils$1.isRegExp(parser)) {
              return parser.exec(value);
            }
            throw new TypeError("parser must be boolean|regexp|function");
          }
        }
      }
      has(header, matcher) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils$1.findKey(this, header);
          return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
        }
        return false;
      }
      delete(header, matcher) {
        const self2 = this;
        let deleted = false;
        function deleteHeader(_header) {
          _header = normalizeHeader(_header);
          if (_header) {
            const key = utils$1.findKey(self2, _header);
            if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
              delete self2[key];
              deleted = true;
            }
          }
        }
        if (utils$1.isArray(header)) {
          header.forEach(deleteHeader);
        } else {
          deleteHeader(header);
        }
        return deleted;
      }
      clear(matcher) {
        const keys = Object.keys(this);
        let i = keys.length;
        let deleted = false;
        while (i--) {
          const key = keys[i];
          if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
            delete this[key];
            deleted = true;
          }
        }
        return deleted;
      }
      normalize(format) {
        const self2 = this;
        const headers = {};
        utils$1.forEach(this, (value, header) => {
          const key = utils$1.findKey(headers, header);
          if (key) {
            self2[key] = normalizeValue(value);
            delete self2[header];
            return;
          }
          const normalized = format ? formatHeader(header) : String(header).trim();
          if (normalized !== header) {
            delete self2[header];
          }
          self2[normalized] = normalizeValue(value);
          headers[normalized] = true;
        });
        return this;
      }
      concat(...targets) {
        return this.constructor.concat(this, ...targets);
      }
      toJSON(asStrings) {
        const obj = /* @__PURE__ */ Object.create(null);
        utils$1.forEach(this, (value, header) => {
          value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(", ") : value);
        });
        return obj;
      }
      [Symbol.iterator]() {
        return Object.entries(this.toJSON())[Symbol.iterator]();
      }
      toString() {
        return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
      }
      get [Symbol.toStringTag]() {
        return "AxiosHeaders";
      }
      static from(thing) {
        return thing instanceof this ? thing : new this(thing);
      }
      static concat(first, ...targets) {
        const computed = new this(first);
        targets.forEach((target) => computed.set(target));
        return computed;
      }
      static accessor(header) {
        const internals = this[$internals] = this[$internals] = {
          accessors: {}
        };
        const accessors = internals.accessors;
        const prototype2 = this.prototype;
        function defineAccessor(_header) {
          const lHeader = normalizeHeader(_header);
          if (!accessors[lHeader]) {
            buildAccessors(prototype2, _header);
            accessors[lHeader] = true;
          }
        }
        utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
        return this;
      }
    };
    AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
    utils$1.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
      let mapped = key[0].toUpperCase() + key.slice(1);
      return {
        get: () => value,
        set(headerValue) {
          this[mapped] = headerValue;
        }
      };
    });
    utils$1.freezeMethods(AxiosHeaders);
    var AxiosHeaders$1 = AxiosHeaders;
    function transformData(fns, response) {
      const config = this || defaults$1;
      const context = response || config;
      const headers = AxiosHeaders$1.from(context.headers);
      let data = context.data;
      utils$1.forEach(fns, function transform(fn) {
        data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
      });
      headers.normalize();
      return data;
    }
    function isCancel(value) {
      return !!(value && value.__CANCEL__);
    }
    function CanceledError(message, config, request) {
      AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED, config, request);
      this.name = "CanceledError";
    }
    utils$1.inherits(CanceledError, AxiosError, {
      __CANCEL__: true
    });
    function settle(resolve, reject, response) {
      const validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError(
          "Request failed with status code " + response.status,
          [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    }
    function isAbsoluteURL(url2) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url2);
    }
    function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    }
    function buildFullPath(baseURL, requestedURL, allowAbsoluteUrls) {
      let isRelativeUrl = !isAbsoluteURL(requestedURL);
      if (baseURL && isRelativeUrl || allowAbsoluteUrls == false) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    }
    var VERSION = "1.8.1";
    function parseProtocol(url2) {
      const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url2);
      return match && match[1] || "";
    }
    var DATA_URL_PATTERN = /^(?:([^;]+);)?(?:[^;]+;)?(base64|),([\s\S]*)$/;
    function fromDataURI(uri, asBlob, options) {
      const _Blob = options && options.Blob || platform.classes.Blob;
      const protocol = parseProtocol(uri);
      if (asBlob === void 0 && _Blob) {
        asBlob = true;
      }
      if (protocol === "data") {
        uri = protocol.length ? uri.slice(protocol.length + 1) : uri;
        const match = DATA_URL_PATTERN.exec(uri);
        if (!match) {
          throw new AxiosError("Invalid URL", AxiosError.ERR_INVALID_URL);
        }
        const mime = match[1];
        const isBase64 = match[2];
        const body = match[3];
        const buffer = Buffer.from(decodeURIComponent(body), isBase64 ? "base64" : "utf8");
        if (asBlob) {
          if (!_Blob) {
            throw new AxiosError("Blob is not supported", AxiosError.ERR_NOT_SUPPORT);
          }
          return new _Blob([buffer], { type: mime });
        }
        return buffer;
      }
      throw new AxiosError("Unsupported protocol " + protocol, AxiosError.ERR_NOT_SUPPORT);
    }
    var kInternals = Symbol("internals");
    var AxiosTransformStream = class extends stream__default["default"].Transform {
      constructor(options) {
        options = utils$1.toFlatObject(options, {
          maxRate: 0,
          chunkSize: 64 * 1024,
          minChunkSize: 100,
          timeWindow: 500,
          ticksRate: 2,
          samplesCount: 15
        }, null, (prop, source) => {
          return !utils$1.isUndefined(source[prop]);
        });
        super({
          readableHighWaterMark: options.chunkSize
        });
        const internals = this[kInternals] = {
          timeWindow: options.timeWindow,
          chunkSize: options.chunkSize,
          maxRate: options.maxRate,
          minChunkSize: options.minChunkSize,
          bytesSeen: 0,
          isCaptured: false,
          notifiedBytesLoaded: 0,
          ts: Date.now(),
          bytes: 0,
          onReadCallback: null
        };
        this.on("newListener", (event) => {
          if (event === "progress") {
            if (!internals.isCaptured) {
              internals.isCaptured = true;
            }
          }
        });
      }
      _read(size) {
        const internals = this[kInternals];
        if (internals.onReadCallback) {
          internals.onReadCallback();
        }
        return super._read(size);
      }
      _transform(chunk, encoding, callback) {
        const internals = this[kInternals];
        const maxRate = internals.maxRate;
        const readableHighWaterMark = this.readableHighWaterMark;
        const timeWindow = internals.timeWindow;
        const divider = 1e3 / timeWindow;
        const bytesThreshold = maxRate / divider;
        const minChunkSize = internals.minChunkSize !== false ? Math.max(internals.minChunkSize, bytesThreshold * 0.01) : 0;
        const pushChunk = (_chunk, _callback) => {
          const bytes = Buffer.byteLength(_chunk);
          internals.bytesSeen += bytes;
          internals.bytes += bytes;
          internals.isCaptured && this.emit("progress", internals.bytesSeen);
          if (this.push(_chunk)) {
            process.nextTick(_callback);
          } else {
            internals.onReadCallback = () => {
              internals.onReadCallback = null;
              process.nextTick(_callback);
            };
          }
        };
        const transformChunk = (_chunk, _callback) => {
          const chunkSize = Buffer.byteLength(_chunk);
          let chunkRemainder = null;
          let maxChunkSize = readableHighWaterMark;
          let bytesLeft;
          let passed = 0;
          if (maxRate) {
            const now = Date.now();
            if (!internals.ts || (passed = now - internals.ts) >= timeWindow) {
              internals.ts = now;
              bytesLeft = bytesThreshold - internals.bytes;
              internals.bytes = bytesLeft < 0 ? -bytesLeft : 0;
              passed = 0;
            }
            bytesLeft = bytesThreshold - internals.bytes;
          }
          if (maxRate) {
            if (bytesLeft <= 0) {
              return setTimeout(() => {
                _callback(null, _chunk);
              }, timeWindow - passed);
            }
            if (bytesLeft < maxChunkSize) {
              maxChunkSize = bytesLeft;
            }
          }
          if (maxChunkSize && chunkSize > maxChunkSize && chunkSize - maxChunkSize > minChunkSize) {
            chunkRemainder = _chunk.subarray(maxChunkSize);
            _chunk = _chunk.subarray(0, maxChunkSize);
          }
          pushChunk(_chunk, chunkRemainder ? () => {
            process.nextTick(_callback, null, chunkRemainder);
          } : _callback);
        };
        transformChunk(chunk, function transformNextChunk(err, _chunk) {
          if (err) {
            return callback(err);
          }
          if (_chunk) {
            transformChunk(_chunk, transformNextChunk);
          } else {
            callback(null);
          }
        });
      }
    };
    var AxiosTransformStream$1 = AxiosTransformStream;
    var { asyncIterator } = Symbol;
    var readBlob = async function* (blob) {
      if (blob.stream) {
        yield* blob.stream();
      } else if (blob.arrayBuffer) {
        yield await blob.arrayBuffer();
      } else if (blob[asyncIterator]) {
        yield* blob[asyncIterator]();
      } else {
        yield blob;
      }
    };
    var readBlob$1 = readBlob;
    var BOUNDARY_ALPHABET = platform.ALPHABET.ALPHA_DIGIT + "-_";
    var textEncoder = typeof TextEncoder === "function" ? new TextEncoder() : new util__default["default"].TextEncoder();
    var CRLF = "\r\n";
    var CRLF_BYTES = textEncoder.encode(CRLF);
    var CRLF_BYTES_COUNT = 2;
    var FormDataPart = class {
      constructor(name, value) {
        const { escapeName } = this.constructor;
        const isStringValue = utils$1.isString(value);
        let headers = `Content-Disposition: form-data; name="${escapeName(name)}"${!isStringValue && value.name ? `; filename="${escapeName(value.name)}"` : ""}${CRLF}`;
        if (isStringValue) {
          value = textEncoder.encode(String(value).replace(/\r?\n|\r\n?/g, CRLF));
        } else {
          headers += `Content-Type: ${value.type || "application/octet-stream"}${CRLF}`;
        }
        this.headers = textEncoder.encode(headers + CRLF);
        this.contentLength = isStringValue ? value.byteLength : value.size;
        this.size = this.headers.byteLength + this.contentLength + CRLF_BYTES_COUNT;
        this.name = name;
        this.value = value;
      }
      async *encode() {
        yield this.headers;
        const { value } = this;
        if (utils$1.isTypedArray(value)) {
          yield value;
        } else {
          yield* readBlob$1(value);
        }
        yield CRLF_BYTES;
      }
      static escapeName(name) {
        return String(name).replace(/[\r\n"]/g, (match) => ({
          "\r": "%0D",
          "\n": "%0A",
          '"': "%22"
        })[match]);
      }
    };
    var formDataToStream = (form, headersHandler, options) => {
      const {
        tag = "form-data-boundary",
        size = 25,
        boundary = tag + "-" + platform.generateString(size, BOUNDARY_ALPHABET)
      } = options || {};
      if (!utils$1.isFormData(form)) {
        throw TypeError("FormData instance required");
      }
      if (boundary.length < 1 || boundary.length > 70) {
        throw Error("boundary must be 10-70 characters long");
      }
      const boundaryBytes = textEncoder.encode("--" + boundary + CRLF);
      const footerBytes = textEncoder.encode("--" + boundary + "--" + CRLF + CRLF);
      let contentLength = footerBytes.byteLength;
      const parts = Array.from(form.entries()).map(([name, value]) => {
        const part = new FormDataPart(name, value);
        contentLength += part.size;
        return part;
      });
      contentLength += boundaryBytes.byteLength * parts.length;
      contentLength = utils$1.toFiniteNumber(contentLength);
      const computedHeaders = {
        "Content-Type": `multipart/form-data; boundary=${boundary}`
      };
      if (Number.isFinite(contentLength)) {
        computedHeaders["Content-Length"] = contentLength;
      }
      headersHandler && headersHandler(computedHeaders);
      return stream.Readable.from(async function* () {
        for (const part of parts) {
          yield boundaryBytes;
          yield* part.encode();
        }
        yield footerBytes;
      }());
    };
    var formDataToStream$1 = formDataToStream;
    var ZlibHeaderTransformStream = class extends stream__default["default"].Transform {
      __transform(chunk, encoding, callback) {
        this.push(chunk);
        callback();
      }
      _transform(chunk, encoding, callback) {
        if (chunk.length !== 0) {
          this._transform = this.__transform;
          if (chunk[0] !== 120) {
            const header = Buffer.alloc(2);
            header[0] = 120;
            header[1] = 156;
            this.push(header, encoding);
          }
        }
        this.__transform(chunk, encoding, callback);
      }
    };
    var ZlibHeaderTransformStream$1 = ZlibHeaderTransformStream;
    var callbackify = (fn, reducer) => {
      return utils$1.isAsyncFn(fn) ? function(...args) {
        const cb = args.pop();
        fn.apply(this, args).then((value) => {
          try {
            reducer ? cb(null, ...reducer(value)) : cb(null, value);
          } catch (err) {
            cb(err);
          }
        }, cb);
      } : fn;
    };
    var callbackify$1 = callbackify;
    function speedometer(samplesCount, min) {
      samplesCount = samplesCount || 10;
      const bytes = new Array(samplesCount);
      const timestamps = new Array(samplesCount);
      let head = 0;
      let tail = 0;
      let firstSampleTS;
      min = min !== void 0 ? min : 1e3;
      return function push(chunkLength) {
        const now = Date.now();
        const startedAt = timestamps[tail];
        if (!firstSampleTS) {
          firstSampleTS = now;
        }
        bytes[head] = chunkLength;
        timestamps[head] = now;
        let i = tail;
        let bytesCount = 0;
        while (i !== head) {
          bytesCount += bytes[i++];
          i = i % samplesCount;
        }
        head = (head + 1) % samplesCount;
        if (head === tail) {
          tail = (tail + 1) % samplesCount;
        }
        if (now - firstSampleTS < min) {
          return;
        }
        const passed = startedAt && now - startedAt;
        return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
      };
    }
    function throttle(fn, freq) {
      let timestamp = 0;
      let threshold = 1e3 / freq;
      let lastArgs;
      let timer;
      const invoke = (args, now = Date.now()) => {
        timestamp = now;
        lastArgs = null;
        if (timer) {
          clearTimeout(timer);
          timer = null;
        }
        fn.apply(null, args);
      };
      const throttled = (...args) => {
        const now = Date.now();
        const passed = now - timestamp;
        if (passed >= threshold) {
          invoke(args, now);
        } else {
          lastArgs = args;
          if (!timer) {
            timer = setTimeout(() => {
              timer = null;
              invoke(lastArgs);
            }, threshold - passed);
          }
        }
      };
      const flush = () => lastArgs && invoke(lastArgs);
      return [throttled, flush];
    }
    var progressEventReducer = (listener, isDownloadStream, freq = 3) => {
      let bytesNotified = 0;
      const _speedometer = speedometer(50, 250);
      return throttle((e) => {
        const loaded = e.loaded;
        const total = e.lengthComputable ? e.total : void 0;
        const progressBytes = loaded - bytesNotified;
        const rate = _speedometer(progressBytes);
        const inRange = loaded <= total;
        bytesNotified = loaded;
        const data = {
          loaded,
          total,
          progress: total ? loaded / total : void 0,
          bytes: progressBytes,
          rate: rate ? rate : void 0,
          estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
          event: e,
          lengthComputable: total != null,
          [isDownloadStream ? "download" : "upload"]: true
        };
        listener(data);
      }, freq);
    };
    var progressEventDecorator = (total, throttled) => {
      const lengthComputable = total != null;
      return [(loaded) => throttled[0]({
        lengthComputable,
        total,
        loaded
      }), throttled[1]];
    };
    var asyncDecorator = (fn) => (...args) => utils$1.asap(() => fn(...args));
    var zlibOptions = {
      flush: zlib__default["default"].constants.Z_SYNC_FLUSH,
      finishFlush: zlib__default["default"].constants.Z_SYNC_FLUSH
    };
    var brotliOptions = {
      flush: zlib__default["default"].constants.BROTLI_OPERATION_FLUSH,
      finishFlush: zlib__default["default"].constants.BROTLI_OPERATION_FLUSH
    };
    var isBrotliSupported = utils$1.isFunction(zlib__default["default"].createBrotliDecompress);
    var { http: httpFollow, https: httpsFollow } = followRedirects__default["default"];
    var isHttps = /https:?/;
    var supportedProtocols = platform.protocols.map((protocol) => {
      return protocol + ":";
    });
    var flushOnFinish = (stream2, [throttled, flush]) => {
      stream2.on("end", flush).on("error", flush);
      return throttled;
    };
    function dispatchBeforeRedirect(options, responseDetails) {
      if (options.beforeRedirects.proxy) {
        options.beforeRedirects.proxy(options);
      }
      if (options.beforeRedirects.config) {
        options.beforeRedirects.config(options, responseDetails);
      }
    }
    function setProxy(options, configProxy, location) {
      let proxy = configProxy;
      if (!proxy && proxy !== false) {
        const proxyUrl = proxyFromEnv__default["default"].getProxyForUrl(location);
        if (proxyUrl) {
          proxy = new URL(proxyUrl);
        }
      }
      if (proxy) {
        if (proxy.username) {
          proxy.auth = (proxy.username || "") + ":" + (proxy.password || "");
        }
        if (proxy.auth) {
          if (proxy.auth.username || proxy.auth.password) {
            proxy.auth = (proxy.auth.username || "") + ":" + (proxy.auth.password || "");
          }
          const base64 = Buffer.from(proxy.auth, "utf8").toString("base64");
          options.headers["Proxy-Authorization"] = "Basic " + base64;
        }
        options.headers.host = options.hostname + (options.port ? ":" + options.port : "");
        const proxyHost = proxy.hostname || proxy.host;
        options.hostname = proxyHost;
        options.host = proxyHost;
        options.port = proxy.port;
        options.path = location;
        if (proxy.protocol) {
          options.protocol = proxy.protocol.includes(":") ? proxy.protocol : `${proxy.protocol}:`;
        }
      }
      options.beforeRedirects.proxy = function beforeRedirect(redirectOptions) {
        setProxy(redirectOptions, configProxy, redirectOptions.href);
      };
    }
    var isHttpAdapterSupported = typeof process !== "undefined" && utils$1.kindOf(process) === "process";
    var wrapAsync = (asyncExecutor) => {
      return new Promise((resolve, reject) => {
        let onDone;
        let isDone;
        const done = (value, isRejected) => {
          if (isDone) return;
          isDone = true;
          onDone && onDone(value, isRejected);
        };
        const _resolve = (value) => {
          done(value);
          resolve(value);
        };
        const _reject = (reason) => {
          done(reason, true);
          reject(reason);
        };
        asyncExecutor(_resolve, _reject, (onDoneHandler) => onDone = onDoneHandler).catch(_reject);
      });
    };
    var resolveFamily = ({ address, family }) => {
      if (!utils$1.isString(address)) {
        throw TypeError("address must be a string");
      }
      return {
        address,
        family: family || (address.indexOf(".") < 0 ? 6 : 4)
      };
    };
    var buildAddressEntry = (address, family) => resolveFamily(utils$1.isObject(address) ? address : { address, family });
    var httpAdapter = isHttpAdapterSupported && function httpAdapter2(config) {
      return wrapAsync(async function dispatchHttpRequest(resolve, reject, onDone) {
        let { data, lookup, family } = config;
        const { responseType, responseEncoding } = config;
        const method = config.method.toUpperCase();
        let isDone;
        let rejected = false;
        let req;
        if (lookup) {
          const _lookup = callbackify$1(lookup, (value) => utils$1.isArray(value) ? value : [value]);
          lookup = (hostname, opt, cb) => {
            _lookup(hostname, opt, (err, arg0, arg1) => {
              if (err) {
                return cb(err);
              }
              const addresses = utils$1.isArray(arg0) ? arg0.map((addr) => buildAddressEntry(addr)) : [buildAddressEntry(arg0, arg1)];
              opt.all ? cb(err, addresses) : cb(err, addresses[0].address, addresses[0].family);
            });
          };
        }
        const emitter = new events.EventEmitter();
        const onFinished = () => {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(abort);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", abort);
          }
          emitter.removeAllListeners();
        };
        onDone((value, isRejected) => {
          isDone = true;
          if (isRejected) {
            rejected = true;
            onFinished();
          }
        });
        function abort(reason) {
          emitter.emit("abort", !reason || reason.type ? new CanceledError(null, config, req) : reason);
        }
        emitter.once("abort", reject);
        if (config.cancelToken || config.signal) {
          config.cancelToken && config.cancelToken.subscribe(abort);
          if (config.signal) {
            config.signal.aborted ? abort() : config.signal.addEventListener("abort", abort);
          }
        }
        const fullPath = buildFullPath(config.baseURL, config.url);
        const parsed = new URL(fullPath, platform.hasBrowserEnv ? platform.origin : void 0);
        const protocol = parsed.protocol || supportedProtocols[0];
        if (protocol === "data:") {
          let convertedData;
          if (method !== "GET") {
            return settle(resolve, reject, {
              status: 405,
              statusText: "method not allowed",
              headers: {},
              config
            });
          }
          try {
            convertedData = fromDataURI(config.url, responseType === "blob", {
              Blob: config.env && config.env.Blob
            });
          } catch (err) {
            throw AxiosError.from(err, AxiosError.ERR_BAD_REQUEST, config);
          }
          if (responseType === "text") {
            convertedData = convertedData.toString(responseEncoding);
            if (!responseEncoding || responseEncoding === "utf8") {
              convertedData = utils$1.stripBOM(convertedData);
            }
          } else if (responseType === "stream") {
            convertedData = stream__default["default"].Readable.from(convertedData);
          }
          return settle(resolve, reject, {
            data: convertedData,
            status: 200,
            statusText: "OK",
            headers: new AxiosHeaders$1(),
            config
          });
        }
        if (supportedProtocols.indexOf(protocol) === -1) {
          return reject(new AxiosError(
            "Unsupported protocol " + protocol,
            AxiosError.ERR_BAD_REQUEST,
            config
          ));
        }
        const headers = AxiosHeaders$1.from(config.headers).normalize();
        headers.set("User-Agent", "axios/" + VERSION, false);
        const { onUploadProgress, onDownloadProgress } = config;
        const maxRate = config.maxRate;
        let maxUploadRate = void 0;
        let maxDownloadRate = void 0;
        if (utils$1.isSpecCompliantForm(data)) {
          const userBoundary = headers.getContentType(/boundary=([-_\w\d]{10,70})/i);
          data = formDataToStream$1(data, (formHeaders) => {
            headers.set(formHeaders);
          }, {
            tag: `axios-${VERSION}-boundary`,
            boundary: userBoundary && userBoundary[1] || void 0
          });
        } else if (utils$1.isFormData(data) && utils$1.isFunction(data.getHeaders)) {
          headers.set(data.getHeaders());
          if (!headers.hasContentLength()) {
            try {
              const knownLength = await util__default["default"].promisify(data.getLength).call(data);
              Number.isFinite(knownLength) && knownLength >= 0 && headers.setContentLength(knownLength);
            } catch (e) {
            }
          }
        } else if (utils$1.isBlob(data) || utils$1.isFile(data)) {
          data.size && headers.setContentType(data.type || "application/octet-stream");
          headers.setContentLength(data.size || 0);
          data = stream__default["default"].Readable.from(readBlob$1(data));
        } else if (data && !utils$1.isStream(data)) {
          if (Buffer.isBuffer(data)) ;
          else if (utils$1.isArrayBuffer(data)) {
            data = Buffer.from(new Uint8Array(data));
          } else if (utils$1.isString(data)) {
            data = Buffer.from(data, "utf-8");
          } else {
            return reject(new AxiosError(
              "Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream",
              AxiosError.ERR_BAD_REQUEST,
              config
            ));
          }
          headers.setContentLength(data.length, false);
          if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {
            return reject(new AxiosError(
              "Request body larger than maxBodyLength limit",
              AxiosError.ERR_BAD_REQUEST,
              config
            ));
          }
        }
        const contentLength = utils$1.toFiniteNumber(headers.getContentLength());
        if (utils$1.isArray(maxRate)) {
          maxUploadRate = maxRate[0];
          maxDownloadRate = maxRate[1];
        } else {
          maxUploadRate = maxDownloadRate = maxRate;
        }
        if (data && (onUploadProgress || maxUploadRate)) {
          if (!utils$1.isStream(data)) {
            data = stream__default["default"].Readable.from(data, { objectMode: false });
          }
          data = stream__default["default"].pipeline([data, new AxiosTransformStream$1({
            maxRate: utils$1.toFiniteNumber(maxUploadRate)
          })], utils$1.noop);
          onUploadProgress && data.on("progress", flushOnFinish(
            data,
            progressEventDecorator(
              contentLength,
              progressEventReducer(asyncDecorator(onUploadProgress), false, 3)
            )
          ));
        }
        let auth = void 0;
        if (config.auth) {
          const username = config.auth.username || "";
          const password = config.auth.password || "";
          auth = username + ":" + password;
        }
        if (!auth && parsed.username) {
          const urlUsername = parsed.username;
          const urlPassword = parsed.password;
          auth = urlUsername + ":" + urlPassword;
        }
        auth && headers.delete("authorization");
        let path;
        try {
          path = buildURL(
            parsed.pathname + parsed.search,
            config.params,
            config.paramsSerializer
          ).replace(/^\?/, "");
        } catch (err) {
          const customErr = new Error(err.message);
          customErr.config = config;
          customErr.url = config.url;
          customErr.exists = true;
          return reject(customErr);
        }
        headers.set(
          "Accept-Encoding",
          "gzip, compress, deflate" + (isBrotliSupported ? ", br" : ""),
          false
        );
        const options = {
          path,
          method,
          headers: headers.toJSON(),
          agents: { http: config.httpAgent, https: config.httpsAgent },
          auth,
          protocol,
          family,
          beforeRedirect: dispatchBeforeRedirect,
          beforeRedirects: {}
        };
        !utils$1.isUndefined(lookup) && (options.lookup = lookup);
        if (config.socketPath) {
          options.socketPath = config.socketPath;
        } else {
          options.hostname = parsed.hostname.startsWith("[") ? parsed.hostname.slice(1, -1) : parsed.hostname;
          options.port = parsed.port;
          setProxy(options, config.proxy, protocol + "//" + parsed.hostname + (parsed.port ? ":" + parsed.port : "") + options.path);
        }
        let transport;
        const isHttpsRequest = isHttps.test(options.protocol);
        options.agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;
        if (config.transport) {
          transport = config.transport;
        } else if (config.maxRedirects === 0) {
          transport = isHttpsRequest ? https__default["default"] : http__default["default"];
        } else {
          if (config.maxRedirects) {
            options.maxRedirects = config.maxRedirects;
          }
          if (config.beforeRedirect) {
            options.beforeRedirects.config = config.beforeRedirect;
          }
          transport = isHttpsRequest ? httpsFollow : httpFollow;
        }
        if (config.maxBodyLength > -1) {
          options.maxBodyLength = config.maxBodyLength;
        } else {
          options.maxBodyLength = Infinity;
        }
        if (config.insecureHTTPParser) {
          options.insecureHTTPParser = config.insecureHTTPParser;
        }
        req = transport.request(options, function handleResponse(res) {
          if (req.destroyed) return;
          const streams = [res];
          const responseLength = +res.headers["content-length"];
          if (onDownloadProgress || maxDownloadRate) {
            const transformStream = new AxiosTransformStream$1({
              maxRate: utils$1.toFiniteNumber(maxDownloadRate)
            });
            onDownloadProgress && transformStream.on("progress", flushOnFinish(
              transformStream,
              progressEventDecorator(
                responseLength,
                progressEventReducer(asyncDecorator(onDownloadProgress), true, 3)
              )
            ));
            streams.push(transformStream);
          }
          let responseStream = res;
          const lastRequest = res.req || req;
          if (config.decompress !== false && res.headers["content-encoding"]) {
            if (method === "HEAD" || res.statusCode === 204) {
              delete res.headers["content-encoding"];
            }
            switch ((res.headers["content-encoding"] || "").toLowerCase()) {
              /*eslint default-case:0*/
              case "gzip":
              case "x-gzip":
              case "compress":
              case "x-compress":
                streams.push(zlib__default["default"].createUnzip(zlibOptions));
                delete res.headers["content-encoding"];
                break;
              case "deflate":
                streams.push(new ZlibHeaderTransformStream$1());
                streams.push(zlib__default["default"].createUnzip(zlibOptions));
                delete res.headers["content-encoding"];
                break;
              case "br":
                if (isBrotliSupported) {
                  streams.push(zlib__default["default"].createBrotliDecompress(brotliOptions));
                  delete res.headers["content-encoding"];
                }
            }
          }
          responseStream = streams.length > 1 ? stream__default["default"].pipeline(streams, utils$1.noop) : streams[0];
          const offListeners = stream__default["default"].finished(responseStream, () => {
            offListeners();
            onFinished();
          });
          const response = {
            status: res.statusCode,
            statusText: res.statusMessage,
            headers: new AxiosHeaders$1(res.headers),
            config,
            request: lastRequest
          };
          if (responseType === "stream") {
            response.data = responseStream;
            settle(resolve, reject, response);
          } else {
            const responseBuffer = [];
            let totalResponseBytes = 0;
            responseStream.on("data", function handleStreamData(chunk) {
              responseBuffer.push(chunk);
              totalResponseBytes += chunk.length;
              if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {
                rejected = true;
                responseStream.destroy();
                reject(new AxiosError(
                  "maxContentLength size of " + config.maxContentLength + " exceeded",
                  AxiosError.ERR_BAD_RESPONSE,
                  config,
                  lastRequest
                ));
              }
            });
            responseStream.on("aborted", function handlerStreamAborted() {
              if (rejected) {
                return;
              }
              const err = new AxiosError(
                "stream has been aborted",
                AxiosError.ERR_BAD_RESPONSE,
                config,
                lastRequest
              );
              responseStream.destroy(err);
              reject(err);
            });
            responseStream.on("error", function handleStreamError(err) {
              if (req.destroyed) return;
              reject(AxiosError.from(err, null, config, lastRequest));
            });
            responseStream.on("end", function handleStreamEnd() {
              try {
                let responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);
                if (responseType !== "arraybuffer") {
                  responseData = responseData.toString(responseEncoding);
                  if (!responseEncoding || responseEncoding === "utf8") {
                    responseData = utils$1.stripBOM(responseData);
                  }
                }
                response.data = responseData;
              } catch (err) {
                return reject(AxiosError.from(err, null, config, response.request, response));
              }
              settle(resolve, reject, response);
            });
          }
          emitter.once("abort", (err) => {
            if (!responseStream.destroyed) {
              responseStream.emit("error", err);
              responseStream.destroy();
            }
          });
        });
        emitter.once("abort", (err) => {
          reject(err);
          req.destroy(err);
        });
        req.on("error", function handleRequestError(err) {
          reject(AxiosError.from(err, null, config, req));
        });
        req.on("socket", function handleRequestSocket(socket) {
          socket.setKeepAlive(true, 1e3 * 60);
        });
        if (config.timeout) {
          const timeout = parseInt(config.timeout, 10);
          if (Number.isNaN(timeout)) {
            reject(new AxiosError(
              "error trying to parse `config.timeout` to int",
              AxiosError.ERR_BAD_OPTION_VALUE,
              config,
              req
            ));
            return;
          }
          req.setTimeout(timeout, function handleRequestTimeout() {
            if (isDone) return;
            let timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
            const transitional = config.transitional || transitionalDefaults;
            if (config.timeoutErrorMessage) {
              timeoutErrorMessage = config.timeoutErrorMessage;
            }
            reject(new AxiosError(
              timeoutErrorMessage,
              transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
              config,
              req
            ));
            abort();
          });
        }
        if (utils$1.isStream(data)) {
          let ended = false;
          let errored = false;
          data.on("end", () => {
            ended = true;
          });
          data.once("error", (err) => {
            errored = true;
            req.destroy(err);
          });
          data.on("close", () => {
            if (!ended && !errored) {
              abort(new CanceledError("Request stream has been aborted", config, req));
            }
          });
          data.pipe(req);
        } else {
          req.end(data);
        }
      });
    };
    var isURLSameOrigin = platform.hasStandardBrowserEnv ? /* @__PURE__ */ ((origin2, isMSIE) => (url2) => {
      url2 = new URL(url2, platform.origin);
      return origin2.protocol === url2.protocol && origin2.host === url2.host && (isMSIE || origin2.port === url2.port);
    })(
      new URL(platform.origin),
      platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent)
    ) : () => true;
    var cookies = platform.hasStandardBrowserEnv ? (
      // Standard browser envs support document.cookie
      {
        write(name, value, expires, path, domain, secure) {
          const cookie = [name + "=" + encodeURIComponent(value)];
          utils$1.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
          utils$1.isString(path) && cookie.push("path=" + path);
          utils$1.isString(domain) && cookie.push("domain=" + domain);
          secure === true && cookie.push("secure");
          document.cookie = cookie.join("; ");
        },
        read(name) {
          const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      }
    ) : (
      // Non-standard browser env (web workers, react-native) lack needed support.
      {
        write() {
        },
        read() {
          return null;
        },
        remove() {
        }
      }
    );
    var headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? { ...thing } : thing;
    function mergeConfig(config1, config2) {
      config2 = config2 || {};
      const config = {};
      function getMergedValue(target, source, prop, caseless) {
        if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {
          return utils$1.merge.call({ caseless }, target, source);
        } else if (utils$1.isPlainObject(source)) {
          return utils$1.merge({}, source);
        } else if (utils$1.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(a, b, prop, caseless) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(a, b, prop, caseless);
        } else if (!utils$1.isUndefined(a)) {
          return getMergedValue(void 0, a, prop, caseless);
        }
      }
      function valueFromConfig2(a, b) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(void 0, b);
        }
      }
      function defaultToConfig2(a, b) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(void 0, b);
        } else if (!utils$1.isUndefined(a)) {
          return getMergedValue(void 0, a);
        }
      }
      function mergeDirectKeys(a, b, prop) {
        if (prop in config2) {
          return getMergedValue(a, b);
        } else if (prop in config1) {
          return getMergedValue(void 0, a);
        }
      }
      const mergeMap = {
        url: valueFromConfig2,
        method: valueFromConfig2,
        data: valueFromConfig2,
        baseURL: defaultToConfig2,
        transformRequest: defaultToConfig2,
        transformResponse: defaultToConfig2,
        paramsSerializer: defaultToConfig2,
        timeout: defaultToConfig2,
        timeoutMessage: defaultToConfig2,
        withCredentials: defaultToConfig2,
        withXSRFToken: defaultToConfig2,
        adapter: defaultToConfig2,
        responseType: defaultToConfig2,
        xsrfCookieName: defaultToConfig2,
        xsrfHeaderName: defaultToConfig2,
        onUploadProgress: defaultToConfig2,
        onDownloadProgress: defaultToConfig2,
        decompress: defaultToConfig2,
        maxContentLength: defaultToConfig2,
        maxBodyLength: defaultToConfig2,
        beforeRedirect: defaultToConfig2,
        transport: defaultToConfig2,
        httpAgent: defaultToConfig2,
        httpsAgent: defaultToConfig2,
        cancelToken: defaultToConfig2,
        socketPath: defaultToConfig2,
        responseEncoding: defaultToConfig2,
        validateStatus: mergeDirectKeys,
        headers: (a, b, prop) => mergeDeepProperties(headersToObject(a), headersToObject(b), prop, true)
      };
      utils$1.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
        const merge2 = mergeMap[prop] || mergeDeepProperties;
        const configValue = merge2(config1[prop], config2[prop], prop);
        utils$1.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    }
    var resolveConfig = (config) => {
      const newConfig = mergeConfig({}, config);
      let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
      newConfig.headers = headers = AxiosHeaders$1.from(headers);
      newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);
      if (auth) {
        headers.set(
          "Authorization",
          "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))
        );
      }
      let contentType;
      if (utils$1.isFormData(data)) {
        if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
          headers.setContentType(void 0);
        } else if ((contentType = headers.getContentType()) !== false) {
          const [type, ...tokens] = contentType ? contentType.split(";").map((token) => token.trim()).filter(Boolean) : [];
          headers.setContentType([type || "multipart/form-data", ...tokens].join("; "));
        }
      }
      if (platform.hasStandardBrowserEnv) {
        withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
        if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(newConfig.url)) {
          const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);
          if (xsrfValue) {
            headers.set(xsrfHeaderName, xsrfValue);
          }
        }
      }
      return newConfig;
    };
    var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
    var xhrAdapter = isXHRAdapterSupported && function(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        const _config = resolveConfig(config);
        let requestData = _config.data;
        const requestHeaders = AxiosHeaders$1.from(_config.headers).normalize();
        let { responseType, onUploadProgress, onDownloadProgress } = _config;
        let onCanceled;
        let uploadThrottled, downloadThrottled;
        let flushUpload, flushDownload;
        function done() {
          flushUpload && flushUpload();
          flushDownload && flushDownload();
          _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
          _config.signal && _config.signal.removeEventListener("abort", onCanceled);
        }
        let request = new XMLHttpRequest();
        request.open(_config.method.toUpperCase(), _config.url, true);
        request.timeout = _config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          const responseHeaders = AxiosHeaders$1.from(
            "getAllResponseHeaders" in request && request.getAllResponseHeaders()
          );
          const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          const response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config, request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
          const transitional = _config.transitional || transitionalDefaults;
          if (_config.timeoutErrorMessage) {
            timeoutErrorMessage = _config.timeoutErrorMessage;
          }
          reject(new AxiosError(
            timeoutErrorMessage,
            transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
            config,
            request
          ));
          request = null;
        };
        requestData === void 0 && requestHeaders.setContentType(null);
        if ("setRequestHeader" in request) {
          utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
            request.setRequestHeader(key, val);
          });
        }
        if (!utils$1.isUndefined(_config.withCredentials)) {
          request.withCredentials = !!_config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = _config.responseType;
        }
        if (onDownloadProgress) {
          [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
          request.addEventListener("progress", downloadThrottled);
        }
        if (onUploadProgress && request.upload) {
          [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
          request.upload.addEventListener("progress", uploadThrottled);
          request.upload.addEventListener("loadend", flushUpload);
        }
        if (_config.cancelToken || _config.signal) {
          onCanceled = (cancel) => {
            if (!request) {
              return;
            }
            reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);
            request.abort();
            request = null;
          };
          _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
          if (_config.signal) {
            _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
          }
        }
        const protocol = parseProtocol(_config.url);
        if (protocol && platform.protocols.indexOf(protocol) === -1) {
          reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config));
          return;
        }
        request.send(requestData || null);
      });
    };
    var composeSignals = (signals, timeout) => {
      const { length } = signals = signals ? signals.filter(Boolean) : [];
      if (timeout || length) {
        let controller = new AbortController();
        let aborted;
        const onabort = function(reason) {
          if (!aborted) {
            aborted = true;
            unsubscribe();
            const err = reason instanceof Error ? reason : this.reason;
            controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));
          }
        };
        let timer = timeout && setTimeout(() => {
          timer = null;
          onabort(new AxiosError(`timeout ${timeout} of ms exceeded`, AxiosError.ETIMEDOUT));
        }, timeout);
        const unsubscribe = () => {
          if (signals) {
            timer && clearTimeout(timer);
            timer = null;
            signals.forEach((signal2) => {
              signal2.unsubscribe ? signal2.unsubscribe(onabort) : signal2.removeEventListener("abort", onabort);
            });
            signals = null;
          }
        };
        signals.forEach((signal2) => signal2.addEventListener("abort", onabort));
        const { signal } = controller;
        signal.unsubscribe = () => utils$1.asap(unsubscribe);
        return signal;
      }
    };
    var composeSignals$1 = composeSignals;
    var streamChunk = function* (chunk, chunkSize) {
      let len = chunk.byteLength;
      if (!chunkSize || len < chunkSize) {
        yield chunk;
        return;
      }
      let pos = 0;
      let end;
      while (pos < len) {
        end = pos + chunkSize;
        yield chunk.slice(pos, end);
        pos = end;
      }
    };
    var readBytes = async function* (iterable, chunkSize) {
      for await (const chunk of readStream(iterable)) {
        yield* streamChunk(chunk, chunkSize);
      }
    };
    var readStream = async function* (stream2) {
      if (stream2[Symbol.asyncIterator]) {
        yield* stream2;
        return;
      }
      const reader = stream2.getReader();
      try {
        for (; ; ) {
          const { done, value } = await reader.read();
          if (done) {
            break;
          }
          yield value;
        }
      } finally {
        await reader.cancel();
      }
    };
    var trackStream = (stream2, chunkSize, onProgress, onFinish) => {
      const iterator = readBytes(stream2, chunkSize);
      let bytes = 0;
      let done;
      let _onFinish = (e) => {
        if (!done) {
          done = true;
          onFinish && onFinish(e);
        }
      };
      return new ReadableStream({
        async pull(controller) {
          try {
            const { done: done2, value } = await iterator.next();
            if (done2) {
              _onFinish();
              controller.close();
              return;
            }
            let len = value.byteLength;
            if (onProgress) {
              let loadedBytes = bytes += len;
              onProgress(loadedBytes);
            }
            controller.enqueue(new Uint8Array(value));
          } catch (err) {
            _onFinish(err);
            throw err;
          }
        },
        cancel(reason) {
          _onFinish(reason);
          return iterator.return();
        }
      }, {
        highWaterMark: 2
      });
    };
    var isFetchSupported = typeof fetch === "function" && typeof Request === "function" && typeof Response === "function";
    var isReadableStreamSupported = isFetchSupported && typeof ReadableStream === "function";
    var encodeText = isFetchSupported && (typeof TextEncoder === "function" ? /* @__PURE__ */ ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) : async (str) => new Uint8Array(await new Response(str).arrayBuffer()));
    var test = (fn, ...args) => {
      try {
        return !!fn(...args);
      } catch (e) {
        return false;
      }
    };
    var supportsRequestStream = isReadableStreamSupported && test(() => {
      let duplexAccessed = false;
      const hasContentType = new Request(platform.origin, {
        body: new ReadableStream(),
        method: "POST",
        get duplex() {
          duplexAccessed = true;
          return "half";
        }
      }).headers.has("Content-Type");
      return duplexAccessed && !hasContentType;
    });
    var DEFAULT_CHUNK_SIZE = 64 * 1024;
    var supportsResponseStream = isReadableStreamSupported && test(() => utils$1.isReadableStream(new Response("").body));
    var resolvers = {
      stream: supportsResponseStream && ((res) => res.body)
    };
    isFetchSupported && ((res) => {
      ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type) => {
        !resolvers[type] && (resolvers[type] = utils$1.isFunction(res[type]) ? (res2) => res2[type]() : (_, config) => {
          throw new AxiosError(`Response type '${type}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config);
        });
      });
    })(new Response());
    var getBodyLength = async (body) => {
      if (body == null) {
        return 0;
      }
      if (utils$1.isBlob(body)) {
        return body.size;
      }
      if (utils$1.isSpecCompliantForm(body)) {
        const _request = new Request(platform.origin, {
          method: "POST",
          body
        });
        return (await _request.arrayBuffer()).byteLength;
      }
      if (utils$1.isArrayBufferView(body) || utils$1.isArrayBuffer(body)) {
        return body.byteLength;
      }
      if (utils$1.isURLSearchParams(body)) {
        body = body + "";
      }
      if (utils$1.isString(body)) {
        return (await encodeText(body)).byteLength;
      }
    };
    var resolveBodyLength = async (headers, body) => {
      const length = utils$1.toFiniteNumber(headers.getContentLength());
      return length == null ? getBodyLength(body) : length;
    };
    var fetchAdapter = isFetchSupported && (async (config) => {
      let {
        url: url2,
        method,
        data,
        signal,
        cancelToken,
        timeout,
        onDownloadProgress,
        onUploadProgress,
        responseType,
        headers,
        withCredentials = "same-origin",
        fetchOptions
      } = resolveConfig(config);
      responseType = responseType ? (responseType + "").toLowerCase() : "text";
      let composedSignal = composeSignals$1([signal, cancelToken && cancelToken.toAbortSignal()], timeout);
      let request;
      const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
        composedSignal.unsubscribe();
      });
      let requestContentLength;
      try {
        if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {
          let _request = new Request(url2, {
            method: "POST",
            body: data,
            duplex: "half"
          });
          let contentTypeHeader;
          if (utils$1.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) {
            headers.setContentType(contentTypeHeader);
          }
          if (_request.body) {
            const [onProgress, flush] = progressEventDecorator(
              requestContentLength,
              progressEventReducer(asyncDecorator(onUploadProgress))
            );
            data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
          }
        }
        if (!utils$1.isString(withCredentials)) {
          withCredentials = withCredentials ? "include" : "omit";
        }
        const isCredentialsSupported = "credentials" in Request.prototype;
        request = new Request(url2, {
          ...fetchOptions,
          signal: composedSignal,
          method: method.toUpperCase(),
          headers: headers.normalize().toJSON(),
          body: data,
          duplex: "half",
          credentials: isCredentialsSupported ? withCredentials : void 0
        });
        let response = await fetch(request);
        const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
        if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
          const options = {};
          ["status", "statusText", "headers"].forEach((prop) => {
            options[prop] = response[prop];
          });
          const responseContentLength = utils$1.toFiniteNumber(response.headers.get("content-length"));
          const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
            responseContentLength,
            progressEventReducer(asyncDecorator(onDownloadProgress), true)
          ) || [];
          response = new Response(
            trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
              flush && flush();
              unsubscribe && unsubscribe();
            }),
            options
          );
        }
        responseType = responseType || "text";
        let responseData = await resolvers[utils$1.findKey(resolvers, responseType) || "text"](response, config);
        !isStreamResponse && unsubscribe && unsubscribe();
        return await new Promise((resolve, reject) => {
          settle(resolve, reject, {
            data: responseData,
            headers: AxiosHeaders$1.from(response.headers),
            status: response.status,
            statusText: response.statusText,
            config,
            request
          });
        });
      } catch (err) {
        unsubscribe && unsubscribe();
        if (err && err.name === "TypeError" && /fetch/i.test(err.message)) {
          throw Object.assign(
            new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request),
            {
              cause: err.cause || err
            }
          );
        }
        throw AxiosError.from(err, err && err.code, config, request);
      }
    });
    var knownAdapters = {
      http: httpAdapter,
      xhr: xhrAdapter,
      fetch: fetchAdapter
    };
    utils$1.forEach(knownAdapters, (fn, value) => {
      if (fn) {
        try {
          Object.defineProperty(fn, "name", { value });
        } catch (e) {
        }
        Object.defineProperty(fn, "adapterName", { value });
      }
    });
    var renderReason = (reason) => `- ${reason}`;
    var isResolvedHandle = (adapter) => utils$1.isFunction(adapter) || adapter === null || adapter === false;
    var adapters = {
      getAdapter: (adapters2) => {
        adapters2 = utils$1.isArray(adapters2) ? adapters2 : [adapters2];
        const { length } = adapters2;
        let nameOrAdapter;
        let adapter;
        const rejectedReasons = {};
        for (let i = 0; i < length; i++) {
          nameOrAdapter = adapters2[i];
          let id;
          adapter = nameOrAdapter;
          if (!isResolvedHandle(nameOrAdapter)) {
            adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
            if (adapter === void 0) {
              throw new AxiosError(`Unknown adapter '${id}'`);
            }
          }
          if (adapter) {
            break;
          }
          rejectedReasons[id || "#" + i] = adapter;
        }
        if (!adapter) {
          const reasons = Object.entries(rejectedReasons).map(
            ([id, state]) => `adapter ${id} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
          );
          let s = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
          throw new AxiosError(
            `There is no suitable adapter to dispatch the request ` + s,
            "ERR_NOT_SUPPORT"
          );
        }
        return adapter;
      },
      adapters: knownAdapters
    };
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new CanceledError(null, config);
      }
    }
    function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = AxiosHeaders$1.from(config.headers);
      config.data = transformData.call(
        config,
        config.transformRequest
      );
      if (["post", "put", "patch"].indexOf(config.method) !== -1) {
        config.headers.setContentType("application/x-www-form-urlencoded", false);
      }
      const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(
          config,
          config.transformResponse,
          response
        );
        response.headers = AxiosHeaders$1.from(response.headers);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              config.transformResponse,
              reason.response
            );
            reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
          }
        }
        return Promise.reject(reason);
      });
    }
    var validators$1 = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
      validators$1[type] = function validator2(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators$1.transitional = function transitional(validator2, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return (value, opt, opts) => {
        if (validator2 === false) {
          throw new AxiosError(
            formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
            AxiosError.ERR_DEPRECATED
          );
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version + " and will be removed in the near future"
            )
          );
        }
        return validator2 ? validator2(value, opt, opts) : true;
      };
    };
    validators$1.spelling = function spelling(correctSpelling) {
      return (value, opt) => {
        console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
        return true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
      }
      const keys = Object.keys(options);
      let i = keys.length;
      while (i-- > 0) {
        const opt = keys[i];
        const validator2 = schema[opt];
        if (validator2) {
          const value = options[opt];
          const result = value === void 0 || validator2(value, opt, options);
          if (result !== true) {
            throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
        }
      }
    }
    var validator = {
      assertOptions,
      validators: validators$1
    };
    var validators = validator.validators;
    var Axios = class {
      constructor(instanceConfig) {
        this.defaults = instanceConfig;
        this.interceptors = {
          request: new InterceptorManager$1(),
          response: new InterceptorManager$1()
        };
      }
      /**
       * Dispatch a request
       *
       * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
       * @param {?Object} config
       *
       * @returns {Promise} The Promise to be fulfilled
       */
      async request(configOrUrl, config) {
        try {
          return await this._request(configOrUrl, config);
        } catch (err) {
          if (err instanceof Error) {
            let dummy = {};
            Error.captureStackTrace ? Error.captureStackTrace(dummy) : dummy = new Error();
            const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
            try {
              if (!err.stack) {
                err.stack = stack;
              } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
                err.stack += "\n" + stack;
              }
            } catch (e) {
            }
          }
          throw err;
        }
      }
      _request(configOrUrl, config) {
        if (typeof configOrUrl === "string") {
          config = config || {};
          config.url = configOrUrl;
        } else {
          config = configOrUrl || {};
        }
        config = mergeConfig(this.defaults, config);
        const { transitional, paramsSerializer, headers } = config;
        if (transitional !== void 0) {
          validator.assertOptions(transitional, {
            silentJSONParsing: validators.transitional(validators.boolean),
            forcedJSONParsing: validators.transitional(validators.boolean),
            clarifyTimeoutError: validators.transitional(validators.boolean)
          }, false);
        }
        if (paramsSerializer != null) {
          if (utils$1.isFunction(paramsSerializer)) {
            config.paramsSerializer = {
              serialize: paramsSerializer
            };
          } else {
            validator.assertOptions(paramsSerializer, {
              encode: validators.function,
              serialize: validators.function
            }, true);
          }
        }
        if (config.allowAbsoluteUrls !== void 0) ;
        else if (this.defaults.allowAbsoluteUrls !== void 0) {
          config.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls;
        } else {
          config.allowAbsoluteUrls = true;
        }
        validator.assertOptions(config, {
          baseUrl: validators.spelling("baseURL"),
          withXsrfToken: validators.spelling("withXSRFToken")
        }, true);
        config.method = (config.method || this.defaults.method || "get").toLowerCase();
        let contextHeaders = headers && utils$1.merge(
          headers.common,
          headers[config.method]
        );
        headers && utils$1.forEach(
          ["delete", "get", "head", "post", "put", "patch", "common"],
          (method) => {
            delete headers[method];
          }
        );
        config.headers = AxiosHeaders$1.concat(contextHeaders, headers);
        const requestInterceptorChain = [];
        let synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
            return;
          }
          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        const responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });
        let promise;
        let i = 0;
        let len;
        if (!synchronousRequestInterceptors) {
          const chain = [dispatchRequest.bind(this), void 0];
          chain.unshift.apply(chain, requestInterceptorChain);
          chain.push.apply(chain, responseInterceptorChain);
          len = chain.length;
          promise = Promise.resolve(config);
          while (i < len) {
            promise = promise.then(chain[i++], chain[i++]);
          }
          return promise;
        }
        len = requestInterceptorChain.length;
        let newConfig = config;
        i = 0;
        while (i < len) {
          const onFulfilled = requestInterceptorChain[i++];
          const onRejected = requestInterceptorChain[i++];
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error) {
            onRejected.call(this, error);
            break;
          }
        }
        try {
          promise = dispatchRequest.call(this, newConfig);
        } catch (error) {
          return Promise.reject(error);
        }
        i = 0;
        len = responseInterceptorChain.length;
        while (i < len) {
          promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
        }
        return promise;
      }
      getUri(config) {
        config = mergeConfig(this.defaults, config);
        const fullPath = buildFullPath(config.baseURL, config.url, config.allowAbsoluteUrls);
        return buildURL(fullPath, config.params, config.paramsSerializer);
      }
    };
    utils$1.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url2, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url: url2,
          data: (config || {}).data
        }));
      };
    });
    utils$1.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url2, data, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            headers: isForm ? {
              "Content-Type": "multipart/form-data"
            } : {},
            url: url2,
            data
          }));
        };
      }
      Axios.prototype[method] = generateHTTPMethod();
      Axios.prototype[method + "Form"] = generateHTTPMethod(true);
    });
    var Axios$1 = Axios;
    var CancelToken = class _CancelToken {
      constructor(executor) {
        if (typeof executor !== "function") {
          throw new TypeError("executor must be a function.");
        }
        let resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve) {
          resolvePromise = resolve;
        });
        const token = this;
        this.promise.then((cancel) => {
          if (!token._listeners) return;
          let i = token._listeners.length;
          while (i-- > 0) {
            token._listeners[i](cancel);
          }
          token._listeners = null;
        });
        this.promise.then = (onfulfilled) => {
          let _resolve;
          const promise = new Promise((resolve) => {
            token.subscribe(resolve);
            _resolve = resolve;
          }).then(onfulfilled);
          promise.cancel = function reject() {
            token.unsubscribe(_resolve);
          };
          return promise;
        };
        executor(function cancel(message, config, request) {
          if (token.reason) {
            return;
          }
          token.reason = new CanceledError(message, config, request);
          resolvePromise(token.reason);
        });
      }
      /**
       * Throws a `CanceledError` if cancellation has been requested.
       */
      throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      }
      /**
       * Subscribe to the cancel signal
       */
      subscribe(listener) {
        if (this.reason) {
          listener(this.reason);
          return;
        }
        if (this._listeners) {
          this._listeners.push(listener);
        } else {
          this._listeners = [listener];
        }
      }
      /**
       * Unsubscribe from the cancel signal
       */
      unsubscribe(listener) {
        if (!this._listeners) {
          return;
        }
        const index = this._listeners.indexOf(listener);
        if (index !== -1) {
          this._listeners.splice(index, 1);
        }
      }
      toAbortSignal() {
        const controller = new AbortController();
        const abort = (err) => {
          controller.abort(err);
        };
        this.subscribe(abort);
        controller.signal.unsubscribe = () => this.unsubscribe(abort);
        return controller.signal;
      }
      /**
       * Returns an object that contains a new `CancelToken` and a function that, when called,
       * cancels the `CancelToken`.
       */
      static source() {
        let cancel;
        const token = new _CancelToken(function executor(c) {
          cancel = c;
        });
        return {
          token,
          cancel
        };
      }
    };
    var CancelToken$1 = CancelToken;
    function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    }
    function isAxiosError(payload) {
      return utils$1.isObject(payload) && payload.isAxiosError === true;
    }
    var HttpStatusCode = {
      Continue: 100,
      SwitchingProtocols: 101,
      Processing: 102,
      EarlyHints: 103,
      Ok: 200,
      Created: 201,
      Accepted: 202,
      NonAuthoritativeInformation: 203,
      NoContent: 204,
      ResetContent: 205,
      PartialContent: 206,
      MultiStatus: 207,
      AlreadyReported: 208,
      ImUsed: 226,
      MultipleChoices: 300,
      MovedPermanently: 301,
      Found: 302,
      SeeOther: 303,
      NotModified: 304,
      UseProxy: 305,
      Unused: 306,
      TemporaryRedirect: 307,
      PermanentRedirect: 308,
      BadRequest: 400,
      Unauthorized: 401,
      PaymentRequired: 402,
      Forbidden: 403,
      NotFound: 404,
      MethodNotAllowed: 405,
      NotAcceptable: 406,
      ProxyAuthenticationRequired: 407,
      RequestTimeout: 408,
      Conflict: 409,
      Gone: 410,
      LengthRequired: 411,
      PreconditionFailed: 412,
      PayloadTooLarge: 413,
      UriTooLong: 414,
      UnsupportedMediaType: 415,
      RangeNotSatisfiable: 416,
      ExpectationFailed: 417,
      ImATeapot: 418,
      MisdirectedRequest: 421,
      UnprocessableEntity: 422,
      Locked: 423,
      FailedDependency: 424,
      TooEarly: 425,
      UpgradeRequired: 426,
      PreconditionRequired: 428,
      TooManyRequests: 429,
      RequestHeaderFieldsTooLarge: 431,
      UnavailableForLegalReasons: 451,
      InternalServerError: 500,
      NotImplemented: 501,
      BadGateway: 502,
      ServiceUnavailable: 503,
      GatewayTimeout: 504,
      HttpVersionNotSupported: 505,
      VariantAlsoNegotiates: 506,
      InsufficientStorage: 507,
      LoopDetected: 508,
      NotExtended: 510,
      NetworkAuthenticationRequired: 511
    };
    Object.entries(HttpStatusCode).forEach(([key, value]) => {
      HttpStatusCode[value] = key;
    });
    var HttpStatusCode$1 = HttpStatusCode;
    function createInstance(defaultConfig) {
      const context = new Axios$1(defaultConfig);
      const instance = bind(Axios$1.prototype.request, context);
      utils$1.extend(instance, Axios$1.prototype, context, { allOwnKeys: true });
      utils$1.extend(instance, context, null, { allOwnKeys: true });
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios = createInstance(defaults$1);
    axios.Axios = Axios$1;
    axios.CanceledError = CanceledError;
    axios.CancelToken = CancelToken$1;
    axios.isCancel = isCancel;
    axios.VERSION = VERSION;
    axios.toFormData = toFormData;
    axios.AxiosError = AxiosError;
    axios.Cancel = axios.CanceledError;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = spread;
    axios.isAxiosError = isAxiosError;
    axios.mergeConfig = mergeConfig;
    axios.AxiosHeaders = AxiosHeaders$1;
    axios.formToJSON = (thing) => formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);
    axios.getAdapter = adapters.getAdapter;
    axios.HttpStatusCode = HttpStatusCode$1;
    axios.default = axios;
    module.exports = axios;
  }
});

// ../../node_modules/.pnpm/plaid@31.1.0/node_modules/plaid/dist/base.js
var require_base = __commonJS({
  "../../node_modules/.pnpm/plaid@31.1.0/node_modules/plaid/dist/base.js"(exports) {
    "use strict";
    init_esm();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RequiredError = exports.BaseAPI = exports.COLLECTION_FORMATS = exports.BASE_PATH = void 0;
    var axios_1 = __importDefault(require_axios());
    exports.BASE_PATH = "https://production.plaid.com".replace(/\/+$/, "");
    exports.COLLECTION_FORMATS = {
      csv: ",",
      ssv: " ",
      tsv: "	",
      pipes: "|"
    };
    var BaseAPI = class {
      constructor(configuration2, basePath = exports.BASE_PATH, axios = axios_1.default) {
        this.basePath = basePath;
        this.axios = axios;
        if (configuration2) {
          this.configuration = configuration2;
          this.basePath = configuration2.basePath || this.basePath;
        }
      }
    };
    exports.BaseAPI = BaseAPI;
    var RequiredError = class extends Error {
      constructor(field, msg) {
        super(msg);
        this.field = field;
        this.name = "RequiredError";
      }
    };
    exports.RequiredError = RequiredError;
  }
});

// ../../node_modules/.pnpm/plaid@31.1.0/node_modules/plaid/dist/common.js
var require_common2 = __commonJS({
  "../../node_modules/.pnpm/plaid@31.1.0/node_modules/plaid/dist/common.js"(exports) {
    "use strict";
    init_esm();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createRequestFunction = exports.toPathString = exports.serializeDataIfNeeded = exports.setSearchParams = exports.setOAuthToObject = exports.setBearerAuthToObject = exports.setBasicAuthToObject = exports.setApiKeyToObject = exports.assertParamExists = exports.DUMMY_BASE_URL = void 0;
    var base_1 = require_base();
    exports.DUMMY_BASE_URL = "https://example.com";
    var assertParamExists = function(functionName, paramName, paramValue) {
      if (paramValue === null || paramValue === void 0) {
        throw new base_1.RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);
      }
    };
    exports.assertParamExists = assertParamExists;
    var setApiKeyToObject = function(object, keyParamName, configuration2) {
      return __awaiter(this, void 0, void 0, function* () {
        if (configuration2 && configuration2.apiKey) {
          const localVarApiKeyValue = typeof configuration2.apiKey === "function" ? yield configuration2.apiKey(keyParamName) : yield configuration2.apiKey;
          object[keyParamName] = localVarApiKeyValue;
        }
      });
    };
    exports.setApiKeyToObject = setApiKeyToObject;
    var setBasicAuthToObject = function(object, configuration2) {
      if (configuration2 && (configuration2.username || configuration2.password)) {
        object["auth"] = { username: configuration2.username, password: configuration2.password };
      }
    };
    exports.setBasicAuthToObject = setBasicAuthToObject;
    var setBearerAuthToObject = function(object, configuration2) {
      return __awaiter(this, void 0, void 0, function* () {
        if (configuration2 && configuration2.accessToken) {
          const accessToken = typeof configuration2.accessToken === "function" ? yield configuration2.accessToken() : yield configuration2.accessToken;
          object["Authorization"] = "Bearer " + accessToken;
        }
      });
    };
    exports.setBearerAuthToObject = setBearerAuthToObject;
    var setOAuthToObject = function(object, name, scopes, configuration2) {
      return __awaiter(this, void 0, void 0, function* () {
        if (configuration2 && configuration2.accessToken) {
          const localVarAccessTokenValue = typeof configuration2.accessToken === "function" ? yield configuration2.accessToken(name, scopes) : yield configuration2.accessToken;
          object["Authorization"] = "Bearer " + localVarAccessTokenValue;
        }
      });
    };
    exports.setOAuthToObject = setOAuthToObject;
    var setSearchParams = function(url, ...objects) {
      const searchParams = new URLSearchParams(url.search);
      for (const object of objects) {
        for (const key in object) {
          if (Array.isArray(object[key])) {
            searchParams.delete(key);
            for (const item of object[key]) {
              searchParams.append(key, item);
            }
          } else {
            searchParams.set(key, object[key]);
          }
        }
      }
      url.search = searchParams.toString();
    };
    exports.setSearchParams = setSearchParams;
    var serializeDataIfNeeded = function(value, requestOptions, configuration2) {
      const nonString = typeof value !== "string";
      const needsSerialization = nonString && configuration2 && configuration2.isJsonMime ? configuration2.isJsonMime(requestOptions.headers["Content-Type"]) : nonString;
      return needsSerialization ? JSON.stringify(value !== void 0 ? value : {}) : value || "";
    };
    exports.serializeDataIfNeeded = serializeDataIfNeeded;
    var toPathString = function(url) {
      return url.pathname + url.search + url.hash;
    };
    exports.toPathString = toPathString;
    var createRequestFunction = function(axiosArgs, globalAxios, BASE_PATH, configuration2) {
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(Object.assign({}, axiosArgs.options), { url: ((configuration2 === null || configuration2 === void 0 ? void 0 : configuration2.basePath) || basePath) + axiosArgs.url });
        return axios.request(axiosRequestArgs);
      };
    };
    exports.createRequestFunction = createRequestFunction;
  }
});

// ../../node_modules/.pnpm/plaid@31.1.0/node_modules/plaid/dist/api.js
var require_api = __commonJS({
  "../../node_modules/.pnpm/plaid@31.1.0/node_modules/plaid/dist/api.js"(exports) {
    "use strict";
    init_esm();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CraBankIncomeCompleteResult = exports.CraBankIncomeBonusType = exports.CountryCode = exports.CounterpartyType = exports.ConsumerReportPermissiblePurpose = exports.ConsumerDisputeCategory = exports.ConsentEventType = exports.ConsentEventInitiator = exports.ConsentEventCode = exports.CashflowAttributesVersion = exports.BeaconUserStatus = exports.BeaconReportType = exports.BeaconReportCreateType = exports.BeaconMatchSummaryCode = exports.BeaconAuditTrailSource = exports.BeaconAccountRiskEvaluateEvaluationReason = exports.BaseReportWarningCode = exports.BaseReportTransactionType = exports.BankTransferType = exports.BankTransferStatus = exports.BankTransferNetwork = exports.BankTransferEventType = exports.BankTransferEventListDirection = exports.BankTransferEventListBankTransferType = exports.BankTransferDirection = exports.BankIncomeRefreshCompleteResult = exports.BankIncomeCompleteResult = exports.BalancePlusRiskLevel = exports.AuthUpdateTypes = exports.AssetType = exports.AssetTransactionType = exports.AssetTransactionCategoryType = exports.AssetReportType = exports.AssetReportTransactionType = exports.AssetReportAddOns = exports.AddressPurposeLabel = exports.ActivityType = exports.ActionState = exports.AccountVerificationInsightsAccountNumberFormat = exports.AccountType = exports.AccountSubtype = exports.AccountSelectionCardinality = exports.AccountIdentityMatchScoreVerificationStatusEnum = exports.AccountIdentityDocumentUploadVerificationStatusEnum = exports.AccountIdentityVerificationStatusEnum = exports.AccountHolderCategory = exports.AccountBaseVerificationStatusEnum = exports.AccountAssetsVerificationStatusEnum = exports.APRAprTypeEnum = exports.ACHClass = void 0;
    exports.FraudCheckOutcome = exports.Form1099Type = exports.FDXPartyType = exports.FDXPartyRegistry = exports.FDXNotificationType = exports.FDXNotificationSeverity = exports.FDXNotificationPriority = exports.FDXNotificationPayloadIdType = exports.FDXNotificationCategory = exports.FDXHateoasLinkAction = exports.FDXContentTypes = exports.ExpirationDate = exports.EntityWatchlistCode = exports.EntityDocumentType = exports.EnrichTransactionDirection = exports.EmploymentVerificationStatus = exports.EmploymentSourceType = exports.EmailTypeEnum = exports.EarningsBreakdownCanonicalDescription = exports.DocumentStatus = exports.DocumentNameMatchCode = exports.DocumentDateOfBirthMatchCode = exports.DocumentAuthenticityMatchCode = exports.DocType = exports.DepositoryAccountSubtype = exports.DepositSwitchTargetAccountAccountSubtypeEnum = exports.DepositSwitchGetResponseSwitchMethodEnum = exports.DepositSwitchGetResponseStateEnum = exports.DepositSwitchCreateRequestCountryCodeEnum = exports.DepositSwitchAltCreateRequestCountryCodeEnum = exports.DataSources = exports.DashboardUserStatus = exports.CreditSessionBankIncomeStatus = exports.CreditSessionBankEmploymentStatus = exports.CreditPayStubPayBasisType = exports.CreditBankIncomeWarningType = exports.CreditBankIncomeWarningCode = exports.CreditBankIncomePayFrequency = exports.CreditBankIncomeErrorType = exports.CreditBankIncomeCategory = exports.CreditBankIncomeAccountType = exports.CreditBankEmploymentWarningType = exports.CreditAccountSubtype = exports.CreditACHClass = exports.CraPDFAddOns = exports.CraLoanType = exports.CraLoanStatus = exports.CraLoanPaymentSchedule = exports.CraLoanApplicationDecision = exports.CraBankIncomeWarningCode = void 0;
    exports.OwnershipType = exports.OverrideAccountType = exports.OtherAccountSubtype = exports.OriginatorExpectedTransferFrequency = exports.OmittableTransferType = exports.NetworkStatusGetResponseNetworkStatus = exports.MonitoringItemStatusCode = exports.MonitoringInsightsStatus = exports.MonitoringConsumerReportPermissiblePurpose = exports.MatchSummaryCode = exports.LoanIdentifierType = exports.LoanAccountSubtype = exports.LinkTokenCreateRequestAuthFlowTypeEnum = exports.LinkTokenCreateRequestAuthRerouteToCredentialsEnum = exports.LinkSessionSuccessMetadataTransferStatus = exports.LinkEventName = exports.LinkDeliveryWebhookDeliveryStatus = exports.LinkDeliveryWebhookCommunicationMethod = exports.LinkDeliveryWebhookCallbackType = exports.LinkDeliveryVerificationStatus = exports.LinkDeliverySessionStatus = exports.LinkDeliveryDeliveryMethod = exports.ItemWithConsentFieldsUpdateTypeEnum = exports.ItemCreateAuthentication = exports.ItemConsentedDataScope = exports.ItemAuthMethod = exports.ItemUpdateTypeEnum = exports.IssuingCountry = exports.IssuesStatus = exports.InvestmentTransactionType = exports.InvestmentTransactionSubtype = exports.InvestmentAccountSubtype = exports.IndividualWatchlistCode = exports.IncomeVerificationSourceType = exports.IncomeVerificationPrecheckConfidence = exports.IncomeVerificationPayrollFlowType = exports.IncomeVerificationDocParsingConfig = exports.IncomeBreakdownType = exports.IncidentUpdateStatusEnum = exports.ImageQualityOutcome = exports.ImageQuality = exports.IdentityVerificationStepStatus = exports.IdentityVerificationStatus = exports.IdentityVerificationAutofillStatus = exports.IdentityUpdateTypes = exports.ISOCurrencyCode = exports.IDNumberType = exports.HostedLinkDeliveryMethod = exports.HiddenMatchSummaryCode = exports.FraudCheckOutcomeWithNoData = void 0;
    exports.RiskCheckEmailTopLevelDomainIsSuspicious = exports.RiskCheckEmailIsDeliverableStatus = exports.RiskCheckEmailDomainIsFreeProvider = exports.RiskCheckEmailDomainIsDisposable = exports.RiskCheckEmailDomainIsCustom = exports.RiskCheckBehaviorUserInteractionsLabel = exports.RiskCheckBehaviorFraudRingDetectedLabel = exports.RiskCheckBehaviorBotDetectedLabel = exports.ReportType = exports.RecurringTransactionFrequency = exports.RecurringFrequency = exports.RecommendationString = exports.ProxyType = exports.ProgramNameSensitivity = exports.Products = exports.ProductStatusBreakdownRefreshIntervalEnum = exports.ProductStatusStatusEnum = exports.ProcessorTokenCreateRequestProcessorEnum = exports.PrismProduct = exports.PrismInsightsVersion = exports.PrismFirstDetectVersion = exports.PrismCashScoreVersion = exports.PlaidErrorType = exports.PhysicalDocumentCategory = exports.PhoneType = exports.PhoneNumberTypeEnum = exports.PendingDisconnectWebhookReason = exports.PaystubPayFrequency = exports.PaymentScheme = exports.PaymentScheduleInterval = exports.PaymentProfileStatus = exports.PaymentInitiationPaymentStatus = exports.PaymentInitiationPaymentCreateStatus = exports.PaymentInitiationConsentType = exports.PaymentInitiationConsentStatus = exports.PaymentInitiationConsentScope = exports.PaymentInitiationConsentProcessingMode = exports.PaymentConsentPeriodicInterval = exports.PaymentConsentPeriodicAlignment = exports.PaymentChannel = exports.PaymentAmountCurrency = exports.PayPeriodDetailsPayFrequency = exports.PayFrequencyValue = exports.PartyRoleType = exports.PartnerEndCustomerStatus = exports.PartnerEndCustomerQuestionnaireStatus = exports.PartnerEndCustomerOAuthStatusUpdatedValues = exports.PartnerEndCustomerOAuthInstitutionApplicationStatus = exports.PartnerEndCustomerFlowdownStatus = exports.POBoxStatus = void 0;
    exports.TransferDocumentPurpose = exports.TransferDiligenceStatus = exports.TransferCreditFundsSource = exports.TransferBalanceType = exports.TransferAuthorizationRiskLevel = exports.TransferAuthorizationGuaranteeDecisionRationaleCode = exports.TransferAuthorizationGuaranteeDecision = exports.TransferAuthorizationDecisionRationaleCode = exports.TransferAuthorizationDecision = exports.TransferACHNetwork = exports.TransactionsUpdateStatus = exports.TransactionsRuleType = exports.TransactionsRuleField = exports.TransactionStreamStatus = exports.TransactionCode = exports.TransactionBaseTransactionTypeEnum = exports.TransactionAllOfPaymentChannelEnum = exports.TransactionPaymentChannelEnum = exports.TransactionTransactionTypeEnum = exports.TotalCanonicalDescription = exports.TaxpayerIdentifierType = exports.SweepTrigger = exports.SweepStatus = exports.StudentRepaymentPlanTypeEnum = exports.StudentLoanStatusTypeEnum = exports.Strategy = exports.StatementsRefreshCompleteResult = exports.Source = exports.SignalScheduleDefaultPaymentMethod = exports.SignalPaymentMethod = exports.SignalDecisionOutcome = exports.ServiceProductFulfillmentIdentifier = exports.SelfieStatus = exports.SelfieCheckStatus = exports.SelfieAnalysisLivenessCheck = exports.SelfieAnalysisFacialAnalysisOutcome = exports.SelfieAnalysisDocumentComparison = exports.ScopesContext = exports.SandboxItemSetVerificationStatusRequestVerificationStatusEnum = exports.SandboxItemFireWebhookRequestWebhookCodeEnum = exports.SandboxIncomeWebhookFireRequestWebhookCode = exports.SandboxIncomeFireWebhookRequestVerificationStatusEnum = exports.SandboxBankIncomeWebhookFireRequestWebhookCode = exports.SMSVerificationStatus = exports.RiskSignalFileType = exports.RiskSignalDocumentType = exports.RiskSignalDocumentStatus = exports.RiskLevelWithNoData = exports.RiskLevel = exports.RiskCheckLinkedService = void 0;
    exports.PlaidApi = exports.PlaidApiFactory = exports.PlaidApiFp = exports.PlaidApiAxiosParamCreator = exports.YieldRateType = exports.WebhookType = exports.WebhookEnvironmentValues = exports.WeakAliasDetermination = exports.WatchlistScreeningStatus = exports.WatchlistScreeningIndividualUpdateRequestResettableField = exports.WatchlistScreeningHitStatus = exports.WatchlistScreeningEntityUpdateRequestResettableField = exports.WatchlistScreeningDocumentType = exports.WarningWarningCodeEnum = exports.WalletTransactionStatus = exports.WalletTransactionRelationTypeEnum = exports.WalletTransactionGetResponseTypeEnum = exports.WalletTransactionFailureReason = exports.WalletTransactionTypeEnum = exports.WalletStatus = exports.WalletPaymentScheme = exports.WalletISOCurrencyCode = exports.VerifySMSDetailsStatus = exports.VerificationStatus = exports.VerificationRefreshStatus = exports.UserStatedIncomeSourcePayType = exports.UserStatedIncomeSourceFrequency = exports.UserStatedIncomeSourceCategory = exports.TransferType = exports.TransferSweepStatus = exports.TransferStatus = exports.TransferScheduleIntervalUnit = exports.TransferRefundStatus = exports.TransferRecurringStatus = exports.TransferRecurringNetwork = exports.TransferNetwork = exports.TransferLedgerSweepSimulateEventType = exports.TransferIntentStatus = exports.TransferIntentCreateNetwork = exports.TransferIntentCreateMode = exports.TransferIntentAuthorizationDecision = exports.TransferEventType = exports.TransferEventListTransferType = void 0;
    var axios_1 = __importDefault(require_axios());
    var common_1 = require_common2();
    var base_1 = require_base();
    var ACHClass;
    (function(ACHClass2) {
      ACHClass2["Ccd"] = "ccd";
      ACHClass2["Ppd"] = "ppd";
      ACHClass2["Tel"] = "tel";
      ACHClass2["Web"] = "web";
    })(ACHClass = exports.ACHClass || (exports.ACHClass = {}));
    var APRAprTypeEnum;
    (function(APRAprTypeEnum2) {
      APRAprTypeEnum2["BalanceTransferApr"] = "balance_transfer_apr";
      APRAprTypeEnum2["CashApr"] = "cash_apr";
      APRAprTypeEnum2["PurchaseApr"] = "purchase_apr";
      APRAprTypeEnum2["Special"] = "special";
    })(APRAprTypeEnum = exports.APRAprTypeEnum || (exports.APRAprTypeEnum = {}));
    var AccountAssetsVerificationStatusEnum;
    (function(AccountAssetsVerificationStatusEnum2) {
      AccountAssetsVerificationStatusEnum2["AutomaticallyVerified"] = "automatically_verified";
      AccountAssetsVerificationStatusEnum2["PendingAutomaticVerification"] = "pending_automatic_verification";
      AccountAssetsVerificationStatusEnum2["PendingManualVerification"] = "pending_manual_verification";
      AccountAssetsVerificationStatusEnum2["ManuallyVerified"] = "manually_verified";
      AccountAssetsVerificationStatusEnum2["VerificationExpired"] = "verification_expired";
      AccountAssetsVerificationStatusEnum2["VerificationFailed"] = "verification_failed";
      AccountAssetsVerificationStatusEnum2["DatabaseMatched"] = "database_matched";
    })(AccountAssetsVerificationStatusEnum = exports.AccountAssetsVerificationStatusEnum || (exports.AccountAssetsVerificationStatusEnum = {}));
    var AccountBaseVerificationStatusEnum;
    (function(AccountBaseVerificationStatusEnum2) {
      AccountBaseVerificationStatusEnum2["AutomaticallyVerified"] = "automatically_verified";
      AccountBaseVerificationStatusEnum2["PendingAutomaticVerification"] = "pending_automatic_verification";
      AccountBaseVerificationStatusEnum2["PendingManualVerification"] = "pending_manual_verification";
      AccountBaseVerificationStatusEnum2["ManuallyVerified"] = "manually_verified";
      AccountBaseVerificationStatusEnum2["VerificationExpired"] = "verification_expired";
      AccountBaseVerificationStatusEnum2["VerificationFailed"] = "verification_failed";
      AccountBaseVerificationStatusEnum2["DatabaseMatched"] = "database_matched";
      AccountBaseVerificationStatusEnum2["DatabaseInsightsPass"] = "database_insights_pass";
      AccountBaseVerificationStatusEnum2["DatabaseInsightsPassWithCaution"] = "database_insights_pass_with_caution";
      AccountBaseVerificationStatusEnum2["DatabaseInsightsFail"] = "database_insights_fail";
    })(AccountBaseVerificationStatusEnum = exports.AccountBaseVerificationStatusEnum || (exports.AccountBaseVerificationStatusEnum = {}));
    var AccountHolderCategory;
    (function(AccountHolderCategory2) {
      AccountHolderCategory2["Business"] = "business";
      AccountHolderCategory2["Personal"] = "personal";
      AccountHolderCategory2["Unrecognized"] = "unrecognized";
    })(AccountHolderCategory = exports.AccountHolderCategory || (exports.AccountHolderCategory = {}));
    var AccountIdentityVerificationStatusEnum;
    (function(AccountIdentityVerificationStatusEnum2) {
      AccountIdentityVerificationStatusEnum2["AutomaticallyVerified"] = "automatically_verified";
      AccountIdentityVerificationStatusEnum2["PendingAutomaticVerification"] = "pending_automatic_verification";
      AccountIdentityVerificationStatusEnum2["PendingManualVerification"] = "pending_manual_verification";
      AccountIdentityVerificationStatusEnum2["ManuallyVerified"] = "manually_verified";
      AccountIdentityVerificationStatusEnum2["VerificationExpired"] = "verification_expired";
      AccountIdentityVerificationStatusEnum2["VerificationFailed"] = "verification_failed";
      AccountIdentityVerificationStatusEnum2["DatabaseMatched"] = "database_matched";
      AccountIdentityVerificationStatusEnum2["DatabaseInsightsPass"] = "database_insights_pass";
      AccountIdentityVerificationStatusEnum2["DatabaseInsightsPassWithCaution"] = "database_insights_pass_with_caution";
      AccountIdentityVerificationStatusEnum2["DatabaseInsightsFail"] = "database_insights_fail";
    })(AccountIdentityVerificationStatusEnum = exports.AccountIdentityVerificationStatusEnum || (exports.AccountIdentityVerificationStatusEnum = {}));
    var AccountIdentityDocumentUploadVerificationStatusEnum;
    (function(AccountIdentityDocumentUploadVerificationStatusEnum2) {
      AccountIdentityDocumentUploadVerificationStatusEnum2["AutomaticallyVerified"] = "automatically_verified";
      AccountIdentityDocumentUploadVerificationStatusEnum2["PendingAutomaticVerification"] = "pending_automatic_verification";
      AccountIdentityDocumentUploadVerificationStatusEnum2["PendingManualVerification"] = "pending_manual_verification";
      AccountIdentityDocumentUploadVerificationStatusEnum2["ManuallyVerified"] = "manually_verified";
      AccountIdentityDocumentUploadVerificationStatusEnum2["VerificationExpired"] = "verification_expired";
      AccountIdentityDocumentUploadVerificationStatusEnum2["VerificationFailed"] = "verification_failed";
      AccountIdentityDocumentUploadVerificationStatusEnum2["DatabaseMatched"] = "database_matched";
      AccountIdentityDocumentUploadVerificationStatusEnum2["DatabaseInsightsPass"] = "database_insights_pass";
      AccountIdentityDocumentUploadVerificationStatusEnum2["DatabaseInsightsPassWithCaution"] = "database_insights_pass_with_caution";
      AccountIdentityDocumentUploadVerificationStatusEnum2["DatabaseInsightsFail"] = "database_insights_fail";
    })(AccountIdentityDocumentUploadVerificationStatusEnum = exports.AccountIdentityDocumentUploadVerificationStatusEnum || (exports.AccountIdentityDocumentUploadVerificationStatusEnum = {}));
    var AccountIdentityMatchScoreVerificationStatusEnum;
    (function(AccountIdentityMatchScoreVerificationStatusEnum2) {
      AccountIdentityMatchScoreVerificationStatusEnum2["AutomaticallyVerified"] = "automatically_verified";
      AccountIdentityMatchScoreVerificationStatusEnum2["PendingAutomaticVerification"] = "pending_automatic_verification";
      AccountIdentityMatchScoreVerificationStatusEnum2["PendingManualVerification"] = "pending_manual_verification";
      AccountIdentityMatchScoreVerificationStatusEnum2["ManuallyVerified"] = "manually_verified";
      AccountIdentityMatchScoreVerificationStatusEnum2["VerificationExpired"] = "verification_expired";
      AccountIdentityMatchScoreVerificationStatusEnum2["VerificationFailed"] = "verification_failed";
      AccountIdentityMatchScoreVerificationStatusEnum2["DatabaseMatched"] = "database_matched";
      AccountIdentityMatchScoreVerificationStatusEnum2["DatabaseInsightsPass"] = "database_insights_pass";
      AccountIdentityMatchScoreVerificationStatusEnum2["DatabaseInsightsPassWithCaution"] = "database_insights_pass_with_caution";
      AccountIdentityMatchScoreVerificationStatusEnum2["DatabaseInsightsFail"] = "database_insights_fail";
    })(AccountIdentityMatchScoreVerificationStatusEnum = exports.AccountIdentityMatchScoreVerificationStatusEnum || (exports.AccountIdentityMatchScoreVerificationStatusEnum = {}));
    var AccountSelectionCardinality;
    (function(AccountSelectionCardinality2) {
      AccountSelectionCardinality2["SingleSelect"] = "SINGLE_SELECT";
      AccountSelectionCardinality2["MultiSelect"] = "MULTI_SELECT";
      AccountSelectionCardinality2["All"] = "ALL";
    })(AccountSelectionCardinality = exports.AccountSelectionCardinality || (exports.AccountSelectionCardinality = {}));
    var AccountSubtype;
    (function(AccountSubtype2) {
      AccountSubtype2["_401a"] = "401a";
      AccountSubtype2["_401k"] = "401k";
      AccountSubtype2["_403B"] = "403B";
      AccountSubtype2["_457b"] = "457b";
      AccountSubtype2["_529"] = "529";
      AccountSubtype2["Auto"] = "auto";
      AccountSubtype2["Brokerage"] = "brokerage";
      AccountSubtype2["Business"] = "business";
      AccountSubtype2["CashIsa"] = "cash isa";
      AccountSubtype2["CashManagement"] = "cash management";
      AccountSubtype2["Cd"] = "cd";
      AccountSubtype2["Checking"] = "checking";
      AccountSubtype2["Commercial"] = "commercial";
      AccountSubtype2["Construction"] = "construction";
      AccountSubtype2["Consumer"] = "consumer";
      AccountSubtype2["CreditCard"] = "credit card";
      AccountSubtype2["CryptoExchange"] = "crypto exchange";
      AccountSubtype2["Ebt"] = "ebt";
      AccountSubtype2["EducationSavingsAccount"] = "education savings account";
      AccountSubtype2["FixedAnnuity"] = "fixed annuity";
      AccountSubtype2["Gic"] = "gic";
      AccountSubtype2["HealthReimbursementArrangement"] = "health reimbursement arrangement";
      AccountSubtype2["HomeEquity"] = "home equity";
      AccountSubtype2["Hsa"] = "hsa";
      AccountSubtype2["Isa"] = "isa";
      AccountSubtype2["Ira"] = "ira";
      AccountSubtype2["Keogh"] = "keogh";
      AccountSubtype2["Lif"] = "lif";
      AccountSubtype2["LifeInsurance"] = "life insurance";
      AccountSubtype2["LineOfCredit"] = "line of credit";
      AccountSubtype2["Lira"] = "lira";
      AccountSubtype2["Loan"] = "loan";
      AccountSubtype2["Lrif"] = "lrif";
      AccountSubtype2["Lrsp"] = "lrsp";
      AccountSubtype2["MoneyMarket"] = "money market";
      AccountSubtype2["Mortgage"] = "mortgage";
      AccountSubtype2["MutualFund"] = "mutual fund";
      AccountSubtype2["NonCustodialWallet"] = "non-custodial wallet";
      AccountSubtype2["NonTaxableBrokerageAccount"] = "non-taxable brokerage account";
      AccountSubtype2["Other"] = "other";
      AccountSubtype2["OtherInsurance"] = "other insurance";
      AccountSubtype2["OtherAnnuity"] = "other annuity";
      AccountSubtype2["Overdraft"] = "overdraft";
      AccountSubtype2["Paypal"] = "paypal";
      AccountSubtype2["Payroll"] = "payroll";
      AccountSubtype2["Pension"] = "pension";
      AccountSubtype2["Prepaid"] = "prepaid";
      AccountSubtype2["Prif"] = "prif";
      AccountSubtype2["ProfitSharingPlan"] = "profit sharing plan";
      AccountSubtype2["Rdsp"] = "rdsp";
      AccountSubtype2["Resp"] = "resp";
      AccountSubtype2["Retirement"] = "retirement";
      AccountSubtype2["Rlif"] = "rlif";
      AccountSubtype2["Roth"] = "roth";
      AccountSubtype2["Roth401k"] = "roth 401k";
      AccountSubtype2["Rrif"] = "rrif";
      AccountSubtype2["Rrsp"] = "rrsp";
      AccountSubtype2["Sarsep"] = "sarsep";
      AccountSubtype2["Savings"] = "savings";
      AccountSubtype2["SepIra"] = "sep ira";
      AccountSubtype2["SimpleIra"] = "simple ira";
      AccountSubtype2["Sipp"] = "sipp";
      AccountSubtype2["StockPlan"] = "stock plan";
      AccountSubtype2["Student"] = "student";
      AccountSubtype2["ThriftSavingsPlan"] = "thrift savings plan";
      AccountSubtype2["Tfsa"] = "tfsa";
      AccountSubtype2["Trust"] = "trust";
      AccountSubtype2["Ugma"] = "ugma";
      AccountSubtype2["Utma"] = "utma";
      AccountSubtype2["VariableAnnuity"] = "variable annuity";
    })(AccountSubtype = exports.AccountSubtype || (exports.AccountSubtype = {}));
    var AccountType;
    (function(AccountType2) {
      AccountType2["Investment"] = "investment";
      AccountType2["Credit"] = "credit";
      AccountType2["Depository"] = "depository";
      AccountType2["Loan"] = "loan";
      AccountType2["Brokerage"] = "brokerage";
      AccountType2["Other"] = "other";
    })(AccountType = exports.AccountType || (exports.AccountType = {}));
    var AccountVerificationInsightsAccountNumberFormat;
    (function(AccountVerificationInsightsAccountNumberFormat2) {
      AccountVerificationInsightsAccountNumberFormat2["Valid"] = "valid";
      AccountVerificationInsightsAccountNumberFormat2["Invalid"] = "invalid";
      AccountVerificationInsightsAccountNumberFormat2["Unknown"] = "unknown";
    })(AccountVerificationInsightsAccountNumberFormat = exports.AccountVerificationInsightsAccountNumberFormat || (exports.AccountVerificationInsightsAccountNumberFormat = {}));
    var ActionState;
    (function(ActionState2) {
      ActionState2["Unknown"] = "UNKNOWN";
      ActionState2["Attempt"] = "ATTEMPT";
      ActionState2["Success"] = "SUCCESS";
      ActionState2["Failure"] = "FAILURE";
      ActionState2["Skipped"] = "SKIPPED";
    })(ActionState = exports.ActionState || (exports.ActionState = {}));
    var ActivityType;
    (function(ActivityType2) {
      ActivityType2["Unknown"] = "UNKNOWN";
      ActivityType2["ItemCreate"] = "ITEM_CREATE";
      ActivityType2["ItemImport"] = "ITEM_IMPORT";
      ActivityType2["ItemUpdate"] = "ITEM_UPDATE";
      ActivityType2["ItemUnlink"] = "ITEM_UNLINK";
      ActivityType2["PortalUnlink"] = "PORTAL_UNLINK";
      ActivityType2["PortalItemsDelete"] = "PORTAL_ITEMS_DELETE";
      ActivityType2["ItemRemove"] = "ITEM_REMOVE";
      ActivityType2["InvariantCheckerDeletion"] = "INVARIANT_CHECKER_DELETION";
      ActivityType2["ScopesUpdate"] = "SCOPES_UPDATE";
    })(ActivityType = exports.ActivityType || (exports.ActivityType = {}));
    var AddressPurposeLabel;
    (function(AddressPurposeLabel2) {
      AddressPurposeLabel2["Residential"] = "residential";
      AddressPurposeLabel2["Commercial"] = "commercial";
      AddressPurposeLabel2["NoData"] = "no_data";
    })(AddressPurposeLabel = exports.AddressPurposeLabel || (exports.AddressPurposeLabel = {}));
    var AssetReportAddOns;
    (function(AssetReportAddOns2) {
      AssetReportAddOns2["Investments"] = "investments";
      AssetReportAddOns2["FastAssets"] = "fast_assets";
    })(AssetReportAddOns = exports.AssetReportAddOns || (exports.AssetReportAddOns = {}));
    var AssetReportTransactionType;
    (function(AssetReportTransactionType2) {
      AssetReportTransactionType2["Digital"] = "digital";
      AssetReportTransactionType2["Place"] = "place";
      AssetReportTransactionType2["Special"] = "special";
      AssetReportTransactionType2["Unresolved"] = "unresolved";
    })(AssetReportTransactionType = exports.AssetReportTransactionType || (exports.AssetReportTransactionType = {}));
    var AssetReportType;
    (function(AssetReportType2) {
      AssetReportType2["Full"] = "FULL";
      AssetReportType2["Fast"] = "FAST";
    })(AssetReportType = exports.AssetReportType || (exports.AssetReportType = {}));
    var AssetTransactionCategoryType;
    (function(AssetTransactionCategoryType2) {
      AssetTransactionCategoryType2["AtmFee"] = "ATMFee";
      AssetTransactionCategoryType2["Advertising"] = "Advertising";
      AssetTransactionCategoryType2["AirTravel"] = "AirTravel";
      AssetTransactionCategoryType2["AlcoholBars"] = "AlcoholBars";
      AssetTransactionCategoryType2["Allowance"] = "Allowance";
      AssetTransactionCategoryType2["Amusement"] = "Amusement";
      AssetTransactionCategoryType2["Arts"] = "Arts";
      AssetTransactionCategoryType2["AutoTransport"] = "AutoTransport";
      AssetTransactionCategoryType2["AutoInsurance"] = "AutoInsurance";
      AssetTransactionCategoryType2["AutoPayment"] = "AutoPayment";
      AssetTransactionCategoryType2["BabySupplies"] = "BabySupplies";
      AssetTransactionCategoryType2["BabysitterDaycare"] = "BabysitterDaycare";
      AssetTransactionCategoryType2["BankFee"] = "BankFee";
      AssetTransactionCategoryType2["BillsUtilities"] = "BillsUtilities";
      AssetTransactionCategoryType2["Bonus"] = "Bonus";
      AssetTransactionCategoryType2["BooksSupplies"] = "BooksSupplies";
      AssetTransactionCategoryType2["BusinessServices"] = "Business Services";
      AssetTransactionCategoryType2["Buy"] = "Buy";
      AssetTransactionCategoryType2["CashAtm"] = "CashATM";
      AssetTransactionCategoryType2["Charity"] = "Charity";
      AssetTransactionCategoryType2["Check"] = "Check";
      AssetTransactionCategoryType2["ChildSupport"] = "ChildSupport";
      AssetTransactionCategoryType2["Clothing"] = "Clothing";
      AssetTransactionCategoryType2["CoffeeShops"] = "CoffeeShops";
      AssetTransactionCategoryType2["CreditCardPayment"] = "CreditCardPayment";
      AssetTransactionCategoryType2["Dentist"] = "Dentist";
      AssetTransactionCategoryType2["Doctor"] = "Doctor";
      AssetTransactionCategoryType2["Education"] = "Education";
      AssetTransactionCategoryType2["ElectronicsSoftware"] = "ElectronicsSoftware";
      AssetTransactionCategoryType2["Entertainment"] = "Entertainment";
      AssetTransactionCategoryType2["Eyecare"] = "Eyecare";
      AssetTransactionCategoryType2["FastFood"] = "FastFood";
      AssetTransactionCategoryType2["FederalTax"] = "FederalTax";
      AssetTransactionCategoryType2["FeesCharges"] = "FeesCharges";
      AssetTransactionCategoryType2["FinanceCharge"] = "FinanceCharge";
      AssetTransactionCategoryType2["Financial"] = "Financial";
      AssetTransactionCategoryType2["FinancialAdvisor"] = "FinancialAdvisor";
      AssetTransactionCategoryType2["FoodDining"] = "FoodDining";
      AssetTransactionCategoryType2["Furnishings"] = "Furnishings";
      AssetTransactionCategoryType2["GasFuel"] = "GasFuel";
      AssetTransactionCategoryType2["GiftsDonations"] = "GiftsDonations";
      AssetTransactionCategoryType2["Groceries"] = "Groceries";
      AssetTransactionCategoryType2["Gym"] = "Gym";
      AssetTransactionCategoryType2["Hair"] = "Hair";
      AssetTransactionCategoryType2["HealthFitness"] = "HealthFitness";
      AssetTransactionCategoryType2["HealthInsurance"] = "HealthInsurance";
      AssetTransactionCategoryType2["Hobbies"] = "Hobbies";
      AssetTransactionCategoryType2["Home"] = "Home";
      AssetTransactionCategoryType2["HomeImprovement"] = "HomeImprovement";
      AssetTransactionCategoryType2["HomeInsurance"] = "HomeInsurance";
      AssetTransactionCategoryType2["HomePhone"] = "HomePhone";
      AssetTransactionCategoryType2["HomeServices"] = "HomeServices";
      AssetTransactionCategoryType2["HomeSupplies"] = "HomeSupplies";
      AssetTransactionCategoryType2["Hotel"] = "Hotel";
      AssetTransactionCategoryType2["Income"] = "Income";
      AssetTransactionCategoryType2["InterestIncome"] = "InterestIncome";
      AssetTransactionCategoryType2["Internet"] = "Internet";
      AssetTransactionCategoryType2["Investments"] = "Investments";
      AssetTransactionCategoryType2["Kids"] = "Kids";
      AssetTransactionCategoryType2["KidsActivities"] = "KidsActivities";
      AssetTransactionCategoryType2["LateFee"] = "LateFee";
      AssetTransactionCategoryType2["Laundry"] = "Laundry";
      AssetTransactionCategoryType2["LawnGarden"] = "LawnGarden";
      AssetTransactionCategoryType2["Legal"] = "Legal";
      AssetTransactionCategoryType2["LifeInsurance"] = "LifeInsurance";
      AssetTransactionCategoryType2["LoanInsurance"] = "LoanInsurance";
      AssetTransactionCategoryType2["LoanPayment"] = "LoanPayment";
      AssetTransactionCategoryType2["Loans"] = "Loans";
      AssetTransactionCategoryType2["MobilePhone"] = "MobilePhone";
      AssetTransactionCategoryType2["MortgageRent"] = "MortgageRent";
      AssetTransactionCategoryType2["MoviesDvds"] = "MoviesDVDs";
      AssetTransactionCategoryType2["Music"] = "Music";
      AssetTransactionCategoryType2["NewspapersMagazines"] = "NewspapersMagazines";
      AssetTransactionCategoryType2["OfficeSupplies"] = "OfficeSupplies";
      AssetTransactionCategoryType2["Parking"] = "Parking";
      AssetTransactionCategoryType2["Paycheck"] = "Paycheck";
      AssetTransactionCategoryType2["PersonalCare"] = "PersonalCare";
      AssetTransactionCategoryType2["PetFoodSupplies"] = "PetFoodSupplies";
      AssetTransactionCategoryType2["PetGrooming"] = "PetGrooming";
      AssetTransactionCategoryType2["Pets"] = "Pets";
      AssetTransactionCategoryType2["Pharmacy"] = "Pharmacy";
      AssetTransactionCategoryType2["Printing"] = "Printing";
      AssetTransactionCategoryType2["PropertyTax"] = "Property Tax";
      AssetTransactionCategoryType2["PublicTransportation"] = "Public Transportation";
      AssetTransactionCategoryType2["Reimbursement"] = "Reimbursement";
      AssetTransactionCategoryType2["RentalCarTaxi"] = "RentalCarTaxi";
      AssetTransactionCategoryType2["Restaurants"] = "Restaurants";
      AssetTransactionCategoryType2["SalesTax"] = "SalesTax";
      AssetTransactionCategoryType2["ServiceParts"] = "ServiceParts";
      AssetTransactionCategoryType2["ServiceFee"] = "ServiceFee";
      AssetTransactionCategoryType2["Shipping"] = "Shipping";
      AssetTransactionCategoryType2["Shopping"] = "Shopping";
      AssetTransactionCategoryType2["SpaMassage"] = "SpaMassage";
      AssetTransactionCategoryType2["SportingGoods"] = "SportingGoods";
      AssetTransactionCategoryType2["Sports"] = "Sports";
      AssetTransactionCategoryType2["StateTax"] = "StateTax";
      AssetTransactionCategoryType2["StudentLoan"] = "Student Loan";
      AssetTransactionCategoryType2["Taxes"] = "Taxes";
      AssetTransactionCategoryType2["Television"] = "Television";
      AssetTransactionCategoryType2["Toys"] = "Toys";
      AssetTransactionCategoryType2["Transfer"] = "Transfer";
      AssetTransactionCategoryType2["Travel"] = "Travel";
      AssetTransactionCategoryType2["Tuition"] = "Tuition";
      AssetTransactionCategoryType2["Uncategorized"] = "Uncategorized";
      AssetTransactionCategoryType2["Utilities"] = "Utilities";
      AssetTransactionCategoryType2["Vacation"] = "Vacation";
      AssetTransactionCategoryType2["Veterinary"] = "Veterinary";
    })(AssetTransactionCategoryType = exports.AssetTransactionCategoryType || (exports.AssetTransactionCategoryType = {}));
    var AssetTransactionType;
    (function(AssetTransactionType2) {
      AssetTransactionType2["Credit"] = "Credit";
      AssetTransactionType2["Debit"] = "Debit";
    })(AssetTransactionType = exports.AssetTransactionType || (exports.AssetTransactionType = {}));
    var AssetType;
    (function(AssetType2) {
      AssetType2["CheckingAccount"] = "CheckingAccount";
      AssetType2["SavingsAccount"] = "SavingsAccount";
      AssetType2["Investment"] = "Investment";
      AssetType2["MoneyMarketFund"] = "MoneyMarketFund";
      AssetType2["Other"] = "Other";
    })(AssetType = exports.AssetType || (exports.AssetType = {}));
    var AuthUpdateTypes;
    (function(AuthUpdateTypes2) {
      AuthUpdateTypes2["AccountNumber"] = "ACCOUNT_NUMBER";
      AuthUpdateTypes2["RoutingNumber"] = "ROUTING_NUMBER";
    })(AuthUpdateTypes = exports.AuthUpdateTypes || (exports.AuthUpdateTypes = {}));
    var BalancePlusRiskLevel;
    (function(BalancePlusRiskLevel2) {
      BalancePlusRiskLevel2["High"] = "HIGH";
      BalancePlusRiskLevel2["MediumHigh"] = "MEDIUM_HIGH";
      BalancePlusRiskLevel2["Medium"] = "MEDIUM";
      BalancePlusRiskLevel2["MediumLow"] = "MEDIUM_LOW";
      BalancePlusRiskLevel2["Low"] = "LOW";
    })(BalancePlusRiskLevel = exports.BalancePlusRiskLevel || (exports.BalancePlusRiskLevel = {}));
    var BankIncomeCompleteResult;
    (function(BankIncomeCompleteResult2) {
      BankIncomeCompleteResult2["Success"] = "SUCCESS";
      BankIncomeCompleteResult2["Failure"] = "FAILURE";
    })(BankIncomeCompleteResult = exports.BankIncomeCompleteResult || (exports.BankIncomeCompleteResult = {}));
    var BankIncomeRefreshCompleteResult;
    (function(BankIncomeRefreshCompleteResult2) {
      BankIncomeRefreshCompleteResult2["Success"] = "SUCCESS";
      BankIncomeRefreshCompleteResult2["Failure"] = "FAILURE";
    })(BankIncomeRefreshCompleteResult = exports.BankIncomeRefreshCompleteResult || (exports.BankIncomeRefreshCompleteResult = {}));
    var BankTransferDirection;
    (function(BankTransferDirection2) {
      BankTransferDirection2["Outbound"] = "outbound";
      BankTransferDirection2["Inbound"] = "inbound";
      BankTransferDirection2["Null"] = "null";
    })(BankTransferDirection = exports.BankTransferDirection || (exports.BankTransferDirection = {}));
    var BankTransferEventListBankTransferType;
    (function(BankTransferEventListBankTransferType2) {
      BankTransferEventListBankTransferType2["Debit"] = "debit";
      BankTransferEventListBankTransferType2["Credit"] = "credit";
      BankTransferEventListBankTransferType2["Null"] = "null";
    })(BankTransferEventListBankTransferType = exports.BankTransferEventListBankTransferType || (exports.BankTransferEventListBankTransferType = {}));
    var BankTransferEventListDirection;
    (function(BankTransferEventListDirection2) {
      BankTransferEventListDirection2["Inbound"] = "inbound";
      BankTransferEventListDirection2["Outbound"] = "outbound";
      BankTransferEventListDirection2["Null"] = "null";
    })(BankTransferEventListDirection = exports.BankTransferEventListDirection || (exports.BankTransferEventListDirection = {}));
    var BankTransferEventType;
    (function(BankTransferEventType2) {
      BankTransferEventType2["Pending"] = "pending";
      BankTransferEventType2["Cancelled"] = "cancelled";
      BankTransferEventType2["Failed"] = "failed";
      BankTransferEventType2["Posted"] = "posted";
      BankTransferEventType2["Reversed"] = "reversed";
    })(BankTransferEventType = exports.BankTransferEventType || (exports.BankTransferEventType = {}));
    var BankTransferNetwork;
    (function(BankTransferNetwork2) {
      BankTransferNetwork2["Ach"] = "ach";
      BankTransferNetwork2["SameDayAch"] = "same-day-ach";
      BankTransferNetwork2["Wire"] = "wire";
    })(BankTransferNetwork = exports.BankTransferNetwork || (exports.BankTransferNetwork = {}));
    var BankTransferStatus;
    (function(BankTransferStatus2) {
      BankTransferStatus2["Pending"] = "pending";
      BankTransferStatus2["Posted"] = "posted";
      BankTransferStatus2["Cancelled"] = "cancelled";
      BankTransferStatus2["Failed"] = "failed";
      BankTransferStatus2["Reversed"] = "reversed";
    })(BankTransferStatus = exports.BankTransferStatus || (exports.BankTransferStatus = {}));
    var BankTransferType;
    (function(BankTransferType2) {
      BankTransferType2["Debit"] = "debit";
      BankTransferType2["Credit"] = "credit";
    })(BankTransferType = exports.BankTransferType || (exports.BankTransferType = {}));
    var BaseReportTransactionType;
    (function(BaseReportTransactionType2) {
      BaseReportTransactionType2["Digital"] = "digital";
      BaseReportTransactionType2["Place"] = "place";
      BaseReportTransactionType2["Special"] = "special";
      BaseReportTransactionType2["Unresolved"] = "unresolved";
    })(BaseReportTransactionType = exports.BaseReportTransactionType || (exports.BaseReportTransactionType = {}));
    var BaseReportWarningCode;
    (function(BaseReportWarningCode2) {
      BaseReportWarningCode2["OwnersUnavailable"] = "OWNERS_UNAVAILABLE";
      BaseReportWarningCode2["TransactionsUnavailable"] = "TRANSACTIONS_UNAVAILABLE";
      BaseReportWarningCode2["UserFraudAlert"] = "USER_FRAUD_ALERT";
    })(BaseReportWarningCode = exports.BaseReportWarningCode || (exports.BaseReportWarningCode = {}));
    var BeaconAccountRiskEvaluateEvaluationReason;
    (function(BeaconAccountRiskEvaluateEvaluationReason2) {
      BeaconAccountRiskEvaluateEvaluationReason2["Onboarding"] = "ONBOARDING";
      BeaconAccountRiskEvaluateEvaluationReason2["NewAccount"] = "NEW_ACCOUNT";
      BeaconAccountRiskEvaluateEvaluationReason2["InformationChange"] = "INFORMATION_CHANGE";
      BeaconAccountRiskEvaluateEvaluationReason2["DormantUser"] = "DORMANT_USER";
      BeaconAccountRiskEvaluateEvaluationReason2["Other"] = "OTHER";
    })(BeaconAccountRiskEvaluateEvaluationReason = exports.BeaconAccountRiskEvaluateEvaluationReason || (exports.BeaconAccountRiskEvaluateEvaluationReason = {}));
    var BeaconAuditTrailSource;
    (function(BeaconAuditTrailSource2) {
      BeaconAuditTrailSource2["Dashboard"] = "dashboard";
      BeaconAuditTrailSource2["Api"] = "api";
      BeaconAuditTrailSource2["System"] = "system";
      BeaconAuditTrailSource2["BulkImport"] = "bulk_import";
    })(BeaconAuditTrailSource = exports.BeaconAuditTrailSource || (exports.BeaconAuditTrailSource = {}));
    var BeaconMatchSummaryCode;
    (function(BeaconMatchSummaryCode2) {
      BeaconMatchSummaryCode2["Match"] = "match";
      BeaconMatchSummaryCode2["PartialMatch"] = "partial_match";
      BeaconMatchSummaryCode2["NoMatch"] = "no_match";
      BeaconMatchSummaryCode2["NoData"] = "no_data";
    })(BeaconMatchSummaryCode = exports.BeaconMatchSummaryCode || (exports.BeaconMatchSummaryCode = {}));
    var BeaconReportCreateType;
    (function(BeaconReportCreateType2) {
      BeaconReportCreateType2["FirstParty"] = "first_party";
      BeaconReportCreateType2["Stolen"] = "stolen";
      BeaconReportCreateType2["Synthetic"] = "synthetic";
      BeaconReportCreateType2["AccountTakeover"] = "account_takeover";
      BeaconReportCreateType2["DataBreach"] = "data_breach";
      BeaconReportCreateType2["Unknown"] = "unknown";
    })(BeaconReportCreateType = exports.BeaconReportCreateType || (exports.BeaconReportCreateType = {}));
    var BeaconReportType;
    (function(BeaconReportType2) {
      BeaconReportType2["FirstParty"] = "first_party";
      BeaconReportType2["Stolen"] = "stolen";
      BeaconReportType2["Synthetic"] = "synthetic";
      BeaconReportType2["AccountTakeover"] = "account_takeover";
      BeaconReportType2["DataBreach"] = "data_breach";
      BeaconReportType2["Unknown"] = "unknown";
    })(BeaconReportType = exports.BeaconReportType || (exports.BeaconReportType = {}));
    var BeaconUserStatus;
    (function(BeaconUserStatus2) {
      BeaconUserStatus2["Rejected"] = "rejected";
      BeaconUserStatus2["PendingReview"] = "pending_review";
      BeaconUserStatus2["Cleared"] = "cleared";
    })(BeaconUserStatus = exports.BeaconUserStatus || (exports.BeaconUserStatus = {}));
    var CashflowAttributesVersion;
    (function(CashflowAttributesVersion2) {
      CashflowAttributesVersion2["V10"] = "v1.0";
    })(CashflowAttributesVersion = exports.CashflowAttributesVersion || (exports.CashflowAttributesVersion = {}));
    var ConsentEventCode;
    (function(ConsentEventCode2) {
      ConsentEventCode2["UserAgreement"] = "USER_AGREEMENT";
      ConsentEventCode2["UseCases"] = "USE_CASES";
      ConsentEventCode2["DataScopes"] = "DATA_SCOPES";
      ConsentEventCode2["AccountScopes"] = "ACCOUNT_SCOPES";
    })(ConsentEventCode = exports.ConsentEventCode || (exports.ConsentEventCode = {}));
    var ConsentEventInitiator;
    (function(ConsentEventInitiator2) {
      ConsentEventInitiator2["Plaid"] = "PLAID";
      ConsentEventInitiator2["DataProvider"] = "DATA_PROVIDER";
      ConsentEventInitiator2["Customer"] = "CUSTOMER";
      ConsentEventInitiator2["EndUser"] = "END_USER";
    })(ConsentEventInitiator = exports.ConsentEventInitiator || (exports.ConsentEventInitiator = {}));
    var ConsentEventType;
    (function(ConsentEventType2) {
      ConsentEventType2["Granted"] = "CONSENT_GRANTED";
      ConsentEventType2["Revoked"] = "CONSENT_REVOKED";
      ConsentEventType2["Updated"] = "CONSENT_UPDATED";
    })(ConsentEventType = exports.ConsentEventType || (exports.ConsentEventType = {}));
    var ConsumerDisputeCategory;
    (function(ConsumerDisputeCategory2) {
      ConsumerDisputeCategory2["Transaction"] = "TRANSACTION";
      ConsumerDisputeCategory2["Balance"] = "BALANCE";
      ConsumerDisputeCategory2["Identity"] = "IDENTITY";
      ConsumerDisputeCategory2["Other"] = "OTHER";
    })(ConsumerDisputeCategory = exports.ConsumerDisputeCategory || (exports.ConsumerDisputeCategory = {}));
    var ConsumerReportPermissiblePurpose;
    (function(ConsumerReportPermissiblePurpose2) {
      ConsumerReportPermissiblePurpose2["AccountReviewCredit"] = "ACCOUNT_REVIEW_CREDIT";
      ConsumerReportPermissiblePurpose2["AccountReviewNonCredit"] = "ACCOUNT_REVIEW_NON_CREDIT";
      ConsumerReportPermissiblePurpose2["Employment"] = "EMPLOYMENT";
      ConsumerReportPermissiblePurpose2["ExtensionOfCredit"] = "EXTENSION_OF_CREDIT";
      ConsumerReportPermissiblePurpose2["LegitimateBusinessNeedTenantScreening"] = "LEGITIMATE_BUSINESS_NEED_TENANT_SCREENING";
      ConsumerReportPermissiblePurpose2["LegitimateBusinessNeedOther"] = "LEGITIMATE_BUSINESS_NEED_OTHER";
      ConsumerReportPermissiblePurpose2["WrittenInstructionPrequalification"] = "WRITTEN_INSTRUCTION_PREQUALIFICATION";
      ConsumerReportPermissiblePurpose2["WrittenInstructionOther"] = "WRITTEN_INSTRUCTION_OTHER";
    })(ConsumerReportPermissiblePurpose = exports.ConsumerReportPermissiblePurpose || (exports.ConsumerReportPermissiblePurpose = {}));
    var CounterpartyType;
    (function(CounterpartyType2) {
      CounterpartyType2["Merchant"] = "merchant";
      CounterpartyType2["FinancialInstitution"] = "financial_institution";
      CounterpartyType2["PaymentApp"] = "payment_app";
      CounterpartyType2["Marketplace"] = "marketplace";
      CounterpartyType2["PaymentTerminal"] = "payment_terminal";
      CounterpartyType2["IncomeSource"] = "income_source";
    })(CounterpartyType = exports.CounterpartyType || (exports.CounterpartyType = {}));
    var CountryCode;
    (function(CountryCode2) {
      CountryCode2["Us"] = "US";
      CountryCode2["Gb"] = "GB";
      CountryCode2["Es"] = "ES";
      CountryCode2["Nl"] = "NL";
      CountryCode2["Fr"] = "FR";
      CountryCode2["Ie"] = "IE";
      CountryCode2["Ca"] = "CA";
      CountryCode2["De"] = "DE";
      CountryCode2["It"] = "IT";
      CountryCode2["Pl"] = "PL";
      CountryCode2["Dk"] = "DK";
      CountryCode2["No"] = "NO";
      CountryCode2["Se"] = "SE";
      CountryCode2["Ee"] = "EE";
      CountryCode2["Lt"] = "LT";
      CountryCode2["Lv"] = "LV";
      CountryCode2["Pt"] = "PT";
      CountryCode2["Be"] = "BE";
    })(CountryCode = exports.CountryCode || (exports.CountryCode = {}));
    var CraBankIncomeBonusType;
    (function(CraBankIncomeBonusType2) {
      CraBankIncomeBonusType2["BonusIncluded"] = "BONUS_INCLUDED";
      CraBankIncomeBonusType2["BonusOnly"] = "BONUS_ONLY";
      CraBankIncomeBonusType2["Null"] = "null";
    })(CraBankIncomeBonusType = exports.CraBankIncomeBonusType || (exports.CraBankIncomeBonusType = {}));
    var CraBankIncomeCompleteResult;
    (function(CraBankIncomeCompleteResult2) {
      CraBankIncomeCompleteResult2["Success"] = "SUCCESS";
      CraBankIncomeCompleteResult2["Failure"] = "FAILURE";
    })(CraBankIncomeCompleteResult = exports.CraBankIncomeCompleteResult || (exports.CraBankIncomeCompleteResult = {}));
    var CraBankIncomeWarningCode;
    (function(CraBankIncomeWarningCode2) {
      CraBankIncomeWarningCode2["IdentityUnavailable"] = "IDENTITY_UNAVAILABLE";
      CraBankIncomeWarningCode2["TransactionsUnavailable"] = "TRANSACTIONS_UNAVAILABLE";
      CraBankIncomeWarningCode2["ReportDeleted"] = "REPORT_DELETED";
      CraBankIncomeWarningCode2["DataUnavailable"] = "DATA_UNAVAILABLE";
    })(CraBankIncomeWarningCode = exports.CraBankIncomeWarningCode || (exports.CraBankIncomeWarningCode = {}));
    var CraLoanApplicationDecision;
    (function(CraLoanApplicationDecision2) {
      CraLoanApplicationDecision2["Approved"] = "APPROVED";
      CraLoanApplicationDecision2["Declined"] = "DECLINED";
      CraLoanApplicationDecision2["Other"] = "OTHER";
    })(CraLoanApplicationDecision = exports.CraLoanApplicationDecision || (exports.CraLoanApplicationDecision = {}));
    var CraLoanPaymentSchedule;
    (function(CraLoanPaymentSchedule2) {
      CraLoanPaymentSchedule2["Daily"] = "DAILY";
      CraLoanPaymentSchedule2["Weekly"] = "WEEKLY";
      CraLoanPaymentSchedule2["Biweekly"] = "BIWEEKLY";
      CraLoanPaymentSchedule2["Monthly"] = "MONTHLY";
      CraLoanPaymentSchedule2["Quarterly"] = "QUARTERLY";
      CraLoanPaymentSchedule2["Annually"] = "ANNUALLY";
      CraLoanPaymentSchedule2["Other"] = "OTHER";
    })(CraLoanPaymentSchedule = exports.CraLoanPaymentSchedule || (exports.CraLoanPaymentSchedule = {}));
    var CraLoanStatus;
    (function(CraLoanStatus2) {
      CraLoanStatus2["Approved"] = "APPROVED";
      CraLoanStatus2["Declined"] = "DECLINED";
      CraLoanStatus2["Booked"] = "BOOKED";
      CraLoanStatus2["Current"] = "CURRENT";
      CraLoanStatus2["Delinquent"] = "DELINQUENT";
      CraLoanStatus2["Default"] = "DEFAULT";
      CraLoanStatus2["ChargedOff"] = "CHARGED_OFF";
      CraLoanStatus2["Transferred"] = "TRANSFERRED";
      CraLoanStatus2["PaidOff"] = "PAID_OFF";
      CraLoanStatus2["Other"] = "OTHER";
    })(CraLoanStatus = exports.CraLoanStatus || (exports.CraLoanStatus = {}));
    var CraLoanType;
    (function(CraLoanType2) {
      CraLoanType2["Personal"] = "PERSONAL";
      CraLoanType2["CreditCard"] = "CREDIT_CARD";
      CraLoanType2["Business"] = "BUSINESS";
      CraLoanType2["Mortgage"] = "MORTGAGE";
      CraLoanType2["Auto"] = "AUTO";
      CraLoanType2["Payday"] = "PAYDAY";
      CraLoanType2["Student"] = "STUDENT";
      CraLoanType2["HomeEquity"] = "HOME_EQUITY";
      CraLoanType2["Other"] = "OTHER";
    })(CraLoanType = exports.CraLoanType || (exports.CraLoanType = {}));
    var CraPDFAddOns;
    (function(CraPDFAddOns2) {
      CraPDFAddOns2["CraIncomeInsights"] = "cra_income_insights";
    })(CraPDFAddOns = exports.CraPDFAddOns || (exports.CraPDFAddOns = {}));
    var CreditACHClass;
    (function(CreditACHClass2) {
      CreditACHClass2["Ccd"] = "ccd";
      CreditACHClass2["Ppd"] = "ppd";
      CreditACHClass2["Web"] = "web";
    })(CreditACHClass = exports.CreditACHClass || (exports.CreditACHClass = {}));
    var CreditAccountSubtype;
    (function(CreditAccountSubtype2) {
      CreditAccountSubtype2["CreditCard"] = "credit card";
      CreditAccountSubtype2["Paypal"] = "paypal";
      CreditAccountSubtype2["All"] = "all";
    })(CreditAccountSubtype = exports.CreditAccountSubtype || (exports.CreditAccountSubtype = {}));
    var CreditBankEmploymentWarningType;
    (function(CreditBankEmploymentWarningType2) {
      CreditBankEmploymentWarningType2["BankEmploymentWarning"] = "BANK_EMPLOYMENT_WARNING";
    })(CreditBankEmploymentWarningType = exports.CreditBankEmploymentWarningType || (exports.CreditBankEmploymentWarningType = {}));
    var CreditBankIncomeAccountType;
    (function(CreditBankIncomeAccountType2) {
      CreditBankIncomeAccountType2["Depository"] = "depository";
    })(CreditBankIncomeAccountType = exports.CreditBankIncomeAccountType || (exports.CreditBankIncomeAccountType = {}));
    var CreditBankIncomeCategory;
    (function(CreditBankIncomeCategory2) {
      CreditBankIncomeCategory2["Salary"] = "SALARY";
      CreditBankIncomeCategory2["Unemployment"] = "UNEMPLOYMENT";
      CreditBankIncomeCategory2["Cash"] = "CASH";
      CreditBankIncomeCategory2["GigEconomy"] = "GIG_ECONOMY";
      CreditBankIncomeCategory2["Rental"] = "RENTAL";
      CreditBankIncomeCategory2["ChildSupport"] = "CHILD_SUPPORT";
      CreditBankIncomeCategory2["Military"] = "MILITARY";
      CreditBankIncomeCategory2["Retirement"] = "RETIREMENT";
      CreditBankIncomeCategory2["LongTermDisability"] = "LONG_TERM_DISABILITY";
      CreditBankIncomeCategory2["BankInterest"] = "BANK_INTEREST";
      CreditBankIncomeCategory2["CashDeposit"] = "CASH_DEPOSIT";
      CreditBankIncomeCategory2["TransferFromApplication"] = "TRANSFER_FROM_APPLICATION";
      CreditBankIncomeCategory2["TaxRefund"] = "TAX_REFUND";
      CreditBankIncomeCategory2["BenefitOther"] = "BENEFIT_OTHER";
      CreditBankIncomeCategory2["Other"] = "OTHER";
    })(CreditBankIncomeCategory = exports.CreditBankIncomeCategory || (exports.CreditBankIncomeCategory = {}));
    var CreditBankIncomeErrorType;
    (function(CreditBankIncomeErrorType2) {
      CreditBankIncomeErrorType2["InternalServerError"] = "INTERNAL_SERVER_ERROR";
      CreditBankIncomeErrorType2["InsufficientCredentials"] = "INSUFFICIENT_CREDENTIALS";
      CreditBankIncomeErrorType2["ItemLocked"] = "ITEM_LOCKED";
      CreditBankIncomeErrorType2["UserSetupRequired"] = "USER_SETUP_REQUIRED";
      CreditBankIncomeErrorType2["CountryNotSupported"] = "COUNTRY_NOT_SUPPORTED";
      CreditBankIncomeErrorType2["InstitutionDown"] = "INSTITUTION_DOWN";
      CreditBankIncomeErrorType2["InstitutionNoLongerSupported"] = "INSTITUTION_NO_LONGER_SUPPORTED";
      CreditBankIncomeErrorType2["InstitutionNotResponding"] = "INSTITUTION_NOT_RESPONDING";
      CreditBankIncomeErrorType2["InvalidCredentials"] = "INVALID_CREDENTIALS";
      CreditBankIncomeErrorType2["InvalidMfa"] = "INVALID_MFA";
      CreditBankIncomeErrorType2["InvalidSendMethod"] = "INVALID_SEND_METHOD";
      CreditBankIncomeErrorType2["ItemLoginRequired"] = "ITEM_LOGIN_REQUIRED";
      CreditBankIncomeErrorType2["MfaNotSupported"] = "MFA_NOT_SUPPORTED";
      CreditBankIncomeErrorType2["NoAccounts"] = "NO_ACCOUNTS";
      CreditBankIncomeErrorType2["ItemNotSupported"] = "ITEM_NOT_SUPPORTED";
      CreditBankIncomeErrorType2["AccessNotGranted"] = "ACCESS_NOT_GRANTED";
    })(CreditBankIncomeErrorType = exports.CreditBankIncomeErrorType || (exports.CreditBankIncomeErrorType = {}));
    var CreditBankIncomePayFrequency;
    (function(CreditBankIncomePayFrequency2) {
      CreditBankIncomePayFrequency2["Weekly"] = "WEEKLY";
      CreditBankIncomePayFrequency2["Biweekly"] = "BIWEEKLY";
      CreditBankIncomePayFrequency2["SemiMonthly"] = "SEMI_MONTHLY";
      CreditBankIncomePayFrequency2["Monthly"] = "MONTHLY";
      CreditBankIncomePayFrequency2["Daily"] = "DAILY";
      CreditBankIncomePayFrequency2["Unknown"] = "UNKNOWN";
    })(CreditBankIncomePayFrequency = exports.CreditBankIncomePayFrequency || (exports.CreditBankIncomePayFrequency = {}));
    var CreditBankIncomeWarningCode;
    (function(CreditBankIncomeWarningCode2) {
      CreditBankIncomeWarningCode2["IdentityUnavailable"] = "IDENTITY_UNAVAILABLE";
      CreditBankIncomeWarningCode2["TransactionsUnavailable"] = "TRANSACTIONS_UNAVAILABLE";
      CreditBankIncomeWarningCode2["ItemUnapproved"] = "ITEM_UNAPPROVED";
      CreditBankIncomeWarningCode2["ReportDeleted"] = "REPORT_DELETED";
      CreditBankIncomeWarningCode2["DataUnavailable"] = "DATA_UNAVAILABLE";
    })(CreditBankIncomeWarningCode = exports.CreditBankIncomeWarningCode || (exports.CreditBankIncomeWarningCode = {}));
    var CreditBankIncomeWarningType;
    (function(CreditBankIncomeWarningType2) {
      CreditBankIncomeWarningType2["BankIncomeWarning"] = "BANK_INCOME_WARNING";
    })(CreditBankIncomeWarningType = exports.CreditBankIncomeWarningType || (exports.CreditBankIncomeWarningType = {}));
    var CreditPayStubPayBasisType;
    (function(CreditPayStubPayBasisType2) {
      CreditPayStubPayBasisType2["Salary"] = "SALARY";
      CreditPayStubPayBasisType2["Hourly"] = "HOURLY";
      CreditPayStubPayBasisType2["Commission"] = "COMMISSION";
    })(CreditPayStubPayBasisType = exports.CreditPayStubPayBasisType || (exports.CreditPayStubPayBasisType = {}));
    var CreditSessionBankEmploymentStatus;
    (function(CreditSessionBankEmploymentStatus2) {
      CreditSessionBankEmploymentStatus2["Approved"] = "APPROVED";
      CreditSessionBankEmploymentStatus2["NoEmployersFound"] = "NO_EMPLOYERS_FOUND";
      CreditSessionBankEmploymentStatus2["EmployerNotListed"] = "EMPLOYER_NOT_LISTED";
    })(CreditSessionBankEmploymentStatus = exports.CreditSessionBankEmploymentStatus || (exports.CreditSessionBankEmploymentStatus = {}));
    var CreditSessionBankIncomeStatus;
    (function(CreditSessionBankIncomeStatus2) {
      CreditSessionBankIncomeStatus2["Approved"] = "APPROVED";
      CreditSessionBankIncomeStatus2["NoDepositsFound"] = "NO_DEPOSITS_FOUND";
      CreditSessionBankIncomeStatus2["UserReportedNoIncome"] = "USER_REPORTED_NO_INCOME";
    })(CreditSessionBankIncomeStatus = exports.CreditSessionBankIncomeStatus || (exports.CreditSessionBankIncomeStatus = {}));
    var DashboardUserStatus;
    (function(DashboardUserStatus2) {
      DashboardUserStatus2["Invited"] = "invited";
      DashboardUserStatus2["Active"] = "active";
      DashboardUserStatus2["Deactivated"] = "deactivated";
    })(DashboardUserStatus = exports.DashboardUserStatus || (exports.DashboardUserStatus = {}));
    var DataSources;
    (function(DataSources2) {
      DataSources2["Institution"] = "INSTITUTION";
      DataSources2["InstitutionMask"] = "INSTITUTION_MASK";
      DataSources2["User"] = "USER";
    })(DataSources = exports.DataSources || (exports.DataSources = {}));
    var DepositSwitchAltCreateRequestCountryCodeEnum;
    (function(DepositSwitchAltCreateRequestCountryCodeEnum2) {
      DepositSwitchAltCreateRequestCountryCodeEnum2["Us"] = "US";
      DepositSwitchAltCreateRequestCountryCodeEnum2["Ca"] = "CA";
    })(DepositSwitchAltCreateRequestCountryCodeEnum = exports.DepositSwitchAltCreateRequestCountryCodeEnum || (exports.DepositSwitchAltCreateRequestCountryCodeEnum = {}));
    var DepositSwitchCreateRequestCountryCodeEnum;
    (function(DepositSwitchCreateRequestCountryCodeEnum2) {
      DepositSwitchCreateRequestCountryCodeEnum2["Us"] = "US";
      DepositSwitchCreateRequestCountryCodeEnum2["Ca"] = "CA";
    })(DepositSwitchCreateRequestCountryCodeEnum = exports.DepositSwitchCreateRequestCountryCodeEnum || (exports.DepositSwitchCreateRequestCountryCodeEnum = {}));
    var DepositSwitchGetResponseStateEnum;
    (function(DepositSwitchGetResponseStateEnum2) {
      DepositSwitchGetResponseStateEnum2["Initialized"] = "initialized";
      DepositSwitchGetResponseStateEnum2["Processing"] = "processing";
      DepositSwitchGetResponseStateEnum2["Completed"] = "completed";
      DepositSwitchGetResponseStateEnum2["Error"] = "error";
    })(DepositSwitchGetResponseStateEnum = exports.DepositSwitchGetResponseStateEnum || (exports.DepositSwitchGetResponseStateEnum = {}));
    var DepositSwitchGetResponseSwitchMethodEnum;
    (function(DepositSwitchGetResponseSwitchMethodEnum2) {
      DepositSwitchGetResponseSwitchMethodEnum2["Instant"] = "instant";
      DepositSwitchGetResponseSwitchMethodEnum2["Mail"] = "mail";
      DepositSwitchGetResponseSwitchMethodEnum2["Pdf"] = "pdf";
      DepositSwitchGetResponseSwitchMethodEnum2["Null"] = "null";
    })(DepositSwitchGetResponseSwitchMethodEnum = exports.DepositSwitchGetResponseSwitchMethodEnum || (exports.DepositSwitchGetResponseSwitchMethodEnum = {}));
    var DepositSwitchTargetAccountAccountSubtypeEnum;
    (function(DepositSwitchTargetAccountAccountSubtypeEnum2) {
      DepositSwitchTargetAccountAccountSubtypeEnum2["Checking"] = "checking";
      DepositSwitchTargetAccountAccountSubtypeEnum2["Savings"] = "savings";
    })(DepositSwitchTargetAccountAccountSubtypeEnum = exports.DepositSwitchTargetAccountAccountSubtypeEnum || (exports.DepositSwitchTargetAccountAccountSubtypeEnum = {}));
    var DepositoryAccountSubtype;
    (function(DepositoryAccountSubtype2) {
      DepositoryAccountSubtype2["Checking"] = "checking";
      DepositoryAccountSubtype2["Savings"] = "savings";
      DepositoryAccountSubtype2["Hsa"] = "hsa";
      DepositoryAccountSubtype2["Cd"] = "cd";
      DepositoryAccountSubtype2["MoneyMarket"] = "money market";
      DepositoryAccountSubtype2["Paypal"] = "paypal";
      DepositoryAccountSubtype2["Prepaid"] = "prepaid";
      DepositoryAccountSubtype2["CashManagement"] = "cash management";
      DepositoryAccountSubtype2["Ebt"] = "ebt";
      DepositoryAccountSubtype2["All"] = "all";
    })(DepositoryAccountSubtype = exports.DepositoryAccountSubtype || (exports.DepositoryAccountSubtype = {}));
    var DocType;
    (function(DocType2) {
      DocType2["Unknown"] = "UNKNOWN";
      DocType2["DocumentTypePaystub"] = "DOCUMENT_TYPE_PAYSTUB";
      DocType2["DocumentTypeBankStatement"] = "DOCUMENT_TYPE_BANK_STATEMENT";
      DocType2["DocumentTypeUsTaxW2"] = "DOCUMENT_TYPE_US_TAX_W2";
      DocType2["DocumentTypeUsMilitaryEras"] = "DOCUMENT_TYPE_US_MILITARY_ERAS";
      DocType2["DocumentTypeUsMilitaryLes"] = "DOCUMENT_TYPE_US_MILITARY_LES";
      DocType2["DocumentTypeUsMilitaryCles"] = "DOCUMENT_TYPE_US_MILITARY_CLES";
      DocType2["DocumentTypeGig"] = "DOCUMENT_TYPE_GIG";
      DocType2["DocumentTypeNone"] = "DOCUMENT_TYPE_NONE";
      DocType2["DocumentTypeUsTax1099Misc"] = "DOCUMENT_TYPE_US_TAX_1099_MISC";
      DocType2["DocumentTypeUsTax1099K"] = "DOCUMENT_TYPE_US_TAX_1099_K";
      DocType2["DocumentTypePlaidGeneratedPaystubPdf"] = "DOCUMENT_TYPE_PLAID_GENERATED_PAYSTUB_PDF";
    })(DocType = exports.DocType || (exports.DocType = {}));
    var DocumentAuthenticityMatchCode;
    (function(DocumentAuthenticityMatchCode2) {
      DocumentAuthenticityMatchCode2["Match"] = "match";
      DocumentAuthenticityMatchCode2["PartialMatch"] = "partial_match";
      DocumentAuthenticityMatchCode2["NoMatch"] = "no_match";
      DocumentAuthenticityMatchCode2["NoData"] = "no_data";
    })(DocumentAuthenticityMatchCode = exports.DocumentAuthenticityMatchCode || (exports.DocumentAuthenticityMatchCode = {}));
    var DocumentDateOfBirthMatchCode;
    (function(DocumentDateOfBirthMatchCode2) {
      DocumentDateOfBirthMatchCode2["Match"] = "match";
      DocumentDateOfBirthMatchCode2["PartialMatch"] = "partial_match";
      DocumentDateOfBirthMatchCode2["NoMatch"] = "no_match";
      DocumentDateOfBirthMatchCode2["NoData"] = "no_data";
    })(DocumentDateOfBirthMatchCode = exports.DocumentDateOfBirthMatchCode || (exports.DocumentDateOfBirthMatchCode = {}));
    var DocumentNameMatchCode;
    (function(DocumentNameMatchCode2) {
      DocumentNameMatchCode2["Match"] = "match";
      DocumentNameMatchCode2["PartialMatch"] = "partial_match";
      DocumentNameMatchCode2["NoMatch"] = "no_match";
      DocumentNameMatchCode2["NoData"] = "no_data";
    })(DocumentNameMatchCode = exports.DocumentNameMatchCode || (exports.DocumentNameMatchCode = {}));
    var DocumentStatus;
    (function(DocumentStatus2) {
      DocumentStatus2["Success"] = "success";
      DocumentStatus2["Failed"] = "failed";
      DocumentStatus2["ManuallyApproved"] = "manually_approved";
    })(DocumentStatus = exports.DocumentStatus || (exports.DocumentStatus = {}));
    var EarningsBreakdownCanonicalDescription;
    (function(EarningsBreakdownCanonicalDescription2) {
      EarningsBreakdownCanonicalDescription2["Bonus"] = "BONUS";
      EarningsBreakdownCanonicalDescription2["Commission"] = "COMMISSION";
      EarningsBreakdownCanonicalDescription2["Overtime"] = "OVERTIME";
      EarningsBreakdownCanonicalDescription2["PaidTimeOff"] = "PAID TIME OFF";
      EarningsBreakdownCanonicalDescription2["RegularPay"] = "REGULAR PAY";
      EarningsBreakdownCanonicalDescription2["Vacation"] = "VACATION";
      EarningsBreakdownCanonicalDescription2["BasicAllowanceHousing"] = "BASIC ALLOWANCE HOUSING";
      EarningsBreakdownCanonicalDescription2["BasicAllowanceSubsistence"] = "BASIC ALLOWANCE SUBSISTENCE";
      EarningsBreakdownCanonicalDescription2["Other"] = "OTHER";
      EarningsBreakdownCanonicalDescription2["Null"] = "null";
    })(EarningsBreakdownCanonicalDescription = exports.EarningsBreakdownCanonicalDescription || (exports.EarningsBreakdownCanonicalDescription = {}));
    var EmailTypeEnum;
    (function(EmailTypeEnum2) {
      EmailTypeEnum2["Primary"] = "primary";
      EmailTypeEnum2["Secondary"] = "secondary";
      EmailTypeEnum2["Other"] = "other";
    })(EmailTypeEnum = exports.EmailTypeEnum || (exports.EmailTypeEnum = {}));
    var EmploymentSourceType;
    (function(EmploymentSourceType2) {
      EmploymentSourceType2["Bank"] = "bank";
      EmploymentSourceType2["Payroll"] = "payroll";
    })(EmploymentSourceType = exports.EmploymentSourceType || (exports.EmploymentSourceType = {}));
    var EmploymentVerificationStatus;
    (function(EmploymentVerificationStatus2) {
      EmploymentVerificationStatus2["EmploymentStatusActive"] = "EMPLOYMENT_STATUS_ACTIVE";
      EmploymentVerificationStatus2["EmploymentStatusInactive"] = "EMPLOYMENT_STATUS_INACTIVE";
      EmploymentVerificationStatus2["Null"] = "null";
    })(EmploymentVerificationStatus = exports.EmploymentVerificationStatus || (exports.EmploymentVerificationStatus = {}));
    var EnrichTransactionDirection;
    (function(EnrichTransactionDirection2) {
      EnrichTransactionDirection2["Inflow"] = "INFLOW";
      EnrichTransactionDirection2["Outflow"] = "OUTFLOW";
    })(EnrichTransactionDirection = exports.EnrichTransactionDirection || (exports.EnrichTransactionDirection = {}));
    var EntityDocumentType;
    (function(EntityDocumentType2) {
      EntityDocumentType2["Bik"] = "bik";
      EntityDocumentType2["BusinessNumber"] = "business_number";
      EntityDocumentType2["Imo"] = "imo";
      EntityDocumentType2["Other"] = "other";
      EntityDocumentType2["Swift"] = "swift";
      EntityDocumentType2["TaxId"] = "tax_id";
    })(EntityDocumentType = exports.EntityDocumentType || (exports.EntityDocumentType = {}));
    var EntityWatchlistCode;
    (function(EntityWatchlistCode2) {
      EntityWatchlistCode2["CaCon"] = "CA_CON";
      EntityWatchlistCode2["EuCon"] = "EU_CON";
      EntityWatchlistCode2["IzSoe"] = "IZ_SOE";
      EntityWatchlistCode2["IzUnc"] = "IZ_UNC";
      EntityWatchlistCode2["IzWbk"] = "IZ_WBK";
      EntityWatchlistCode2["UsCap"] = "US_CAP";
      EntityWatchlistCode2["UsFse"] = "US_FSE";
      EntityWatchlistCode2["UsMbs"] = "US_MBS";
      EntityWatchlistCode2["UsSdn"] = "US_SDN";
      EntityWatchlistCode2["UsSsi"] = "US_SSI";
      EntityWatchlistCode2["UsCmc"] = "US_CMC";
      EntityWatchlistCode2["UsUvl"] = "US_UVL";
      EntityWatchlistCode2["AuCon"] = "AU_CON";
      EntityWatchlistCode2["UkHmc"] = "UK_HMC";
    })(EntityWatchlistCode = exports.EntityWatchlistCode || (exports.EntityWatchlistCode = {}));
    var ExpirationDate;
    (function(ExpirationDate2) {
      ExpirationDate2["NotExpired"] = "not_expired";
      ExpirationDate2["Expired"] = "expired";
      ExpirationDate2["NoData"] = "no_data";
    })(ExpirationDate = exports.ExpirationDate || (exports.ExpirationDate = {}));
    var FDXContentTypes;
    (function(FDXContentTypes2) {
      FDXContentTypes2["ApplicationPdf"] = "application/pdf";
      FDXContentTypes2["ImageGif"] = "image/gif";
      FDXContentTypes2["ImageJpeg"] = "image/jpeg";
      FDXContentTypes2["ImageTiff"] = "image/tiff";
      FDXContentTypes2["ImagePng"] = "image/png";
      FDXContentTypes2["ApplicationJson"] = "application/json";
    })(FDXContentTypes = exports.FDXContentTypes || (exports.FDXContentTypes = {}));
    var FDXHateoasLinkAction;
    (function(FDXHateoasLinkAction2) {
      FDXHateoasLinkAction2["Get"] = "GET";
      FDXHateoasLinkAction2["Post"] = "POST";
      FDXHateoasLinkAction2["Patch"] = "PATCH";
      FDXHateoasLinkAction2["Delete"] = "DELETE";
      FDXHateoasLinkAction2["Put"] = "PUT";
    })(FDXHateoasLinkAction = exports.FDXHateoasLinkAction || (exports.FDXHateoasLinkAction = {}));
    var FDXNotificationCategory;
    (function(FDXNotificationCategory2) {
      FDXNotificationCategory2["Security"] = "SECURITY";
      FDXNotificationCategory2["Maintenance"] = "MAINTENANCE";
      FDXNotificationCategory2["Fraud"] = "FRAUD";
      FDXNotificationCategory2["Consent"] = "CONSENT";
      FDXNotificationCategory2["NewData"] = "NEW_DATA";
    })(FDXNotificationCategory = exports.FDXNotificationCategory || (exports.FDXNotificationCategory = {}));
    var FDXNotificationPayloadIdType;
    (function(FDXNotificationPayloadIdType2) {
      FDXNotificationPayloadIdType2["Account"] = "ACCOUNT";
      FDXNotificationPayloadIdType2["Customer"] = "CUSTOMER";
      FDXNotificationPayloadIdType2["Party"] = "PARTY";
      FDXNotificationPayloadIdType2["Maintenance"] = "MAINTENANCE";
      FDXNotificationPayloadIdType2["Consent"] = "CONSENT";
    })(FDXNotificationPayloadIdType = exports.FDXNotificationPayloadIdType || (exports.FDXNotificationPayloadIdType = {}));
    var FDXNotificationPriority;
    (function(FDXNotificationPriority2) {
      FDXNotificationPriority2["High"] = "HIGH";
      FDXNotificationPriority2["Medium"] = "MEDIUM";
      FDXNotificationPriority2["Low"] = "LOW";
    })(FDXNotificationPriority = exports.FDXNotificationPriority || (exports.FDXNotificationPriority = {}));
    var FDXNotificationSeverity;
    (function(FDXNotificationSeverity2) {
      FDXNotificationSeverity2["Emergency"] = "EMERGENCY";
      FDXNotificationSeverity2["Alert"] = "ALERT";
      FDXNotificationSeverity2["Warning"] = "WARNING";
      FDXNotificationSeverity2["Notice"] = "NOTICE";
      FDXNotificationSeverity2["Info"] = "INFO";
    })(FDXNotificationSeverity = exports.FDXNotificationSeverity || (exports.FDXNotificationSeverity = {}));
    var FDXNotificationType;
    (function(FDXNotificationType2) {
      FDXNotificationType2["ConsentRevoked"] = "CONSENT_REVOKED";
      FDXNotificationType2["ConsentUpdated"] = "CONSENT_UPDATED";
      FDXNotificationType2["Custom"] = "CUSTOM";
      FDXNotificationType2["Service"] = "SERVICE";
      FDXNotificationType2["Balance"] = "BALANCE";
      FDXNotificationType2["PlannedOutage"] = "PLANNED_OUTAGE";
    })(FDXNotificationType = exports.FDXNotificationType || (exports.FDXNotificationType = {}));
    var FDXPartyRegistry;
    (function(FDXPartyRegistry2) {
      FDXPartyRegistry2["Fdx"] = "FDX";
      FDXPartyRegistry2["Gleif"] = "GLEIF";
      FDXPartyRegistry2["Icann"] = "ICANN";
      FDXPartyRegistry2["Private"] = "PRIVATE";
    })(FDXPartyRegistry = exports.FDXPartyRegistry || (exports.FDXPartyRegistry = {}));
    var FDXPartyType;
    (function(FDXPartyType2) {
      FDXPartyType2["DataAccessPlatform"] = "DATA_ACCESS_PLATFORM";
      FDXPartyType2["DataProvider"] = "DATA_PROVIDER";
      FDXPartyType2["DataRecipient"] = "DATA_RECIPIENT";
      FDXPartyType2["Individual"] = "INDIVIDUAL";
      FDXPartyType2["Merchant"] = "MERCHANT";
      FDXPartyType2["Vendor"] = "VENDOR";
    })(FDXPartyType = exports.FDXPartyType || (exports.FDXPartyType = {}));
    var Form1099Type;
    (function(Form1099Type2) {
      Form1099Type2["Unknown"] = "FORM_1099_TYPE_UNKNOWN";
      Form1099Type2["Misc"] = "FORM_1099_TYPE_MISC";
      Form1099Type2["K"] = "FORM_1099_TYPE_K";
    })(Form1099Type = exports.Form1099Type || (exports.Form1099Type = {}));
    var FraudCheckOutcome;
    (function(FraudCheckOutcome2) {
      FraudCheckOutcome2["Success"] = "success";
      FraudCheckOutcome2["Failed"] = "failed";
    })(FraudCheckOutcome = exports.FraudCheckOutcome || (exports.FraudCheckOutcome = {}));
    var FraudCheckOutcomeWithNoData;
    (function(FraudCheckOutcomeWithNoData2) {
      FraudCheckOutcomeWithNoData2["Success"] = "success";
      FraudCheckOutcomeWithNoData2["Failed"] = "failed";
      FraudCheckOutcomeWithNoData2["NoData"] = "no_data";
    })(FraudCheckOutcomeWithNoData = exports.FraudCheckOutcomeWithNoData || (exports.FraudCheckOutcomeWithNoData = {}));
    var HiddenMatchSummaryCode;
    (function(HiddenMatchSummaryCode2) {
      HiddenMatchSummaryCode2["Match"] = "match";
      HiddenMatchSummaryCode2["PartialMatch"] = "partial_match";
      HiddenMatchSummaryCode2["NoMatch"] = "no_match";
      HiddenMatchSummaryCode2["NoData"] = "no_data";
      HiddenMatchSummaryCode2["NoInput"] = "no_input";
    })(HiddenMatchSummaryCode = exports.HiddenMatchSummaryCode || (exports.HiddenMatchSummaryCode = {}));
    var HostedLinkDeliveryMethod;
    (function(HostedLinkDeliveryMethod2) {
      HostedLinkDeliveryMethod2["Sms"] = "sms";
      HostedLinkDeliveryMethod2["Email"] = "email";
    })(HostedLinkDeliveryMethod = exports.HostedLinkDeliveryMethod || (exports.HostedLinkDeliveryMethod = {}));
    var IDNumberType;
    (function(IDNumberType2) {
      IDNumberType2["ArDni"] = "ar_dni";
      IDNumberType2["AuDriversLicense"] = "au_drivers_license";
      IDNumberType2["AuPassport"] = "au_passport";
      IDNumberType2["BrCpf"] = "br_cpf";
      IDNumberType2["CaSin"] = "ca_sin";
      IDNumberType2["ClRun"] = "cl_run";
      IDNumberType2["CnResidentCard"] = "cn_resident_card";
      IDNumberType2["CoNit"] = "co_nit";
      IDNumberType2["DkCpr"] = "dk_cpr";
      IDNumberType2["EgNationalId"] = "eg_national_id";
      IDNumberType2["EsDni"] = "es_dni";
      IDNumberType2["EsNie"] = "es_nie";
      IDNumberType2["HkHkid"] = "hk_hkid";
      IDNumberType2["InPan"] = "in_pan";
      IDNumberType2["ItCf"] = "it_cf";
      IDNumberType2["JoCivilId"] = "jo_civil_id";
      IDNumberType2["JpMyNumber"] = "jp_my_number";
      IDNumberType2["KeHudumaNamba"] = "ke_huduma_namba";
      IDNumberType2["KwCivilId"] = "kw_civil_id";
      IDNumberType2["MxCurp"] = "mx_curp";
      IDNumberType2["MxRfc"] = "mx_rfc";
      IDNumberType2["MyNric"] = "my_nric";
      IDNumberType2["NgNin"] = "ng_nin";
      IDNumberType2["NzDriversLicense"] = "nz_drivers_license";
      IDNumberType2["OmCivilId"] = "om_civil_id";
      IDNumberType2["PhPsn"] = "ph_psn";
      IDNumberType2["PlPesel"] = "pl_pesel";
      IDNumberType2["RoCnp"] = "ro_cnp";
      IDNumberType2["SaNationalId"] = "sa_national_id";
      IDNumberType2["SePin"] = "se_pin";
      IDNumberType2["SgNric"] = "sg_nric";
      IDNumberType2["TrTcKimlik"] = "tr_tc_kimlik";
      IDNumberType2["UsSsn"] = "us_ssn";
      IDNumberType2["UsSsnLast4"] = "us_ssn_last_4";
      IDNumberType2["ZaSmartId"] = "za_smart_id";
    })(IDNumberType = exports.IDNumberType || (exports.IDNumberType = {}));
    var ISOCurrencyCode;
    (function(ISOCurrencyCode2) {
      ISOCurrencyCode2["Usd"] = "USD";
    })(ISOCurrencyCode = exports.ISOCurrencyCode || (exports.ISOCurrencyCode = {}));
    var IdentityUpdateTypes;
    (function(IdentityUpdateTypes2) {
      IdentityUpdateTypes2["Phones"] = "PHONES";
      IdentityUpdateTypes2["Addresses"] = "ADDRESSES";
      IdentityUpdateTypes2["Emails"] = "EMAILS";
      IdentityUpdateTypes2["Names"] = "NAMES";
    })(IdentityUpdateTypes = exports.IdentityUpdateTypes || (exports.IdentityUpdateTypes = {}));
    var IdentityVerificationAutofillStatus;
    (function(IdentityVerificationAutofillStatus2) {
      IdentityVerificationAutofillStatus2["Success"] = "success";
      IdentityVerificationAutofillStatus2["Failed"] = "failed";
    })(IdentityVerificationAutofillStatus = exports.IdentityVerificationAutofillStatus || (exports.IdentityVerificationAutofillStatus = {}));
    var IdentityVerificationStatus;
    (function(IdentityVerificationStatus2) {
      IdentityVerificationStatus2["Active"] = "active";
      IdentityVerificationStatus2["Success"] = "success";
      IdentityVerificationStatus2["Failed"] = "failed";
      IdentityVerificationStatus2["Expired"] = "expired";
      IdentityVerificationStatus2["Canceled"] = "canceled";
      IdentityVerificationStatus2["PendingReview"] = "pending_review";
    })(IdentityVerificationStatus = exports.IdentityVerificationStatus || (exports.IdentityVerificationStatus = {}));
    var IdentityVerificationStepStatus;
    (function(IdentityVerificationStepStatus2) {
      IdentityVerificationStepStatus2["Success"] = "success";
      IdentityVerificationStepStatus2["Active"] = "active";
      IdentityVerificationStepStatus2["Failed"] = "failed";
      IdentityVerificationStepStatus2["WaitingForPrerequisite"] = "waiting_for_prerequisite";
      IdentityVerificationStepStatus2["NotApplicable"] = "not_applicable";
      IdentityVerificationStepStatus2["Skipped"] = "skipped";
      IdentityVerificationStepStatus2["Expired"] = "expired";
      IdentityVerificationStepStatus2["Canceled"] = "canceled";
      IdentityVerificationStepStatus2["PendingReview"] = "pending_review";
      IdentityVerificationStepStatus2["ManuallyApproved"] = "manually_approved";
      IdentityVerificationStepStatus2["ManuallyRejected"] = "manually_rejected";
    })(IdentityVerificationStepStatus = exports.IdentityVerificationStepStatus || (exports.IdentityVerificationStepStatus = {}));
    var ImageQuality;
    (function(ImageQuality2) {
      ImageQuality2["High"] = "high";
      ImageQuality2["Medium"] = "medium";
      ImageQuality2["Low"] = "low";
    })(ImageQuality = exports.ImageQuality || (exports.ImageQuality = {}));
    var ImageQualityOutcome;
    (function(ImageQualityOutcome2) {
      ImageQualityOutcome2["Success"] = "success";
      ImageQualityOutcome2["Failed"] = "failed";
    })(ImageQualityOutcome = exports.ImageQualityOutcome || (exports.ImageQualityOutcome = {}));
    var IncidentUpdateStatusEnum;
    (function(IncidentUpdateStatusEnum2) {
      IncidentUpdateStatusEnum2["Investigating"] = "INVESTIGATING";
      IncidentUpdateStatusEnum2["Identified"] = "IDENTIFIED";
      IncidentUpdateStatusEnum2["Scheduled"] = "SCHEDULED";
      IncidentUpdateStatusEnum2["Resolved"] = "RESOLVED";
      IncidentUpdateStatusEnum2["Unknown"] = "UNKNOWN";
    })(IncidentUpdateStatusEnum = exports.IncidentUpdateStatusEnum || (exports.IncidentUpdateStatusEnum = {}));
    var IncomeBreakdownType;
    (function(IncomeBreakdownType2) {
      IncomeBreakdownType2["Bonus"] = "bonus";
      IncomeBreakdownType2["Overtime"] = "overtime";
      IncomeBreakdownType2["Regular"] = "regular";
      IncomeBreakdownType2["Null"] = "null";
    })(IncomeBreakdownType = exports.IncomeBreakdownType || (exports.IncomeBreakdownType = {}));
    var IncomeVerificationDocParsingConfig;
    (function(IncomeVerificationDocParsingConfig2) {
      IncomeVerificationDocParsingConfig2["Ocr"] = "ocr";
      IncomeVerificationDocParsingConfig2["RiskSignals"] = "risk_signals";
    })(IncomeVerificationDocParsingConfig = exports.IncomeVerificationDocParsingConfig || (exports.IncomeVerificationDocParsingConfig = {}));
    var IncomeVerificationPayrollFlowType;
    (function(IncomeVerificationPayrollFlowType2) {
      IncomeVerificationPayrollFlowType2["DigitalIncome"] = "payroll_digital_income";
      IncomeVerificationPayrollFlowType2["DocumentIncome"] = "payroll_document_income";
    })(IncomeVerificationPayrollFlowType = exports.IncomeVerificationPayrollFlowType || (exports.IncomeVerificationPayrollFlowType = {}));
    var IncomeVerificationPrecheckConfidence;
    (function(IncomeVerificationPrecheckConfidence2) {
      IncomeVerificationPrecheckConfidence2["High"] = "HIGH";
      IncomeVerificationPrecheckConfidence2["Low"] = "LOW";
      IncomeVerificationPrecheckConfidence2["Unknown"] = "UNKNOWN";
    })(IncomeVerificationPrecheckConfidence = exports.IncomeVerificationPrecheckConfidence || (exports.IncomeVerificationPrecheckConfidence = {}));
    var IncomeVerificationSourceType;
    (function(IncomeVerificationSourceType2) {
      IncomeVerificationSourceType2["Bank"] = "bank";
      IncomeVerificationSourceType2["Payroll"] = "payroll";
    })(IncomeVerificationSourceType = exports.IncomeVerificationSourceType || (exports.IncomeVerificationSourceType = {}));
    var IndividualWatchlistCode;
    (function(IndividualWatchlistCode2) {
      IndividualWatchlistCode2["AuCon"] = "AU_CON";
      IndividualWatchlistCode2["CaCon"] = "CA_CON";
      IndividualWatchlistCode2["EuCon"] = "EU_CON";
      IndividualWatchlistCode2["IzCia"] = "IZ_CIA";
      IndividualWatchlistCode2["IzIpl"] = "IZ_IPL";
      IndividualWatchlistCode2["IzPep"] = "IZ_PEP";
      IndividualWatchlistCode2["IzUnc"] = "IZ_UNC";
      IndividualWatchlistCode2["IzWbk"] = "IZ_WBK";
      IndividualWatchlistCode2["UkHmc"] = "UK_HMC";
      IndividualWatchlistCode2["UsDpl"] = "US_DPL";
      IndividualWatchlistCode2["UsDtc"] = "US_DTC";
      IndividualWatchlistCode2["UsFbi"] = "US_FBI";
      IndividualWatchlistCode2["UsFse"] = "US_FSE";
      IndividualWatchlistCode2["UsIsn"] = "US_ISN";
      IndividualWatchlistCode2["UsMbs"] = "US_MBS";
      IndividualWatchlistCode2["UsPlc"] = "US_PLC";
      IndividualWatchlistCode2["UsSdn"] = "US_SDN";
      IndividualWatchlistCode2["UsSsi"] = "US_SSI";
      IndividualWatchlistCode2["SgSof"] = "SG_SOF";
      IndividualWatchlistCode2["TrTwl"] = "TR_TWL";
      IndividualWatchlistCode2["TrDfd"] = "TR_DFD";
      IndividualWatchlistCode2["TrFor"] = "TR_FOR";
      IndividualWatchlistCode2["TrWmd"] = "TR_WMD";
      IndividualWatchlistCode2["TrCmb"] = "TR_CMB";
    })(IndividualWatchlistCode = exports.IndividualWatchlistCode || (exports.IndividualWatchlistCode = {}));
    var InvestmentAccountSubtype;
    (function(InvestmentAccountSubtype2) {
      InvestmentAccountSubtype2["_529"] = "529";
      InvestmentAccountSubtype2["_401a"] = "401a";
      InvestmentAccountSubtype2["_401k"] = "401k";
      InvestmentAccountSubtype2["_403B"] = "403B";
      InvestmentAccountSubtype2["_457b"] = "457b";
      InvestmentAccountSubtype2["Brokerage"] = "brokerage";
      InvestmentAccountSubtype2["CashIsa"] = "cash isa";
      InvestmentAccountSubtype2["CryptoExchange"] = "crypto exchange";
      InvestmentAccountSubtype2["EducationSavingsAccount"] = "education savings account";
      InvestmentAccountSubtype2["FixedAnnuity"] = "fixed annuity";
      InvestmentAccountSubtype2["Gic"] = "gic";
      InvestmentAccountSubtype2["HealthReimbursementArrangement"] = "health reimbursement arrangement";
      InvestmentAccountSubtype2["Hsa"] = "hsa";
      InvestmentAccountSubtype2["Ira"] = "ira";
      InvestmentAccountSubtype2["Isa"] = "isa";
      InvestmentAccountSubtype2["Keogh"] = "keogh";
      InvestmentAccountSubtype2["Lif"] = "lif";
      InvestmentAccountSubtype2["LifeInsurance"] = "life insurance";
      InvestmentAccountSubtype2["Lira"] = "lira";
      InvestmentAccountSubtype2["Lrif"] = "lrif";
      InvestmentAccountSubtype2["Lrsp"] = "lrsp";
      InvestmentAccountSubtype2["MutualFund"] = "mutual fund";
      InvestmentAccountSubtype2["NonCustodialWallet"] = "non-custodial wallet";
      InvestmentAccountSubtype2["NonTaxableBrokerageAccount"] = "non-taxable brokerage account";
      InvestmentAccountSubtype2["Other"] = "other";
      InvestmentAccountSubtype2["OtherAnnuity"] = "other annuity";
      InvestmentAccountSubtype2["OtherInsurance"] = "other insurance";
      InvestmentAccountSubtype2["Pension"] = "pension";
      InvestmentAccountSubtype2["Prif"] = "prif";
      InvestmentAccountSubtype2["ProfitSharingPlan"] = "profit sharing plan";
      InvestmentAccountSubtype2["Qshr"] = "qshr";
      InvestmentAccountSubtype2["Rdsp"] = "rdsp";
      InvestmentAccountSubtype2["Resp"] = "resp";
      InvestmentAccountSubtype2["Retirement"] = "retirement";
      InvestmentAccountSubtype2["Rlif"] = "rlif";
      InvestmentAccountSubtype2["Roth"] = "roth";
      InvestmentAccountSubtype2["Roth401k"] = "roth 401k";
      InvestmentAccountSubtype2["Rrif"] = "rrif";
      InvestmentAccountSubtype2["Rrsp"] = "rrsp";
      InvestmentAccountSubtype2["Sarsep"] = "sarsep";
      InvestmentAccountSubtype2["SepIra"] = "sep ira";
      InvestmentAccountSubtype2["SimpleIra"] = "simple ira";
      InvestmentAccountSubtype2["Sipp"] = "sipp";
      InvestmentAccountSubtype2["StockPlan"] = "stock plan";
      InvestmentAccountSubtype2["Tfsa"] = "tfsa";
      InvestmentAccountSubtype2["Trust"] = "trust";
      InvestmentAccountSubtype2["Ugma"] = "ugma";
      InvestmentAccountSubtype2["Utma"] = "utma";
      InvestmentAccountSubtype2["VariableAnnuity"] = "variable annuity";
      InvestmentAccountSubtype2["All"] = "all";
    })(InvestmentAccountSubtype = exports.InvestmentAccountSubtype || (exports.InvestmentAccountSubtype = {}));
    var InvestmentTransactionSubtype;
    (function(InvestmentTransactionSubtype2) {
      InvestmentTransactionSubtype2["AccountFee"] = "account fee";
      InvestmentTransactionSubtype2["Adjustment"] = "adjustment";
      InvestmentTransactionSubtype2["Assignment"] = "assignment";
      InvestmentTransactionSubtype2["Buy"] = "buy";
      InvestmentTransactionSubtype2["BuyToCover"] = "buy to cover";
      InvestmentTransactionSubtype2["Contribution"] = "contribution";
      InvestmentTransactionSubtype2["Deposit"] = "deposit";
      InvestmentTransactionSubtype2["Distribution"] = "distribution";
      InvestmentTransactionSubtype2["Dividend"] = "dividend";
      InvestmentTransactionSubtype2["DividendReinvestment"] = "dividend reinvestment";
      InvestmentTransactionSubtype2["Exercise"] = "exercise";
      InvestmentTransactionSubtype2["Expire"] = "expire";
      InvestmentTransactionSubtype2["FundFee"] = "fund fee";
      InvestmentTransactionSubtype2["Interest"] = "interest";
      InvestmentTransactionSubtype2["InterestReceivable"] = "interest receivable";
      InvestmentTransactionSubtype2["InterestReinvestment"] = "interest reinvestment";
      InvestmentTransactionSubtype2["LegalFee"] = "legal fee";
      InvestmentTransactionSubtype2["LoanPayment"] = "loan payment";
      InvestmentTransactionSubtype2["LongTermCapitalGain"] = "long-term capital gain";
      InvestmentTransactionSubtype2["LongTermCapitalGainReinvestment"] = "long-term capital gain reinvestment";
      InvestmentTransactionSubtype2["ManagementFee"] = "management fee";
      InvestmentTransactionSubtype2["MarginExpense"] = "margin expense";
      InvestmentTransactionSubtype2["Merger"] = "merger";
      InvestmentTransactionSubtype2["MiscellaneousFee"] = "miscellaneous fee";
      InvestmentTransactionSubtype2["NonQualifiedDividend"] = "non-qualified dividend";
      InvestmentTransactionSubtype2["NonResidentTax"] = "non-resident tax";
      InvestmentTransactionSubtype2["PendingCredit"] = "pending credit";
      InvestmentTransactionSubtype2["PendingDebit"] = "pending debit";
      InvestmentTransactionSubtype2["QualifiedDividend"] = "qualified dividend";
      InvestmentTransactionSubtype2["Rebalance"] = "rebalance";
      InvestmentTransactionSubtype2["ReturnOfPrincipal"] = "return of principal";
      InvestmentTransactionSubtype2["Request"] = "request";
      InvestmentTransactionSubtype2["Sell"] = "sell";
      InvestmentTransactionSubtype2["SellShort"] = "sell short";
      InvestmentTransactionSubtype2["Send"] = "send";
      InvestmentTransactionSubtype2["ShortTermCapitalGain"] = "short-term capital gain";
      InvestmentTransactionSubtype2["ShortTermCapitalGainReinvestment"] = "short-term capital gain reinvestment";
      InvestmentTransactionSubtype2["SpinOff"] = "spin off";
      InvestmentTransactionSubtype2["Split"] = "split";
      InvestmentTransactionSubtype2["StockDistribution"] = "stock distribution";
      InvestmentTransactionSubtype2["Tax"] = "tax";
      InvestmentTransactionSubtype2["TaxWithheld"] = "tax withheld";
      InvestmentTransactionSubtype2["Trade"] = "trade";
      InvestmentTransactionSubtype2["Transfer"] = "transfer";
      InvestmentTransactionSubtype2["TransferFee"] = "transfer fee";
      InvestmentTransactionSubtype2["TrustFee"] = "trust fee";
      InvestmentTransactionSubtype2["UnqualifiedGain"] = "unqualified gain";
      InvestmentTransactionSubtype2["Withdrawal"] = "withdrawal";
    })(InvestmentTransactionSubtype = exports.InvestmentTransactionSubtype || (exports.InvestmentTransactionSubtype = {}));
    var InvestmentTransactionType;
    (function(InvestmentTransactionType2) {
      InvestmentTransactionType2["Buy"] = "buy";
      InvestmentTransactionType2["Sell"] = "sell";
      InvestmentTransactionType2["Cancel"] = "cancel";
      InvestmentTransactionType2["Cash"] = "cash";
      InvestmentTransactionType2["Fee"] = "fee";
      InvestmentTransactionType2["Transfer"] = "transfer";
    })(InvestmentTransactionType = exports.InvestmentTransactionType || (exports.InvestmentTransactionType = {}));
    var IssuesStatus;
    (function(IssuesStatus2) {
      IssuesStatus2["Reported"] = "REPORTED";
      IssuesStatus2["AwaitingResolution"] = "AWAITING_RESOLUTION";
      IssuesStatus2["FixInProgress"] = "FIX_IN_PROGRESS";
      IssuesStatus2["FixPendingValidation"] = "FIX_PENDING_VALIDATION";
      IssuesStatus2["CannotFix"] = "CANNOT_FIX";
      IssuesStatus2["Resolved"] = "RESOLVED";
    })(IssuesStatus = exports.IssuesStatus || (exports.IssuesStatus = {}));
    var IssuingCountry;
    (function(IssuingCountry2) {
      IssuingCountry2["Match"] = "match";
      IssuingCountry2["NoMatch"] = "no_match";
    })(IssuingCountry = exports.IssuingCountry || (exports.IssuingCountry = {}));
    var ItemUpdateTypeEnum;
    (function(ItemUpdateTypeEnum2) {
      ItemUpdateTypeEnum2["Background"] = "background";
      ItemUpdateTypeEnum2["UserPresentRequired"] = "user_present_required";
    })(ItemUpdateTypeEnum = exports.ItemUpdateTypeEnum || (exports.ItemUpdateTypeEnum = {}));
    var ItemAuthMethod;
    (function(ItemAuthMethod2) {
      ItemAuthMethod2["InstantAuth"] = "INSTANT_AUTH";
      ItemAuthMethod2["InstantMatch"] = "INSTANT_MATCH";
      ItemAuthMethod2["AutomatedMicrodeposits"] = "AUTOMATED_MICRODEPOSITS";
      ItemAuthMethod2["SameDayMicrodeposits"] = "SAME_DAY_MICRODEPOSITS";
      ItemAuthMethod2["InstantMicrodeposits"] = "INSTANT_MICRODEPOSITS";
      ItemAuthMethod2["DatabaseMatch"] = "DATABASE_MATCH";
      ItemAuthMethod2["DatabaseInsights"] = "DATABASE_INSIGHTS";
      ItemAuthMethod2["TransferMigrated"] = "TRANSFER_MIGRATED";
      ItemAuthMethod2["InvestmentsFallback"] = "INVESTMENTS_FALLBACK";
    })(ItemAuthMethod = exports.ItemAuthMethod || (exports.ItemAuthMethod = {}));
    var ItemConsentedDataScope;
    (function(ItemConsentedDataScope2) {
      ItemConsentedDataScope2["AccountAndBalanceInfo"] = "account_and_balance_info";
      ItemConsentedDataScope2["ContactInfo"] = "contact_info";
      ItemConsentedDataScope2["AccountAndRoutingNumbers"] = "account_and_routing_numbers";
      ItemConsentedDataScope2["Transactions"] = "transactions";
      ItemConsentedDataScope2["CreditAndLoans"] = "credit_and_loans";
      ItemConsentedDataScope2["Investments"] = "investments";
      ItemConsentedDataScope2["BankStatements"] = "bank_statements";
      ItemConsentedDataScope2["RiskInfo"] = "risk_info";
    })(ItemConsentedDataScope = exports.ItemConsentedDataScope || (exports.ItemConsentedDataScope = {}));
    var ItemCreateAuthentication;
    (function(ItemCreateAuthentication2) {
      ItemCreateAuthentication2["Unknown"] = "UNKNOWN";
      ItemCreateAuthentication2["DataPartner"] = "DATA_PARTNER";
      ItemCreateAuthentication2["Plaid"] = "PLAID";
    })(ItemCreateAuthentication = exports.ItemCreateAuthentication || (exports.ItemCreateAuthentication = {}));
    var ItemWithConsentFieldsUpdateTypeEnum;
    (function(ItemWithConsentFieldsUpdateTypeEnum2) {
      ItemWithConsentFieldsUpdateTypeEnum2["Background"] = "background";
      ItemWithConsentFieldsUpdateTypeEnum2["UserPresentRequired"] = "user_present_required";
    })(ItemWithConsentFieldsUpdateTypeEnum = exports.ItemWithConsentFieldsUpdateTypeEnum || (exports.ItemWithConsentFieldsUpdateTypeEnum = {}));
    var LinkDeliveryDeliveryMethod;
    (function(LinkDeliveryDeliveryMethod2) {
      LinkDeliveryDeliveryMethod2["Sms"] = "SMS";
      LinkDeliveryDeliveryMethod2["Email"] = "EMAIL";
    })(LinkDeliveryDeliveryMethod = exports.LinkDeliveryDeliveryMethod || (exports.LinkDeliveryDeliveryMethod = {}));
    var LinkDeliverySessionStatus;
    (function(LinkDeliverySessionStatus2) {
      LinkDeliverySessionStatus2["Created"] = "CREATED";
      LinkDeliverySessionStatus2["Opened"] = "OPENED";
      LinkDeliverySessionStatus2["Exited"] = "EXITED";
      LinkDeliverySessionStatus2["Completed"] = "COMPLETED";
      LinkDeliverySessionStatus2["Expired"] = "EXPIRED";
    })(LinkDeliverySessionStatus = exports.LinkDeliverySessionStatus || (exports.LinkDeliverySessionStatus = {}));
    var LinkDeliveryVerificationStatus;
    (function(LinkDeliveryVerificationStatus2) {
      LinkDeliveryVerificationStatus2["AutomaticallyVerified"] = "automatically_verified";
      LinkDeliveryVerificationStatus2["PendingAutomaticVerification"] = "pending_automatic_verification";
      LinkDeliveryVerificationStatus2["PendingManualVerification"] = "pending_manual_verification";
      LinkDeliveryVerificationStatus2["ManuallyVerified"] = "manually_verified";
      LinkDeliveryVerificationStatus2["VerificationExpired"] = "verification_expired";
      LinkDeliveryVerificationStatus2["VerificationFailed"] = "verification_failed";
      LinkDeliveryVerificationStatus2["DatabaseMatched"] = "database_matched";
      LinkDeliveryVerificationStatus2["DatabaseInsightsPending"] = "database_insights_pending";
    })(LinkDeliveryVerificationStatus = exports.LinkDeliveryVerificationStatus || (exports.LinkDeliveryVerificationStatus = {}));
    var LinkDeliveryWebhookCallbackType;
    (function(LinkDeliveryWebhookCallbackType2) {
      LinkDeliveryWebhookCallbackType2["Success"] = "ON_SUCCESS";
      LinkDeliveryWebhookCallbackType2["Event"] = "ON_EVENT";
      LinkDeliveryWebhookCallbackType2["Exit"] = "ON_EXIT";
    })(LinkDeliveryWebhookCallbackType = exports.LinkDeliveryWebhookCallbackType || (exports.LinkDeliveryWebhookCallbackType = {}));
    var LinkDeliveryWebhookCommunicationMethod;
    (function(LinkDeliveryWebhookCommunicationMethod2) {
      LinkDeliveryWebhookCommunicationMethod2["Sms"] = "SMS";
      LinkDeliveryWebhookCommunicationMethod2["Email"] = "EMAIL";
    })(LinkDeliveryWebhookCommunicationMethod = exports.LinkDeliveryWebhookCommunicationMethod || (exports.LinkDeliveryWebhookCommunicationMethod = {}));
    var LinkDeliveryWebhookDeliveryStatus;
    (function(LinkDeliveryWebhookDeliveryStatus2) {
      LinkDeliveryWebhookDeliveryStatus2["Success"] = "SUCCESS";
      LinkDeliveryWebhookDeliveryStatus2["Failure"] = "FAILURE";
    })(LinkDeliveryWebhookDeliveryStatus = exports.LinkDeliveryWebhookDeliveryStatus || (exports.LinkDeliveryWebhookDeliveryStatus = {}));
    var LinkEventName;
    (function(LinkEventName2) {
      LinkEventName2["BankIncomeInsightsCompleted"] = "BANK_INCOME_INSIGHTS_COMPLETED";
      LinkEventName2["CloseOauth"] = "CLOSE_OAUTH";
      LinkEventName2["Error"] = "ERROR";
      LinkEventName2["Exit"] = "EXIT";
      LinkEventName2["FailOauth"] = "FAIL_OAUTH";
      LinkEventName2["Handoff"] = "HANDOFF";
      LinkEventName2["IssueFollowed"] = "ISSUE_FOLLOWED";
      LinkEventName2["Open"] = "OPEN";
      LinkEventName2["OpenMyPlaid"] = "OPEN_MY_PLAID";
      LinkEventName2["OpenOauth"] = "OPEN_OAUTH";
      LinkEventName2["SearchInstitution"] = "SEARCH_INSTITUTION";
      LinkEventName2["SelectAuthType"] = "SELECT_AUTH_TYPE";
      LinkEventName2["SelectBrand"] = "SELECT_BRAND";
      LinkEventName2["SelectDegradedInstitution"] = "SELECT_DEGRADED_INSTITUTION";
      LinkEventName2["SelectDownInstitution"] = "SELECT_DOWN_INSTITUTION";
      LinkEventName2["SelectFilteredInstitution"] = "SELECT_FILTERED_INSTITUTION";
      LinkEventName2["SelectInstitution"] = "SELECT_INSTITUTION";
      LinkEventName2["SubmitAccountNumber"] = "SUBMIT_ACCOUNT_NUMBER";
      LinkEventName2["SubmitCredentials"] = "SUBMIT_CREDENTIALS";
      LinkEventName2["SubmitDocuments"] = "SUBMIT_DOCUMENTS";
      LinkEventName2["SubmitDocumentsError"] = "SUBMIT_DOCUMENTS_ERROR";
      LinkEventName2["SubmitDocumentsSuccess"] = "SUBMIT_DOCUMENTS_SUCCESS";
      LinkEventName2["SubmitMfa"] = "SUBMIT_MFA";
      LinkEventName2["SubmitRoutingNumber"] = "SUBMIT_ROUTING_NUMBER";
      LinkEventName2["TransitionView"] = "TRANSITION_VIEW";
      LinkEventName2["ViewDataTypes"] = "VIEW_DATA_TYPES";
    })(LinkEventName = exports.LinkEventName || (exports.LinkEventName = {}));
    var LinkSessionSuccessMetadataTransferStatus;
    (function(LinkSessionSuccessMetadataTransferStatus2) {
      LinkSessionSuccessMetadataTransferStatus2["Complete"] = "COMPLETE";
      LinkSessionSuccessMetadataTransferStatus2["Incomplete"] = "INCOMPLETE";
      LinkSessionSuccessMetadataTransferStatus2["Null"] = "null";
    })(LinkSessionSuccessMetadataTransferStatus = exports.LinkSessionSuccessMetadataTransferStatus || (exports.LinkSessionSuccessMetadataTransferStatus = {}));
    var LinkTokenCreateRequestAuthRerouteToCredentialsEnum;
    (function(LinkTokenCreateRequestAuthRerouteToCredentialsEnum2) {
      LinkTokenCreateRequestAuthRerouteToCredentialsEnum2["Off"] = "OFF";
      LinkTokenCreateRequestAuthRerouteToCredentialsEnum2["Optional"] = "OPTIONAL";
      LinkTokenCreateRequestAuthRerouteToCredentialsEnum2["Forced"] = "FORCED";
    })(LinkTokenCreateRequestAuthRerouteToCredentialsEnum = exports.LinkTokenCreateRequestAuthRerouteToCredentialsEnum || (exports.LinkTokenCreateRequestAuthRerouteToCredentialsEnum = {}));
    var LinkTokenCreateRequestAuthFlowTypeEnum;
    (function(LinkTokenCreateRequestAuthFlowTypeEnum2) {
      LinkTokenCreateRequestAuthFlowTypeEnum2["FlexibleAuth"] = "FLEXIBLE_AUTH";
    })(LinkTokenCreateRequestAuthFlowTypeEnum = exports.LinkTokenCreateRequestAuthFlowTypeEnum || (exports.LinkTokenCreateRequestAuthFlowTypeEnum = {}));
    var LoanAccountSubtype;
    (function(LoanAccountSubtype2) {
      LoanAccountSubtype2["Auto"] = "auto";
      LoanAccountSubtype2["Business"] = "business";
      LoanAccountSubtype2["Commercial"] = "commercial";
      LoanAccountSubtype2["Construction"] = "construction";
      LoanAccountSubtype2["Consumer"] = "consumer";
      LoanAccountSubtype2["HomeEquity"] = "home equity";
      LoanAccountSubtype2["Loan"] = "loan";
      LoanAccountSubtype2["Mortgage"] = "mortgage";
      LoanAccountSubtype2["LineOfCredit"] = "line of credit";
      LoanAccountSubtype2["Student"] = "student";
      LoanAccountSubtype2["Other"] = "other";
      LoanAccountSubtype2["All"] = "all";
    })(LoanAccountSubtype = exports.LoanAccountSubtype || (exports.LoanAccountSubtype = {}));
    var LoanIdentifierType;
    (function(LoanIdentifierType2) {
      LoanIdentifierType2["LenderLoan"] = "LenderLoan";
      LoanIdentifierType2["UniversalLoan"] = "UniversalLoan";
    })(LoanIdentifierType = exports.LoanIdentifierType || (exports.LoanIdentifierType = {}));
    var MatchSummaryCode;
    (function(MatchSummaryCode2) {
      MatchSummaryCode2["Match"] = "match";
      MatchSummaryCode2["PartialMatch"] = "partial_match";
      MatchSummaryCode2["NoMatch"] = "no_match";
      MatchSummaryCode2["NoData"] = "no_data";
      MatchSummaryCode2["NoInput"] = "no_input";
    })(MatchSummaryCode = exports.MatchSummaryCode || (exports.MatchSummaryCode = {}));
    var MonitoringConsumerReportPermissiblePurpose;
    (function(MonitoringConsumerReportPermissiblePurpose2) {
      MonitoringConsumerReportPermissiblePurpose2["AccountReviewCredit"] = "ACCOUNT_REVIEW_CREDIT";
      MonitoringConsumerReportPermissiblePurpose2["WrittenInstructionOther"] = "WRITTEN_INSTRUCTION_OTHER";
    })(MonitoringConsumerReportPermissiblePurpose = exports.MonitoringConsumerReportPermissiblePurpose || (exports.MonitoringConsumerReportPermissiblePurpose = {}));
    var MonitoringInsightsStatus;
    (function(MonitoringInsightsStatus2) {
      MonitoringInsightsStatus2["Available"] = "AVAILABLE";
      MonitoringInsightsStatus2["Failed"] = "FAILED";
      MonitoringInsightsStatus2["Pending"] = "PENDING";
      MonitoringInsightsStatus2["Unsupported"] = "UNSUPPORTED";
      MonitoringInsightsStatus2["Unhealthy"] = "UNHEALTHY";
    })(MonitoringInsightsStatus = exports.MonitoringInsightsStatus || (exports.MonitoringInsightsStatus = {}));
    var MonitoringItemStatusCode;
    (function(MonitoringItemStatusCode2) {
      MonitoringItemStatusCode2["Available"] = "AVAILABLE";
      MonitoringItemStatusCode2["Failed"] = "FAILED";
      MonitoringItemStatusCode2["Pending"] = "PENDING";
      MonitoringItemStatusCode2["ItemNotSupported"] = "ITEM_NOT_SUPPORTED";
      MonitoringItemStatusCode2["ItemLoginRequired"] = "ITEM_LOGIN_REQUIRED";
    })(MonitoringItemStatusCode = exports.MonitoringItemStatusCode || (exports.MonitoringItemStatusCode = {}));
    var NetworkStatusGetResponseNetworkStatus;
    (function(NetworkStatusGetResponseNetworkStatus2) {
      NetworkStatusGetResponseNetworkStatus2["Unknown"] = "UNKNOWN";
      NetworkStatusGetResponseNetworkStatus2["ReturningUser"] = "RETURNING_USER";
    })(NetworkStatusGetResponseNetworkStatus = exports.NetworkStatusGetResponseNetworkStatus || (exports.NetworkStatusGetResponseNetworkStatus = {}));
    var OmittableTransferType;
    (function(OmittableTransferType2) {
      OmittableTransferType2["Debit"] = "debit";
      OmittableTransferType2["Credit"] = "credit";
    })(OmittableTransferType = exports.OmittableTransferType || (exports.OmittableTransferType = {}));
    var OriginatorExpectedTransferFrequency;
    (function(OriginatorExpectedTransferFrequency2) {
      OriginatorExpectedTransferFrequency2["OncePerMonth"] = "once_per_month";
      OriginatorExpectedTransferFrequency2["TwicePerMonth"] = "twice_per_month";
      OriginatorExpectedTransferFrequency2["OncePerWeek"] = "once_per_week";
      OriginatorExpectedTransferFrequency2["Daily"] = "daily";
    })(OriginatorExpectedTransferFrequency = exports.OriginatorExpectedTransferFrequency || (exports.OriginatorExpectedTransferFrequency = {}));
    var OtherAccountSubtype;
    (function(OtherAccountSubtype2) {
      OtherAccountSubtype2["Other"] = "other";
      OtherAccountSubtype2["All"] = "all";
    })(OtherAccountSubtype = exports.OtherAccountSubtype || (exports.OtherAccountSubtype = {}));
    var OverrideAccountType;
    (function(OverrideAccountType2) {
      OverrideAccountType2["Investment"] = "investment";
      OverrideAccountType2["Credit"] = "credit";
      OverrideAccountType2["Depository"] = "depository";
      OverrideAccountType2["Loan"] = "loan";
      OverrideAccountType2["Payroll"] = "payroll";
      OverrideAccountType2["Other"] = "other";
    })(OverrideAccountType = exports.OverrideAccountType || (exports.OverrideAccountType = {}));
    var OwnershipType;
    (function(OwnershipType2) {
      OwnershipType2["Null"] = "null";
      OwnershipType2["Individual"] = "individual";
      OwnershipType2["Joint"] = "joint";
      OwnershipType2["Association"] = "association";
      OwnershipType2["Trust"] = "trust";
    })(OwnershipType = exports.OwnershipType || (exports.OwnershipType = {}));
    var POBoxStatus;
    (function(POBoxStatus2) {
      POBoxStatus2["Yes"] = "yes";
      POBoxStatus2["No"] = "no";
      POBoxStatus2["NoData"] = "no_data";
    })(POBoxStatus = exports.POBoxStatus || (exports.POBoxStatus = {}));
    var PartnerEndCustomerFlowdownStatus;
    (function(PartnerEndCustomerFlowdownStatus2) {
      PartnerEndCustomerFlowdownStatus2["NotStarted"] = "NOT_STARTED";
      PartnerEndCustomerFlowdownStatus2["InReview"] = "IN_REVIEW";
      PartnerEndCustomerFlowdownStatus2["Negotiation"] = "NEGOTIATION";
      PartnerEndCustomerFlowdownStatus2["Complete"] = "COMPLETE";
    })(PartnerEndCustomerFlowdownStatus = exports.PartnerEndCustomerFlowdownStatus || (exports.PartnerEndCustomerFlowdownStatus = {}));
    var PartnerEndCustomerOAuthInstitutionApplicationStatus;
    (function(PartnerEndCustomerOAuthInstitutionApplicationStatus2) {
      PartnerEndCustomerOAuthInstitutionApplicationStatus2["NotStarted"] = "NOT_STARTED";
      PartnerEndCustomerOAuthInstitutionApplicationStatus2["Processing"] = "PROCESSING";
      PartnerEndCustomerOAuthInstitutionApplicationStatus2["Approved"] = "APPROVED";
      PartnerEndCustomerOAuthInstitutionApplicationStatus2["Enabled"] = "ENABLED";
      PartnerEndCustomerOAuthInstitutionApplicationStatus2["AttentionRequired"] = "ATTENTION_REQUIRED";
    })(PartnerEndCustomerOAuthInstitutionApplicationStatus = exports.PartnerEndCustomerOAuthInstitutionApplicationStatus || (exports.PartnerEndCustomerOAuthInstitutionApplicationStatus = {}));
    var PartnerEndCustomerOAuthStatusUpdatedValues;
    (function(PartnerEndCustomerOAuthStatusUpdatedValues2) {
      PartnerEndCustomerOAuthStatusUpdatedValues2["NotStarted"] = "not-started";
      PartnerEndCustomerOAuthStatusUpdatedValues2["Processing"] = "processing";
      PartnerEndCustomerOAuthStatusUpdatedValues2["Approved"] = "approved";
      PartnerEndCustomerOAuthStatusUpdatedValues2["Enabled"] = "enabled";
      PartnerEndCustomerOAuthStatusUpdatedValues2["AttentionRequired"] = "attention-required";
    })(PartnerEndCustomerOAuthStatusUpdatedValues = exports.PartnerEndCustomerOAuthStatusUpdatedValues || (exports.PartnerEndCustomerOAuthStatusUpdatedValues = {}));
    var PartnerEndCustomerQuestionnaireStatus;
    (function(PartnerEndCustomerQuestionnaireStatus2) {
      PartnerEndCustomerQuestionnaireStatus2["NotStarted"] = "NOT_STARTED";
      PartnerEndCustomerQuestionnaireStatus2["Received"] = "RECEIVED";
      PartnerEndCustomerQuestionnaireStatus2["Complete"] = "COMPLETE";
    })(PartnerEndCustomerQuestionnaireStatus = exports.PartnerEndCustomerQuestionnaireStatus || (exports.PartnerEndCustomerQuestionnaireStatus = {}));
    var PartnerEndCustomerStatus;
    (function(PartnerEndCustomerStatus2) {
      PartnerEndCustomerStatus2["UnderReview"] = "UNDER_REVIEW";
      PartnerEndCustomerStatus2["PendingEnablement"] = "PENDING_ENABLEMENT";
      PartnerEndCustomerStatus2["Active"] = "ACTIVE";
      PartnerEndCustomerStatus2["Denied"] = "DENIED";
    })(PartnerEndCustomerStatus = exports.PartnerEndCustomerStatus || (exports.PartnerEndCustomerStatus = {}));
    var PartyRoleType;
    (function(PartyRoleType2) {
      PartyRoleType2["Borrower"] = "Borrower";
    })(PartyRoleType = exports.PartyRoleType || (exports.PartyRoleType = {}));
    var PayFrequencyValue;
    (function(PayFrequencyValue2) {
      PayFrequencyValue2["Monthly"] = "monthly";
      PayFrequencyValue2["Semimonthly"] = "semimonthly";
      PayFrequencyValue2["Weekly"] = "weekly";
      PayFrequencyValue2["Biweekly"] = "biweekly";
      PayFrequencyValue2["Unknown"] = "unknown";
      PayFrequencyValue2["Null"] = "null";
    })(PayFrequencyValue = exports.PayFrequencyValue || (exports.PayFrequencyValue = {}));
    var PayPeriodDetailsPayFrequency;
    (function(PayPeriodDetailsPayFrequency2) {
      PayPeriodDetailsPayFrequency2["PayFrequencyUnknown"] = "PAY_FREQUENCY_UNKNOWN";
      PayPeriodDetailsPayFrequency2["PayFrequencyWeekly"] = "PAY_FREQUENCY_WEEKLY";
      PayPeriodDetailsPayFrequency2["PayFrequencyBiweekly"] = "PAY_FREQUENCY_BIWEEKLY";
      PayPeriodDetailsPayFrequency2["PayFrequencySemimonthly"] = "PAY_FREQUENCY_SEMIMONTHLY";
      PayPeriodDetailsPayFrequency2["PayFrequencyMonthly"] = "PAY_FREQUENCY_MONTHLY";
      PayPeriodDetailsPayFrequency2["Null"] = "null";
    })(PayPeriodDetailsPayFrequency = exports.PayPeriodDetailsPayFrequency || (exports.PayPeriodDetailsPayFrequency = {}));
    var PaymentAmountCurrency;
    (function(PaymentAmountCurrency2) {
      PaymentAmountCurrency2["Gbp"] = "GBP";
      PaymentAmountCurrency2["Eur"] = "EUR";
      PaymentAmountCurrency2["Pln"] = "PLN";
      PaymentAmountCurrency2["Sek"] = "SEK";
      PaymentAmountCurrency2["Dkk"] = "DKK";
      PaymentAmountCurrency2["Nok"] = "NOK";
    })(PaymentAmountCurrency = exports.PaymentAmountCurrency || (exports.PaymentAmountCurrency = {}));
    var PaymentChannel;
    (function(PaymentChannel2) {
      PaymentChannel2["Online"] = "online";
      PaymentChannel2["InStore"] = "in store";
      PaymentChannel2["Other"] = "other";
    })(PaymentChannel = exports.PaymentChannel || (exports.PaymentChannel = {}));
    var PaymentConsentPeriodicAlignment;
    (function(PaymentConsentPeriodicAlignment2) {
      PaymentConsentPeriodicAlignment2["Calendar"] = "CALENDAR";
      PaymentConsentPeriodicAlignment2["Consent"] = "CONSENT";
    })(PaymentConsentPeriodicAlignment = exports.PaymentConsentPeriodicAlignment || (exports.PaymentConsentPeriodicAlignment = {}));
    var PaymentConsentPeriodicInterval;
    (function(PaymentConsentPeriodicInterval2) {
      PaymentConsentPeriodicInterval2["Day"] = "DAY";
      PaymentConsentPeriodicInterval2["Week"] = "WEEK";
      PaymentConsentPeriodicInterval2["Month"] = "MONTH";
      PaymentConsentPeriodicInterval2["Year"] = "YEAR";
    })(PaymentConsentPeriodicInterval = exports.PaymentConsentPeriodicInterval || (exports.PaymentConsentPeriodicInterval = {}));
    var PaymentInitiationConsentProcessingMode;
    (function(PaymentInitiationConsentProcessingMode2) {
      PaymentInitiationConsentProcessingMode2["Async"] = "ASYNC";
      PaymentInitiationConsentProcessingMode2["Immediate"] = "IMMEDIATE";
    })(PaymentInitiationConsentProcessingMode = exports.PaymentInitiationConsentProcessingMode || (exports.PaymentInitiationConsentProcessingMode = {}));
    var PaymentInitiationConsentScope;
    (function(PaymentInitiationConsentScope2) {
      PaymentInitiationConsentScope2["MeToMe"] = "ME_TO_ME";
      PaymentInitiationConsentScope2["External"] = "EXTERNAL";
    })(PaymentInitiationConsentScope = exports.PaymentInitiationConsentScope || (exports.PaymentInitiationConsentScope = {}));
    var PaymentInitiationConsentStatus;
    (function(PaymentInitiationConsentStatus2) {
      PaymentInitiationConsentStatus2["Unauthorised"] = "UNAUTHORISED";
      PaymentInitiationConsentStatus2["Authorised"] = "AUTHORISED";
      PaymentInitiationConsentStatus2["Revoked"] = "REVOKED";
      PaymentInitiationConsentStatus2["Rejected"] = "REJECTED";
      PaymentInitiationConsentStatus2["Expired"] = "EXPIRED";
    })(PaymentInitiationConsentStatus = exports.PaymentInitiationConsentStatus || (exports.PaymentInitiationConsentStatus = {}));
    var PaymentInitiationConsentType;
    (function(PaymentInitiationConsentType2) {
      PaymentInitiationConsentType2["Sweeping"] = "SWEEPING";
      PaymentInitiationConsentType2["Commercial"] = "COMMERCIAL";
    })(PaymentInitiationConsentType = exports.PaymentInitiationConsentType || (exports.PaymentInitiationConsentType = {}));
    var PaymentInitiationPaymentCreateStatus;
    (function(PaymentInitiationPaymentCreateStatus2) {
      PaymentInitiationPaymentCreateStatus2["PaymentStatusInputNeeded"] = "PAYMENT_STATUS_INPUT_NEEDED";
    })(PaymentInitiationPaymentCreateStatus = exports.PaymentInitiationPaymentCreateStatus || (exports.PaymentInitiationPaymentCreateStatus = {}));
    var PaymentInitiationPaymentStatus;
    (function(PaymentInitiationPaymentStatus2) {
      PaymentInitiationPaymentStatus2["InputNeeded"] = "PAYMENT_STATUS_INPUT_NEEDED";
      PaymentInitiationPaymentStatus2["Processing"] = "PAYMENT_STATUS_PROCESSING";
      PaymentInitiationPaymentStatus2["Initiated"] = "PAYMENT_STATUS_INITIATED";
      PaymentInitiationPaymentStatus2["Completed"] = "PAYMENT_STATUS_COMPLETED";
      PaymentInitiationPaymentStatus2["InsufficientFunds"] = "PAYMENT_STATUS_INSUFFICIENT_FUNDS";
      PaymentInitiationPaymentStatus2["Failed"] = "PAYMENT_STATUS_FAILED";
      PaymentInitiationPaymentStatus2["Blocked"] = "PAYMENT_STATUS_BLOCKED";
      PaymentInitiationPaymentStatus2["Unknown"] = "PAYMENT_STATUS_UNKNOWN";
      PaymentInitiationPaymentStatus2["Executed"] = "PAYMENT_STATUS_EXECUTED";
      PaymentInitiationPaymentStatus2["Settled"] = "PAYMENT_STATUS_SETTLED";
      PaymentInitiationPaymentStatus2["Authorising"] = "PAYMENT_STATUS_AUTHORISING";
      PaymentInitiationPaymentStatus2["Cancelled"] = "PAYMENT_STATUS_CANCELLED";
      PaymentInitiationPaymentStatus2["Established"] = "PAYMENT_STATUS_ESTABLISHED";
      PaymentInitiationPaymentStatus2["Rejected"] = "PAYMENT_STATUS_REJECTED";
    })(PaymentInitiationPaymentStatus = exports.PaymentInitiationPaymentStatus || (exports.PaymentInitiationPaymentStatus = {}));
    var PaymentProfileStatus;
    (function(PaymentProfileStatus2) {
      PaymentProfileStatus2["Pending"] = "PENDING";
      PaymentProfileStatus2["Ready"] = "READY";
      PaymentProfileStatus2["Removed"] = "REMOVED";
    })(PaymentProfileStatus = exports.PaymentProfileStatus || (exports.PaymentProfileStatus = {}));
    var PaymentScheduleInterval;
    (function(PaymentScheduleInterval2) {
      PaymentScheduleInterval2["Weekly"] = "WEEKLY";
      PaymentScheduleInterval2["Monthly"] = "MONTHLY";
    })(PaymentScheduleInterval = exports.PaymentScheduleInterval || (exports.PaymentScheduleInterval = {}));
    var PaymentScheme;
    (function(PaymentScheme2) {
      PaymentScheme2["Null"] = "null";
      PaymentScheme2["LocalDefault"] = "LOCAL_DEFAULT";
      PaymentScheme2["LocalInstant"] = "LOCAL_INSTANT";
      PaymentScheme2["SepaCreditTransfer"] = "SEPA_CREDIT_TRANSFER";
      PaymentScheme2["SepaCreditTransferInstant"] = "SEPA_CREDIT_TRANSFER_INSTANT";
    })(PaymentScheme = exports.PaymentScheme || (exports.PaymentScheme = {}));
    var PaystubPayFrequency;
    (function(PaystubPayFrequency2) {
      PaystubPayFrequency2["Monthly"] = "MONTHLY";
      PaystubPayFrequency2["BiWeekly"] = "BI-WEEKLY";
      PaystubPayFrequency2["Weekly"] = "WEEKLY";
      PaystubPayFrequency2["SemiMonthly"] = "SEMI-MONTHLY";
      PaystubPayFrequency2["Null"] = "null";
    })(PaystubPayFrequency = exports.PaystubPayFrequency || (exports.PaystubPayFrequency = {}));
    var PendingDisconnectWebhookReason;
    (function(PendingDisconnectWebhookReason2) {
      PendingDisconnectWebhookReason2["Migration"] = "INSTITUTION_MIGRATION";
      PendingDisconnectWebhookReason2["TokenExpiration"] = "INSTITUTION_TOKEN_EXPIRATION";
    })(PendingDisconnectWebhookReason = exports.PendingDisconnectWebhookReason || (exports.PendingDisconnectWebhookReason = {}));
    var PhoneNumberTypeEnum;
    (function(PhoneNumberTypeEnum2) {
      PhoneNumberTypeEnum2["Home"] = "home";
      PhoneNumberTypeEnum2["Work"] = "work";
      PhoneNumberTypeEnum2["Office"] = "office";
      PhoneNumberTypeEnum2["Mobile"] = "mobile";
      PhoneNumberTypeEnum2["Mobile1"] = "mobile1";
      PhoneNumberTypeEnum2["Other"] = "other";
    })(PhoneNumberTypeEnum = exports.PhoneNumberTypeEnum || (exports.PhoneNumberTypeEnum = {}));
    var PhoneType;
    (function(PhoneType2) {
      PhoneType2["Phone"] = "phone";
      PhoneType2["Fax"] = "fax";
    })(PhoneType = exports.PhoneType || (exports.PhoneType = {}));
    var PhysicalDocumentCategory;
    (function(PhysicalDocumentCategory2) {
      PhysicalDocumentCategory2["DriversLicense"] = "drivers_license";
      PhysicalDocumentCategory2["IdCard"] = "id_card";
      PhysicalDocumentCategory2["Passport"] = "passport";
      PhysicalDocumentCategory2["ResidencePermitCard"] = "residence_permit_card";
      PhysicalDocumentCategory2["ResidentCard"] = "resident_card";
      PhysicalDocumentCategory2["Visa"] = "visa";
    })(PhysicalDocumentCategory = exports.PhysicalDocumentCategory || (exports.PhysicalDocumentCategory = {}));
    var PlaidErrorType;
    (function(PlaidErrorType2) {
      PlaidErrorType2["InvalidRequest"] = "INVALID_REQUEST";
      PlaidErrorType2["InvalidResult"] = "INVALID_RESULT";
      PlaidErrorType2["InvalidInput"] = "INVALID_INPUT";
      PlaidErrorType2["InstitutionError"] = "INSTITUTION_ERROR";
      PlaidErrorType2["RateLimitExceeded"] = "RATE_LIMIT_EXCEEDED";
      PlaidErrorType2["ApiError"] = "API_ERROR";
      PlaidErrorType2["ItemError"] = "ITEM_ERROR";
      PlaidErrorType2["AssetReportError"] = "ASSET_REPORT_ERROR";
      PlaidErrorType2["RecaptchaError"] = "RECAPTCHA_ERROR";
      PlaidErrorType2["OauthError"] = "OAUTH_ERROR";
      PlaidErrorType2["PaymentError"] = "PAYMENT_ERROR";
      PlaidErrorType2["BankTransferError"] = "BANK_TRANSFER_ERROR";
      PlaidErrorType2["IncomeVerificationError"] = "INCOME_VERIFICATION_ERROR";
      PlaidErrorType2["MicrodepositsError"] = "MICRODEPOSITS_ERROR";
      PlaidErrorType2["SandboxError"] = "SANDBOX_ERROR";
      PlaidErrorType2["PartnerError"] = "PARTNER_ERROR";
      PlaidErrorType2["TransactionsError"] = "TRANSACTIONS_ERROR";
      PlaidErrorType2["TransactionError"] = "TRANSACTION_ERROR";
      PlaidErrorType2["TransferError"] = "TRANSFER_ERROR";
    })(PlaidErrorType = exports.PlaidErrorType || (exports.PlaidErrorType = {}));
    var PrismCashScoreVersion;
    (function(PrismCashScoreVersion2) {
      PrismCashScoreVersion2["_3Lite"] = "3_lite";
      PrismCashScoreVersion2["_3"] = "3";
      PrismCashScoreVersion2["Null"] = "null";
    })(PrismCashScoreVersion = exports.PrismCashScoreVersion || (exports.PrismCashScoreVersion = {}));
    var PrismFirstDetectVersion;
    (function(PrismFirstDetectVersion2) {
      PrismFirstDetectVersion2["_3"] = "3";
      PrismFirstDetectVersion2["Null"] = "null";
    })(PrismFirstDetectVersion = exports.PrismFirstDetectVersion || (exports.PrismFirstDetectVersion = {}));
    var PrismInsightsVersion;
    (function(PrismInsightsVersion2) {
      PrismInsightsVersion2["_3"] = "3";
      PrismInsightsVersion2["Null"] = "null";
    })(PrismInsightsVersion = exports.PrismInsightsVersion || (exports.PrismInsightsVersion = {}));
    var PrismProduct;
    (function(PrismProduct2) {
      PrismProduct2["Insights"] = "insights";
      PrismProduct2["Scores"] = "scores";
    })(PrismProduct = exports.PrismProduct || (exports.PrismProduct = {}));
    var ProcessorTokenCreateRequestProcessorEnum;
    (function(ProcessorTokenCreateRequestProcessorEnum2) {
      ProcessorTokenCreateRequestProcessorEnum2["Dwolla"] = "dwolla";
      ProcessorTokenCreateRequestProcessorEnum2["Galileo"] = "galileo";
      ProcessorTokenCreateRequestProcessorEnum2["ModernTreasury"] = "modern_treasury";
      ProcessorTokenCreateRequestProcessorEnum2["Ocrolus"] = "ocrolus";
      ProcessorTokenCreateRequestProcessorEnum2["Vesta"] = "vesta";
      ProcessorTokenCreateRequestProcessorEnum2["Drivewealth"] = "drivewealth";
      ProcessorTokenCreateRequestProcessorEnum2["Vopay"] = "vopay";
      ProcessorTokenCreateRequestProcessorEnum2["Achq"] = "achq";
      ProcessorTokenCreateRequestProcessorEnum2["Check"] = "check";
      ProcessorTokenCreateRequestProcessorEnum2["Checkbook"] = "checkbook";
      ProcessorTokenCreateRequestProcessorEnum2["Circle"] = "circle";
      ProcessorTokenCreateRequestProcessorEnum2["SilaMoney"] = "sila_money";
      ProcessorTokenCreateRequestProcessorEnum2["Rize"] = "rize";
      ProcessorTokenCreateRequestProcessorEnum2["SvbApi"] = "svb_api";
      ProcessorTokenCreateRequestProcessorEnum2["Unit"] = "unit";
      ProcessorTokenCreateRequestProcessorEnum2["Wyre"] = "wyre";
      ProcessorTokenCreateRequestProcessorEnum2["Lithic"] = "lithic";
      ProcessorTokenCreateRequestProcessorEnum2["Alpaca"] = "alpaca";
      ProcessorTokenCreateRequestProcessorEnum2["Astra"] = "astra";
      ProcessorTokenCreateRequestProcessorEnum2["Moov"] = "moov";
      ProcessorTokenCreateRequestProcessorEnum2["TreasuryPrime"] = "treasury_prime";
      ProcessorTokenCreateRequestProcessorEnum2["Marqeta"] = "marqeta";
      ProcessorTokenCreateRequestProcessorEnum2["Checkout"] = "checkout";
      ProcessorTokenCreateRequestProcessorEnum2["Solid"] = "solid";
      ProcessorTokenCreateRequestProcessorEnum2["Highnote"] = "highnote";
      ProcessorTokenCreateRequestProcessorEnum2["Gemini"] = "gemini";
      ProcessorTokenCreateRequestProcessorEnum2["ApexClearing"] = "apex_clearing";
      ProcessorTokenCreateRequestProcessorEnum2["Gusto"] = "gusto";
      ProcessorTokenCreateRequestProcessorEnum2["Adyen"] = "adyen";
      ProcessorTokenCreateRequestProcessorEnum2["Atomic"] = "atomic";
      ProcessorTokenCreateRequestProcessorEnum2["I2c"] = "i2c";
      ProcessorTokenCreateRequestProcessorEnum2["Wepay"] = "wepay";
      ProcessorTokenCreateRequestProcessorEnum2["Riskified"] = "riskified";
      ProcessorTokenCreateRequestProcessorEnum2["Utb"] = "utb";
      ProcessorTokenCreateRequestProcessorEnum2["AdpRoll"] = "adp_roll";
      ProcessorTokenCreateRequestProcessorEnum2["FortressTrust"] = "fortress_trust";
      ProcessorTokenCreateRequestProcessorEnum2["Bond"] = "bond";
      ProcessorTokenCreateRequestProcessorEnum2["Bakkt"] = "bakkt";
      ProcessorTokenCreateRequestProcessorEnum2["Teal"] = "teal";
      ProcessorTokenCreateRequestProcessorEnum2["ZeroHash"] = "zero_hash";
      ProcessorTokenCreateRequestProcessorEnum2["TabaPay"] = "taba_pay";
      ProcessorTokenCreateRequestProcessorEnum2["Knot"] = "knot";
      ProcessorTokenCreateRequestProcessorEnum2["Sardine"] = "sardine";
      ProcessorTokenCreateRequestProcessorEnum2["Alloy"] = "alloy";
      ProcessorTokenCreateRequestProcessorEnum2["Finix"] = "finix";
      ProcessorTokenCreateRequestProcessorEnum2["Nuvei"] = "nuvei";
      ProcessorTokenCreateRequestProcessorEnum2["Layer"] = "layer";
      ProcessorTokenCreateRequestProcessorEnum2["Boom"] = "boom";
      ProcessorTokenCreateRequestProcessorEnum2["Paynote"] = "paynote";
      ProcessorTokenCreateRequestProcessorEnum2["Stake"] = "stake";
      ProcessorTokenCreateRequestProcessorEnum2["Wedbush"] = "wedbush";
      ProcessorTokenCreateRequestProcessorEnum2["Esusu"] = "esusu";
      ProcessorTokenCreateRequestProcessorEnum2["Ansa"] = "ansa";
      ProcessorTokenCreateRequestProcessorEnum2["Scribeup"] = "scribeup";
      ProcessorTokenCreateRequestProcessorEnum2["Straddle"] = "straddle";
      ProcessorTokenCreateRequestProcessorEnum2["Loanpro"] = "loanpro";
    })(ProcessorTokenCreateRequestProcessorEnum = exports.ProcessorTokenCreateRequestProcessorEnum || (exports.ProcessorTokenCreateRequestProcessorEnum = {}));
    var ProductStatusStatusEnum;
    (function(ProductStatusStatusEnum2) {
      ProductStatusStatusEnum2["Healthy"] = "HEALTHY";
      ProductStatusStatusEnum2["Degraded"] = "DEGRADED";
      ProductStatusStatusEnum2["Down"] = "DOWN";
    })(ProductStatusStatusEnum = exports.ProductStatusStatusEnum || (exports.ProductStatusStatusEnum = {}));
    var ProductStatusBreakdownRefreshIntervalEnum;
    (function(ProductStatusBreakdownRefreshIntervalEnum2) {
      ProductStatusBreakdownRefreshIntervalEnum2["Normal"] = "NORMAL";
      ProductStatusBreakdownRefreshIntervalEnum2["Delayed"] = "DELAYED";
      ProductStatusBreakdownRefreshIntervalEnum2["Stopped"] = "STOPPED";
    })(ProductStatusBreakdownRefreshIntervalEnum = exports.ProductStatusBreakdownRefreshIntervalEnum || (exports.ProductStatusBreakdownRefreshIntervalEnum = {}));
    var Products;
    (function(Products2) {
      Products2["Assets"] = "assets";
      Products2["Auth"] = "auth";
      Products2["Balance"] = "balance";
      Products2["BalancePlus"] = "balance_plus";
      Products2["Beacon"] = "beacon";
      Products2["Identity"] = "identity";
      Products2["IdentityMatch"] = "identity_match";
      Products2["Investments"] = "investments";
      Products2["InvestmentsAuth"] = "investments_auth";
      Products2["Liabilities"] = "liabilities";
      Products2["PaymentInitiation"] = "payment_initiation";
      Products2["IdentityVerification"] = "identity_verification";
      Products2["Transactions"] = "transactions";
      Products2["CreditDetails"] = "credit_details";
      Products2["Income"] = "income";
      Products2["IncomeVerification"] = "income_verification";
      Products2["StandingOrders"] = "standing_orders";
      Products2["Transfer"] = "transfer";
      Products2["Employment"] = "employment";
      Products2["RecurringTransactions"] = "recurring_transactions";
      Products2["TransactionsRefresh"] = "transactions_refresh";
      Products2["Signal"] = "signal";
      Products2["Statements"] = "statements";
      Products2["ProcessorPayments"] = "processor_payments";
      Products2["ProcessorIdentity"] = "processor_identity";
      Products2["Profile"] = "profile";
      Products2["CraBaseReport"] = "cra_base_report";
      Products2["CraIncomeInsights"] = "cra_income_insights";
      Products2["CraPartnerInsights"] = "cra_partner_insights";
      Products2["CraNetworkInsights"] = "cra_network_insights";
      Products2["CraCashflowInsights"] = "cra_cashflow_insights";
      Products2["Layer"] = "layer";
      Products2["PayByBank"] = "pay_by_bank";
    })(Products = exports.Products || (exports.Products = {}));
    var ProgramNameSensitivity;
    (function(ProgramNameSensitivity2) {
      ProgramNameSensitivity2["Coarse"] = "coarse";
      ProgramNameSensitivity2["Balanced"] = "balanced";
      ProgramNameSensitivity2["Strict"] = "strict";
      ProgramNameSensitivity2["Exact"] = "exact";
    })(ProgramNameSensitivity = exports.ProgramNameSensitivity || (exports.ProgramNameSensitivity = {}));
    var ProxyType;
    (function(ProxyType2) {
      ProxyType2["NoneDetected"] = "none_detected";
      ProxyType2["Tor"] = "tor";
      ProxyType2["Vpn"] = "vpn";
      ProxyType2["WebProxy"] = "web_proxy";
      ProxyType2["PublicProxy"] = "public_proxy";
    })(ProxyType = exports.ProxyType || (exports.ProxyType = {}));
    var RecommendationString;
    (function(RecommendationString2) {
      RecommendationString2["Recommended"] = "RECOMMENDED";
      RecommendationString2["NotRecommended"] = "NOT_RECOMMENDED";
      RecommendationString2["Unknown"] = "UNKNOWN";
    })(RecommendationString = exports.RecommendationString || (exports.RecommendationString = {}));
    var RecurringFrequency;
    (function(RecurringFrequency2) {
      RecurringFrequency2["Unknown"] = "UNKNOWN";
      RecurringFrequency2["Weekly"] = "WEEKLY";
      RecurringFrequency2["Biweekly"] = "BIWEEKLY";
      RecurringFrequency2["SemiMonthly"] = "SEMI_MONTHLY";
      RecurringFrequency2["Monthly"] = "MONTHLY";
      RecurringFrequency2["Annually"] = "ANNUALLY";
      RecurringFrequency2["Daily"] = "DAILY";
      RecurringFrequency2["Dynamic"] = "DYNAMIC";
      RecurringFrequency2["Null"] = "null";
    })(RecurringFrequency = exports.RecurringFrequency || (exports.RecurringFrequency = {}));
    var RecurringTransactionFrequency;
    (function(RecurringTransactionFrequency2) {
      RecurringTransactionFrequency2["Unknown"] = "UNKNOWN";
      RecurringTransactionFrequency2["Weekly"] = "WEEKLY";
      RecurringTransactionFrequency2["Biweekly"] = "BIWEEKLY";
      RecurringTransactionFrequency2["SemiMonthly"] = "SEMI_MONTHLY";
      RecurringTransactionFrequency2["Monthly"] = "MONTHLY";
      RecurringTransactionFrequency2["Annually"] = "ANNUALLY";
    })(RecurringTransactionFrequency = exports.RecurringTransactionFrequency || (exports.RecurringTransactionFrequency = {}));
    var ReportType;
    (function(ReportType2) {
      ReportType2["Asset"] = "asset";
    })(ReportType = exports.ReportType || (exports.ReportType = {}));
    var RiskCheckBehaviorBotDetectedLabel;
    (function(RiskCheckBehaviorBotDetectedLabel2) {
      RiskCheckBehaviorBotDetectedLabel2["Yes"] = "yes";
      RiskCheckBehaviorBotDetectedLabel2["No"] = "no";
      RiskCheckBehaviorBotDetectedLabel2["NoData"] = "no_data";
    })(RiskCheckBehaviorBotDetectedLabel = exports.RiskCheckBehaviorBotDetectedLabel || (exports.RiskCheckBehaviorBotDetectedLabel = {}));
    var RiskCheckBehaviorFraudRingDetectedLabel;
    (function(RiskCheckBehaviorFraudRingDetectedLabel2) {
      RiskCheckBehaviorFraudRingDetectedLabel2["Yes"] = "yes";
      RiskCheckBehaviorFraudRingDetectedLabel2["No"] = "no";
      RiskCheckBehaviorFraudRingDetectedLabel2["NoData"] = "no_data";
    })(RiskCheckBehaviorFraudRingDetectedLabel = exports.RiskCheckBehaviorFraudRingDetectedLabel || (exports.RiskCheckBehaviorFraudRingDetectedLabel = {}));
    var RiskCheckBehaviorUserInteractionsLabel;
    (function(RiskCheckBehaviorUserInteractionsLabel2) {
      RiskCheckBehaviorUserInteractionsLabel2["Genuine"] = "genuine";
      RiskCheckBehaviorUserInteractionsLabel2["Neutral"] = "neutral";
      RiskCheckBehaviorUserInteractionsLabel2["Risky"] = "risky";
      RiskCheckBehaviorUserInteractionsLabel2["NoData"] = "no_data";
    })(RiskCheckBehaviorUserInteractionsLabel = exports.RiskCheckBehaviorUserInteractionsLabel || (exports.RiskCheckBehaviorUserInteractionsLabel = {}));
    var RiskCheckEmailDomainIsCustom;
    (function(RiskCheckEmailDomainIsCustom2) {
      RiskCheckEmailDomainIsCustom2["Yes"] = "yes";
      RiskCheckEmailDomainIsCustom2["No"] = "no";
      RiskCheckEmailDomainIsCustom2["NoData"] = "no_data";
    })(RiskCheckEmailDomainIsCustom = exports.RiskCheckEmailDomainIsCustom || (exports.RiskCheckEmailDomainIsCustom = {}));
    var RiskCheckEmailDomainIsDisposable;
    (function(RiskCheckEmailDomainIsDisposable2) {
      RiskCheckEmailDomainIsDisposable2["Yes"] = "yes";
      RiskCheckEmailDomainIsDisposable2["No"] = "no";
      RiskCheckEmailDomainIsDisposable2["NoData"] = "no_data";
    })(RiskCheckEmailDomainIsDisposable = exports.RiskCheckEmailDomainIsDisposable || (exports.RiskCheckEmailDomainIsDisposable = {}));
    var RiskCheckEmailDomainIsFreeProvider;
    (function(RiskCheckEmailDomainIsFreeProvider2) {
      RiskCheckEmailDomainIsFreeProvider2["Yes"] = "yes";
      RiskCheckEmailDomainIsFreeProvider2["No"] = "no";
      RiskCheckEmailDomainIsFreeProvider2["NoData"] = "no_data";
    })(RiskCheckEmailDomainIsFreeProvider = exports.RiskCheckEmailDomainIsFreeProvider || (exports.RiskCheckEmailDomainIsFreeProvider = {}));
    var RiskCheckEmailIsDeliverableStatus;
    (function(RiskCheckEmailIsDeliverableStatus2) {
      RiskCheckEmailIsDeliverableStatus2["Yes"] = "yes";
      RiskCheckEmailIsDeliverableStatus2["No"] = "no";
      RiskCheckEmailIsDeliverableStatus2["NoData"] = "no_data";
    })(RiskCheckEmailIsDeliverableStatus = exports.RiskCheckEmailIsDeliverableStatus || (exports.RiskCheckEmailIsDeliverableStatus = {}));
    var RiskCheckEmailTopLevelDomainIsSuspicious;
    (function(RiskCheckEmailTopLevelDomainIsSuspicious2) {
      RiskCheckEmailTopLevelDomainIsSuspicious2["Yes"] = "yes";
      RiskCheckEmailTopLevelDomainIsSuspicious2["No"] = "no";
      RiskCheckEmailTopLevelDomainIsSuspicious2["NoData"] = "no_data";
    })(RiskCheckEmailTopLevelDomainIsSuspicious = exports.RiskCheckEmailTopLevelDomainIsSuspicious || (exports.RiskCheckEmailTopLevelDomainIsSuspicious = {}));
    var RiskCheckLinkedService;
    (function(RiskCheckLinkedService2) {
      RiskCheckLinkedService2["Aboutme"] = "aboutme";
      RiskCheckLinkedService2["Adobe"] = "adobe";
      RiskCheckLinkedService2["AdultSites"] = "adult_sites";
      RiskCheckLinkedService2["Airbnb"] = "airbnb";
      RiskCheckLinkedService2["Altbalaji"] = "altbalaji";
      RiskCheckLinkedService2["Amazon"] = "amazon";
      RiskCheckLinkedService2["Apple"] = "apple";
      RiskCheckLinkedService2["Archiveorg"] = "archiveorg";
      RiskCheckLinkedService2["Atlassian"] = "atlassian";
      RiskCheckLinkedService2["Bitmoji"] = "bitmoji";
      RiskCheckLinkedService2["Bodybuilding"] = "bodybuilding";
      RiskCheckLinkedService2["Booking"] = "booking";
      RiskCheckLinkedService2["Bukalapak"] = "bukalapak";
      RiskCheckLinkedService2["Codecademy"] = "codecademy";
      RiskCheckLinkedService2["Deliveroo"] = "deliveroo";
      RiskCheckLinkedService2["Diigo"] = "diigo";
      RiskCheckLinkedService2["Discord"] = "discord";
      RiskCheckLinkedService2["Disneyplus"] = "disneyplus";
      RiskCheckLinkedService2["Duolingo"] = "duolingo";
      RiskCheckLinkedService2["Ebay"] = "ebay";
      RiskCheckLinkedService2["Envato"] = "envato";
      RiskCheckLinkedService2["Eventbrite"] = "eventbrite";
      RiskCheckLinkedService2["Evernote"] = "evernote";
      RiskCheckLinkedService2["Facebook"] = "facebook";
      RiskCheckLinkedService2["Firefox"] = "firefox";
      RiskCheckLinkedService2["Flickr"] = "flickr";
      RiskCheckLinkedService2["Flipkart"] = "flipkart";
      RiskCheckLinkedService2["Foursquare"] = "foursquare";
      RiskCheckLinkedService2["Freelancer"] = "freelancer";
      RiskCheckLinkedService2["Gaana"] = "gaana";
      RiskCheckLinkedService2["Giphy"] = "giphy";
      RiskCheckLinkedService2["Github"] = "github";
      RiskCheckLinkedService2["Google"] = "google";
      RiskCheckLinkedService2["Gravatar"] = "gravatar";
      RiskCheckLinkedService2["Hubspot"] = "hubspot";
      RiskCheckLinkedService2["Imgur"] = "imgur";
      RiskCheckLinkedService2["Instagram"] = "instagram";
      RiskCheckLinkedService2["Jdid"] = "jdid";
      RiskCheckLinkedService2["Kakao"] = "kakao";
      RiskCheckLinkedService2["Kommo"] = "kommo";
      RiskCheckLinkedService2["Komoot"] = "komoot";
      RiskCheckLinkedService2["Lastfm"] = "lastfm";
      RiskCheckLinkedService2["Lazada"] = "lazada";
      RiskCheckLinkedService2["Line"] = "line";
      RiskCheckLinkedService2["Linkedin"] = "linkedin";
      RiskCheckLinkedService2["Mailru"] = "mailru";
      RiskCheckLinkedService2["Microsoft"] = "microsoft";
      RiskCheckLinkedService2["Myspace"] = "myspace";
      RiskCheckLinkedService2["Netflix"] = "netflix";
      RiskCheckLinkedService2["Nike"] = "nike";
      RiskCheckLinkedService2["Ok"] = "ok";
      RiskCheckLinkedService2["Patreon"] = "patreon";
      RiskCheckLinkedService2["Pinterest"] = "pinterest";
      RiskCheckLinkedService2["Plurk"] = "plurk";
      RiskCheckLinkedService2["Quora"] = "quora";
      RiskCheckLinkedService2["Qzone"] = "qzone";
      RiskCheckLinkedService2["Rambler"] = "rambler";
      RiskCheckLinkedService2["Rappi"] = "rappi";
      RiskCheckLinkedService2["Replit"] = "replit";
      RiskCheckLinkedService2["Samsung"] = "samsung";
      RiskCheckLinkedService2["Seoclerks"] = "seoclerks";
      RiskCheckLinkedService2["Shopclues"] = "shopclues";
      RiskCheckLinkedService2["Skype"] = "skype";
      RiskCheckLinkedService2["Snapchat"] = "snapchat";
      RiskCheckLinkedService2["Snapdeal"] = "snapdeal";
      RiskCheckLinkedService2["Soundcloud"] = "soundcloud";
      RiskCheckLinkedService2["Spotify"] = "spotify";
      RiskCheckLinkedService2["Starz"] = "starz";
      RiskCheckLinkedService2["Strava"] = "strava";
      RiskCheckLinkedService2["Taringa"] = "taringa";
      RiskCheckLinkedService2["Telegram"] = "telegram";
      RiskCheckLinkedService2["Tiki"] = "tiki";
      RiskCheckLinkedService2["Tokopedia"] = "tokopedia";
      RiskCheckLinkedService2["Treehouse"] = "treehouse";
      RiskCheckLinkedService2["Tumblr"] = "tumblr";
      RiskCheckLinkedService2["Twitter"] = "twitter";
      RiskCheckLinkedService2["Venmo"] = "venmo";
      RiskCheckLinkedService2["Viber"] = "viber";
      RiskCheckLinkedService2["Vimeo"] = "vimeo";
      RiskCheckLinkedService2["Vivino"] = "vivino";
      RiskCheckLinkedService2["Vkontakte"] = "vkontakte";
      RiskCheckLinkedService2["Wattpad"] = "wattpad";
      RiskCheckLinkedService2["Weibo"] = "weibo";
      RiskCheckLinkedService2["Whatsapp"] = "whatsapp";
      RiskCheckLinkedService2["Wordpress"] = "wordpress";
      RiskCheckLinkedService2["Xing"] = "xing";
      RiskCheckLinkedService2["Yahoo"] = "yahoo";
      RiskCheckLinkedService2["Yandex"] = "yandex";
      RiskCheckLinkedService2["Zalo"] = "zalo";
      RiskCheckLinkedService2["Zoho"] = "zoho";
    })(RiskCheckLinkedService = exports.RiskCheckLinkedService || (exports.RiskCheckLinkedService = {}));
    var RiskLevel;
    (function(RiskLevel2) {
      RiskLevel2["Low"] = "low";
      RiskLevel2["Medium"] = "medium";
      RiskLevel2["High"] = "high";
    })(RiskLevel = exports.RiskLevel || (exports.RiskLevel = {}));
    var RiskLevelWithNoData;
    (function(RiskLevelWithNoData2) {
      RiskLevelWithNoData2["Low"] = "low";
      RiskLevelWithNoData2["Medium"] = "medium";
      RiskLevelWithNoData2["High"] = "high";
      RiskLevelWithNoData2["NoData"] = "no_data";
    })(RiskLevelWithNoData = exports.RiskLevelWithNoData || (exports.RiskLevelWithNoData = {}));
    var RiskSignalDocumentStatus;
    (function(RiskSignalDocumentStatus2) {
      RiskSignalDocumentStatus2["Processing"] = "PROCESSING";
      RiskSignalDocumentStatus2["ProcessingComplete"] = "PROCESSING_COMPLETE";
      RiskSignalDocumentStatus2["ProcessingError"] = "PROCESSING_ERROR";
      RiskSignalDocumentStatus2["PasswordProtected"] = "PASSWORD_PROTECTED";
      RiskSignalDocumentStatus2["VirusDetected"] = "VIRUS_DETECTED";
    })(RiskSignalDocumentStatus = exports.RiskSignalDocumentStatus || (exports.RiskSignalDocumentStatus = {}));
    var RiskSignalDocumentType;
    (function(RiskSignalDocumentType2) {
      RiskSignalDocumentType2["Unknown"] = "UNKNOWN";
      RiskSignalDocumentType2["BankStatement"] = "BANK_STATEMENT";
      RiskSignalDocumentType2["BenefitsStatement"] = "BENEFITS_STATEMENT";
      RiskSignalDocumentType2["BusinessFiling"] = "BUSINESS_FILING";
      RiskSignalDocumentType2["Check"] = "CHECK";
      RiskSignalDocumentType2["DrivingLicense"] = "DRIVING_LICENSE";
      RiskSignalDocumentType2["FinancialStatement"] = "FINANCIAL_STATEMENT";
      RiskSignalDocumentType2["Invoice"] = "INVOICE";
      RiskSignalDocumentType2["Payslip"] = "PAYSLIP";
      RiskSignalDocumentType2["SocialSecurityCard"] = "SOCIAL_SECURITY_CARD";
      RiskSignalDocumentType2["TaxForm"] = "TAX_FORM";
      RiskSignalDocumentType2["UtilityBill"] = "UTILITY_BILL";
    })(RiskSignalDocumentType = exports.RiskSignalDocumentType || (exports.RiskSignalDocumentType = {}));
    var RiskSignalFileType;
    (function(RiskSignalFileType2) {
      RiskSignalFileType2["Unknown"] = "UNKNOWN";
      RiskSignalFileType2["ImagePdf"] = "IMAGE_PDF";
      RiskSignalFileType2["ScanOcr"] = "SCAN_OCR";
      RiskSignalFileType2["TruePdf"] = "TRUE_PDF";
      RiskSignalFileType2["Image"] = "IMAGE";
      RiskSignalFileType2["MixedPagePdf"] = "MIXED_PAGE_PDF";
      RiskSignalFileType2["EmptyPdf"] = "EMPTY_PDF";
      RiskSignalFileType2["FlattenedPdf"] = "FLATTENED_PDF";
    })(RiskSignalFileType = exports.RiskSignalFileType || (exports.RiskSignalFileType = {}));
    var SMSVerificationStatus;
    (function(SMSVerificationStatus2) {
      SMSVerificationStatus2["Pending"] = "pending";
      SMSVerificationStatus2["Success"] = "success";
      SMSVerificationStatus2["Failed"] = "failed";
      SMSVerificationStatus2["Canceled"] = "canceled";
    })(SMSVerificationStatus = exports.SMSVerificationStatus || (exports.SMSVerificationStatus = {}));
    var SandboxBankIncomeWebhookFireRequestWebhookCode;
    (function(SandboxBankIncomeWebhookFireRequestWebhookCode2) {
      SandboxBankIncomeWebhookFireRequestWebhookCode2["Update"] = "BANK_INCOME_REFRESH_UPDATE";
      SandboxBankIncomeWebhookFireRequestWebhookCode2["Complete"] = "BANK_INCOME_REFRESH_COMPLETE";
    })(SandboxBankIncomeWebhookFireRequestWebhookCode = exports.SandboxBankIncomeWebhookFireRequestWebhookCode || (exports.SandboxBankIncomeWebhookFireRequestWebhookCode = {}));
    var SandboxIncomeFireWebhookRequestVerificationStatusEnum;
    (function(SandboxIncomeFireWebhookRequestVerificationStatusEnum2) {
      SandboxIncomeFireWebhookRequestVerificationStatusEnum2["ProcessingComplete"] = "VERIFICATION_STATUS_PROCESSING_COMPLETE";
      SandboxIncomeFireWebhookRequestVerificationStatusEnum2["ProcessingFailed"] = "VERIFICATION_STATUS_PROCESSING_FAILED";
      SandboxIncomeFireWebhookRequestVerificationStatusEnum2["PendingApproval"] = "VERIFICATION_STATUS_PENDING_APPROVAL";
    })(SandboxIncomeFireWebhookRequestVerificationStatusEnum = exports.SandboxIncomeFireWebhookRequestVerificationStatusEnum || (exports.SandboxIncomeFireWebhookRequestVerificationStatusEnum = {}));
    var SandboxIncomeWebhookFireRequestWebhookCode;
    (function(SandboxIncomeWebhookFireRequestWebhookCode2) {
      SandboxIncomeWebhookFireRequestWebhookCode2["Verification"] = "INCOME_VERIFICATION";
      SandboxIncomeWebhookFireRequestWebhookCode2["VerificationRiskSignals"] = "INCOME_VERIFICATION_RISK_SIGNALS";
    })(SandboxIncomeWebhookFireRequestWebhookCode = exports.SandboxIncomeWebhookFireRequestWebhookCode || (exports.SandboxIncomeWebhookFireRequestWebhookCode = {}));
    var SandboxItemFireWebhookRequestWebhookCodeEnum;
    (function(SandboxItemFireWebhookRequestWebhookCodeEnum2) {
      SandboxItemFireWebhookRequestWebhookCodeEnum2["DefaultUpdate"] = "DEFAULT_UPDATE";
      SandboxItemFireWebhookRequestWebhookCodeEnum2["NewAccountsAvailable"] = "NEW_ACCOUNTS_AVAILABLE";
      SandboxItemFireWebhookRequestWebhookCodeEnum2["SmsMicrodepositsVerification"] = "SMS_MICRODEPOSITS_VERIFICATION";
      SandboxItemFireWebhookRequestWebhookCodeEnum2["AuthorizationGranted"] = "AUTHORIZATION_GRANTED";
      SandboxItemFireWebhookRequestWebhookCodeEnum2["PendingDisconnect"] = "PENDING_DISCONNECT";
      SandboxItemFireWebhookRequestWebhookCodeEnum2["RecurringTransactionsUpdate"] = "RECURRING_TRANSACTIONS_UPDATE";
      SandboxItemFireWebhookRequestWebhookCodeEnum2["LoginRepaired"] = "LOGIN_REPAIRED";
      SandboxItemFireWebhookRequestWebhookCodeEnum2["SyncUpdatesAvailable"] = "SYNC_UPDATES_AVAILABLE";
      SandboxItemFireWebhookRequestWebhookCodeEnum2["ProductReady"] = "PRODUCT_READY";
      SandboxItemFireWebhookRequestWebhookCodeEnum2["Error"] = "ERROR";
    })(SandboxItemFireWebhookRequestWebhookCodeEnum = exports.SandboxItemFireWebhookRequestWebhookCodeEnum || (exports.SandboxItemFireWebhookRequestWebhookCodeEnum = {}));
    var SandboxItemSetVerificationStatusRequestVerificationStatusEnum;
    (function(SandboxItemSetVerificationStatusRequestVerificationStatusEnum2) {
      SandboxItemSetVerificationStatusRequestVerificationStatusEnum2["AutomaticallyVerified"] = "automatically_verified";
      SandboxItemSetVerificationStatusRequestVerificationStatusEnum2["VerificationExpired"] = "verification_expired";
    })(SandboxItemSetVerificationStatusRequestVerificationStatusEnum = exports.SandboxItemSetVerificationStatusRequestVerificationStatusEnum || (exports.SandboxItemSetVerificationStatusRequestVerificationStatusEnum = {}));
    var ScopesContext;
    (function(ScopesContext2) {
      ScopesContext2["Enrollment"] = "ENROLLMENT";
      ScopesContext2["Portal"] = "PORTAL";
    })(ScopesContext = exports.ScopesContext || (exports.ScopesContext = {}));
    var SelfieAnalysisDocumentComparison;
    (function(SelfieAnalysisDocumentComparison2) {
      SelfieAnalysisDocumentComparison2["Match"] = "match";
      SelfieAnalysisDocumentComparison2["NoMatch"] = "no_match";
      SelfieAnalysisDocumentComparison2["NoInput"] = "no_input";
    })(SelfieAnalysisDocumentComparison = exports.SelfieAnalysisDocumentComparison || (exports.SelfieAnalysisDocumentComparison = {}));
    var SelfieAnalysisFacialAnalysisOutcome;
    (function(SelfieAnalysisFacialAnalysisOutcome2) {
      SelfieAnalysisFacialAnalysisOutcome2["Success"] = "success";
      SelfieAnalysisFacialAnalysisOutcome2["Failed"] = "failed";
    })(SelfieAnalysisFacialAnalysisOutcome = exports.SelfieAnalysisFacialAnalysisOutcome || (exports.SelfieAnalysisFacialAnalysisOutcome = {}));
    var SelfieAnalysisLivenessCheck;
    (function(SelfieAnalysisLivenessCheck2) {
      SelfieAnalysisLivenessCheck2["Success"] = "success";
      SelfieAnalysisLivenessCheck2["Failed"] = "failed";
    })(SelfieAnalysisLivenessCheck = exports.SelfieAnalysisLivenessCheck || (exports.SelfieAnalysisLivenessCheck = {}));
    var SelfieCheckStatus;
    (function(SelfieCheckStatus2) {
      SelfieCheckStatus2["Success"] = "success";
      SelfieCheckStatus2["Failed"] = "failed";
    })(SelfieCheckStatus = exports.SelfieCheckStatus || (exports.SelfieCheckStatus = {}));
    var SelfieStatus;
    (function(SelfieStatus2) {
      SelfieStatus2["Success"] = "success";
      SelfieStatus2["Failed"] = "failed";
    })(SelfieStatus = exports.SelfieStatus || (exports.SelfieStatus = {}));
    var ServiceProductFulfillmentIdentifier;
    (function(ServiceProductFulfillmentIdentifier2) {
      ServiceProductFulfillmentIdentifier2["Voa"] = "VOA";
      ServiceProductFulfillmentIdentifier2["Voe"] = "VOE";
    })(ServiceProductFulfillmentIdentifier = exports.ServiceProductFulfillmentIdentifier || (exports.ServiceProductFulfillmentIdentifier = {}));
    var SignalDecisionOutcome;
    (function(SignalDecisionOutcome2) {
      SignalDecisionOutcome2["Approve"] = "APPROVE";
      SignalDecisionOutcome2["Review"] = "REVIEW";
      SignalDecisionOutcome2["Reject"] = "REJECT";
      SignalDecisionOutcome2["TakeOtherRiskMeasures"] = "TAKE_OTHER_RISK_MEASURES";
      SignalDecisionOutcome2["NotEvaluated"] = "NOT_EVALUATED";
    })(SignalDecisionOutcome = exports.SignalDecisionOutcome || (exports.SignalDecisionOutcome = {}));
    var SignalPaymentMethod;
    (function(SignalPaymentMethod2) {
      SignalPaymentMethod2["SameDayAch"] = "SAME_DAY_ACH";
      SignalPaymentMethod2["NextDayAch"] = "NEXT_DAY_ACH";
      SignalPaymentMethod2["StandardAch"] = "STANDARD_ACH";
      SignalPaymentMethod2["RealTimePayments"] = "REAL_TIME_PAYMENTS";
      SignalPaymentMethod2["DebitCard"] = "DEBIT_CARD";
      SignalPaymentMethod2["MultiplePaymentMethods"] = "MULTIPLE_PAYMENT_METHODS";
    })(SignalPaymentMethod = exports.SignalPaymentMethod || (exports.SignalPaymentMethod = {}));
    var SignalScheduleDefaultPaymentMethod;
    (function(SignalScheduleDefaultPaymentMethod2) {
      SignalScheduleDefaultPaymentMethod2["SameDayAch"] = "SAME_DAY_ACH";
      SignalScheduleDefaultPaymentMethod2["StandardAch"] = "STANDARD_ACH";
      SignalScheduleDefaultPaymentMethod2["RealTimePayments"] = "REAL_TIME_PAYMENTS";
      SignalScheduleDefaultPaymentMethod2["DebitCard"] = "DEBIT_CARD";
      SignalScheduleDefaultPaymentMethod2["MultiplePaymentMethods"] = "MULTIPLE_PAYMENT_METHODS";
    })(SignalScheduleDefaultPaymentMethod = exports.SignalScheduleDefaultPaymentMethod || (exports.SignalScheduleDefaultPaymentMethod = {}));
    var Source;
    (function(Source2) {
      Source2["Dashboard"] = "dashboard";
      Source2["Link"] = "link";
      Source2["Api"] = "api";
      Source2["System"] = "system";
    })(Source = exports.Source || (exports.Source = {}));
    var StatementsRefreshCompleteResult;
    (function(StatementsRefreshCompleteResult2) {
      StatementsRefreshCompleteResult2["Success"] = "SUCCESS";
      StatementsRefreshCompleteResult2["Failure"] = "FAILURE";
    })(StatementsRefreshCompleteResult = exports.StatementsRefreshCompleteResult || (exports.StatementsRefreshCompleteResult = {}));
    var Strategy;
    (function(Strategy2) {
      Strategy2["Reset"] = "reset";
      Strategy2["Incomplete"] = "incomplete";
      Strategy2["Infer"] = "infer";
      Strategy2["Custom"] = "custom";
    })(Strategy = exports.Strategy || (exports.Strategy = {}));
    var StudentLoanStatusTypeEnum;
    (function(StudentLoanStatusTypeEnum2) {
      StudentLoanStatusTypeEnum2["Cancelled"] = "cancelled";
      StudentLoanStatusTypeEnum2["ChargedOff"] = "charged off";
      StudentLoanStatusTypeEnum2["Claim"] = "claim";
      StudentLoanStatusTypeEnum2["Consolidated"] = "consolidated";
      StudentLoanStatusTypeEnum2["Deferment"] = "deferment";
      StudentLoanStatusTypeEnum2["Delinquent"] = "delinquent";
      StudentLoanStatusTypeEnum2["Discharged"] = "discharged";
      StudentLoanStatusTypeEnum2["Extension"] = "extension";
      StudentLoanStatusTypeEnum2["Forbearance"] = "forbearance";
      StudentLoanStatusTypeEnum2["InGrace"] = "in grace";
      StudentLoanStatusTypeEnum2["InMilitary"] = "in military";
      StudentLoanStatusTypeEnum2["InSchool"] = "in school";
      StudentLoanStatusTypeEnum2["NotFullyDisbursed"] = "not fully disbursed";
      StudentLoanStatusTypeEnum2["Other"] = "other";
      StudentLoanStatusTypeEnum2["PaidInFull"] = "paid in full";
      StudentLoanStatusTypeEnum2["Refunded"] = "refunded";
      StudentLoanStatusTypeEnum2["Repayment"] = "repayment";
      StudentLoanStatusTypeEnum2["Transferred"] = "transferred";
      StudentLoanStatusTypeEnum2["PendingIdr"] = "pending idr";
    })(StudentLoanStatusTypeEnum = exports.StudentLoanStatusTypeEnum || (exports.StudentLoanStatusTypeEnum = {}));
    var StudentRepaymentPlanTypeEnum;
    (function(StudentRepaymentPlanTypeEnum2) {
      StudentRepaymentPlanTypeEnum2["ExtendedGraduated"] = "extended graduated";
      StudentRepaymentPlanTypeEnum2["ExtendedStandard"] = "extended standard";
      StudentRepaymentPlanTypeEnum2["Graduated"] = "graduated";
      StudentRepaymentPlanTypeEnum2["IncomeContingentRepayment"] = "income-contingent repayment";
      StudentRepaymentPlanTypeEnum2["IncomeBasedRepayment"] = "income-based repayment";
      StudentRepaymentPlanTypeEnum2["IncomeSensitiveRepayment"] = "income-sensitive repayment";
      StudentRepaymentPlanTypeEnum2["InterestOnly"] = "interest-only";
      StudentRepaymentPlanTypeEnum2["Other"] = "other";
      StudentRepaymentPlanTypeEnum2["PayAsYouEarn"] = "pay as you earn";
      StudentRepaymentPlanTypeEnum2["RevisedPayAsYouEarn"] = "revised pay as you earn";
      StudentRepaymentPlanTypeEnum2["Standard"] = "standard";
      StudentRepaymentPlanTypeEnum2["SavingOnAValuableEducation"] = "saving on a valuable education";
      StudentRepaymentPlanTypeEnum2["Null"] = "null";
    })(StudentRepaymentPlanTypeEnum = exports.StudentRepaymentPlanTypeEnum || (exports.StudentRepaymentPlanTypeEnum = {}));
    var SweepStatus;
    (function(SweepStatus2) {
      SweepStatus2["Pending"] = "pending";
      SweepStatus2["Posted"] = "posted";
      SweepStatus2["Settled"] = "settled";
      SweepStatus2["Returned"] = "returned";
      SweepStatus2["Failed"] = "failed";
      SweepStatus2["Null"] = "null";
    })(SweepStatus = exports.SweepStatus || (exports.SweepStatus = {}));
    var SweepTrigger;
    (function(SweepTrigger2) {
      SweepTrigger2["Manual"] = "manual";
      SweepTrigger2["Incoming"] = "incoming";
      SweepTrigger2["BalanceThreshold"] = "balance_threshold";
      SweepTrigger2["AutomaticAggregate"] = "automatic_aggregate";
    })(SweepTrigger = exports.SweepTrigger || (exports.SweepTrigger = {}));
    var TaxpayerIdentifierType;
    (function(TaxpayerIdentifierType2) {
      TaxpayerIdentifierType2["IndividualTaxpayerIdentificationNumber"] = "IndividualTaxpayerIdentificationNumber";
      TaxpayerIdentifierType2["SocialSecurityNumber"] = "SocialSecurityNumber";
    })(TaxpayerIdentifierType = exports.TaxpayerIdentifierType || (exports.TaxpayerIdentifierType = {}));
    var TotalCanonicalDescription;
    (function(TotalCanonicalDescription2) {
      TotalCanonicalDescription2["Bonus"] = "BONUS";
      TotalCanonicalDescription2["Commission"] = "COMMISSION";
      TotalCanonicalDescription2["Overtime"] = "OVERTIME";
      TotalCanonicalDescription2["PaidTimeOff"] = "PAID TIME OFF";
      TotalCanonicalDescription2["RegularPay"] = "REGULAR PAY";
      TotalCanonicalDescription2["Vacation"] = "VACATION";
      TotalCanonicalDescription2["EmployeeMedicare"] = "EMPLOYEE MEDICARE";
      TotalCanonicalDescription2["Fica"] = "FICA";
      TotalCanonicalDescription2["SocialSecurityEmployeeTax"] = "SOCIAL SECURITY EMPLOYEE TAX";
      TotalCanonicalDescription2["Medical"] = "MEDICAL";
      TotalCanonicalDescription2["Vision"] = "VISION";
      TotalCanonicalDescription2["Dental"] = "DENTAL";
      TotalCanonicalDescription2["NetPay"] = "NET PAY";
      TotalCanonicalDescription2["Taxes"] = "TAXES";
      TotalCanonicalDescription2["NotFound"] = "NOT_FOUND";
      TotalCanonicalDescription2["Other"] = "OTHER";
      TotalCanonicalDescription2["Null"] = "null";
    })(TotalCanonicalDescription = exports.TotalCanonicalDescription || (exports.TotalCanonicalDescription = {}));
    var TransactionTransactionTypeEnum;
    (function(TransactionTransactionTypeEnum2) {
      TransactionTransactionTypeEnum2["Digital"] = "digital";
      TransactionTransactionTypeEnum2["Place"] = "place";
      TransactionTransactionTypeEnum2["Special"] = "special";
      TransactionTransactionTypeEnum2["Unresolved"] = "unresolved";
    })(TransactionTransactionTypeEnum = exports.TransactionTransactionTypeEnum || (exports.TransactionTransactionTypeEnum = {}));
    var TransactionPaymentChannelEnum;
    (function(TransactionPaymentChannelEnum2) {
      TransactionPaymentChannelEnum2["Online"] = "online";
      TransactionPaymentChannelEnum2["InStore"] = "in store";
      TransactionPaymentChannelEnum2["Other"] = "other";
    })(TransactionPaymentChannelEnum = exports.TransactionPaymentChannelEnum || (exports.TransactionPaymentChannelEnum = {}));
    var TransactionAllOfPaymentChannelEnum;
    (function(TransactionAllOfPaymentChannelEnum2) {
      TransactionAllOfPaymentChannelEnum2["Online"] = "online";
      TransactionAllOfPaymentChannelEnum2["InStore"] = "in store";
      TransactionAllOfPaymentChannelEnum2["Other"] = "other";
    })(TransactionAllOfPaymentChannelEnum = exports.TransactionAllOfPaymentChannelEnum || (exports.TransactionAllOfPaymentChannelEnum = {}));
    var TransactionBaseTransactionTypeEnum;
    (function(TransactionBaseTransactionTypeEnum2) {
      TransactionBaseTransactionTypeEnum2["Digital"] = "digital";
      TransactionBaseTransactionTypeEnum2["Place"] = "place";
      TransactionBaseTransactionTypeEnum2["Special"] = "special";
      TransactionBaseTransactionTypeEnum2["Unresolved"] = "unresolved";
    })(TransactionBaseTransactionTypeEnum = exports.TransactionBaseTransactionTypeEnum || (exports.TransactionBaseTransactionTypeEnum = {}));
    var TransactionCode;
    (function(TransactionCode2) {
      TransactionCode2["Adjustment"] = "adjustment";
      TransactionCode2["Atm"] = "atm";
      TransactionCode2["BankCharge"] = "bank charge";
      TransactionCode2["BillPayment"] = "bill payment";
      TransactionCode2["Cash"] = "cash";
      TransactionCode2["Cashback"] = "cashback";
      TransactionCode2["Cheque"] = "cheque";
      TransactionCode2["DirectDebit"] = "direct debit";
      TransactionCode2["Interest"] = "interest";
      TransactionCode2["Purchase"] = "purchase";
      TransactionCode2["StandingOrder"] = "standing order";
      TransactionCode2["Transfer"] = "transfer";
      TransactionCode2["Null"] = "null";
    })(TransactionCode = exports.TransactionCode || (exports.TransactionCode = {}));
    var TransactionStreamStatus;
    (function(TransactionStreamStatus2) {
      TransactionStreamStatus2["Unknown"] = "UNKNOWN";
      TransactionStreamStatus2["Mature"] = "MATURE";
      TransactionStreamStatus2["EarlyDetection"] = "EARLY_DETECTION";
      TransactionStreamStatus2["Tombstoned"] = "TOMBSTONED";
    })(TransactionStreamStatus = exports.TransactionStreamStatus || (exports.TransactionStreamStatus = {}));
    var TransactionsRuleField;
    (function(TransactionsRuleField2) {
      TransactionsRuleField2["TransactionId"] = "TRANSACTION_ID";
      TransactionsRuleField2["Name"] = "NAME";
    })(TransactionsRuleField = exports.TransactionsRuleField || (exports.TransactionsRuleField = {}));
    var TransactionsRuleType;
    (function(TransactionsRuleType2) {
      TransactionsRuleType2["ExactMatch"] = "EXACT_MATCH";
      TransactionsRuleType2["SubstringMatch"] = "SUBSTRING_MATCH";
    })(TransactionsRuleType = exports.TransactionsRuleType || (exports.TransactionsRuleType = {}));
    var TransactionsUpdateStatus;
    (function(TransactionsUpdateStatus2) {
      TransactionsUpdateStatus2["TransactionsUpdateStatusUnknown"] = "TRANSACTIONS_UPDATE_STATUS_UNKNOWN";
      TransactionsUpdateStatus2["NotReady"] = "NOT_READY";
      TransactionsUpdateStatus2["InitialUpdateComplete"] = "INITIAL_UPDATE_COMPLETE";
      TransactionsUpdateStatus2["HistoricalUpdateComplete"] = "HISTORICAL_UPDATE_COMPLETE";
    })(TransactionsUpdateStatus = exports.TransactionsUpdateStatus || (exports.TransactionsUpdateStatus = {}));
    var TransferACHNetwork;
    (function(TransferACHNetwork2) {
      TransferACHNetwork2["Ach"] = "ach";
      TransferACHNetwork2["SameDayAch"] = "same-day-ach";
    })(TransferACHNetwork = exports.TransferACHNetwork || (exports.TransferACHNetwork = {}));
    var TransferAuthorizationDecision;
    (function(TransferAuthorizationDecision2) {
      TransferAuthorizationDecision2["Approved"] = "approved";
      TransferAuthorizationDecision2["Declined"] = "declined";
      TransferAuthorizationDecision2["UserActionRequired"] = "user_action_required";
    })(TransferAuthorizationDecision = exports.TransferAuthorizationDecision || (exports.TransferAuthorizationDecision = {}));
    var TransferAuthorizationDecisionRationaleCode;
    (function(TransferAuthorizationDecisionRationaleCode2) {
      TransferAuthorizationDecisionRationaleCode2["Nsf"] = "NSF";
      TransferAuthorizationDecisionRationaleCode2["Risk"] = "RISK";
      TransferAuthorizationDecisionRationaleCode2["TransferLimitReached"] = "TRANSFER_LIMIT_REACHED";
      TransferAuthorizationDecisionRationaleCode2["ManuallyVerifiedItem"] = "MANUALLY_VERIFIED_ITEM";
      TransferAuthorizationDecisionRationaleCode2["ItemLoginRequired"] = "ITEM_LOGIN_REQUIRED";
      TransferAuthorizationDecisionRationaleCode2["PaymentProfileLoginRequired"] = "PAYMENT_PROFILE_LOGIN_REQUIRED";
      TransferAuthorizationDecisionRationaleCode2["Error"] = "ERROR";
      TransferAuthorizationDecisionRationaleCode2["MigratedAccountItem"] = "MIGRATED_ACCOUNT_ITEM";
      TransferAuthorizationDecisionRationaleCode2["Null"] = "null";
    })(TransferAuthorizationDecisionRationaleCode = exports.TransferAuthorizationDecisionRationaleCode || (exports.TransferAuthorizationDecisionRationaleCode = {}));
    var TransferAuthorizationGuaranteeDecision;
    (function(TransferAuthorizationGuaranteeDecision2) {
      TransferAuthorizationGuaranteeDecision2["Guaranteed"] = "GUARANTEED";
      TransferAuthorizationGuaranteeDecision2["NotGuaranteed"] = "NOT_GUARANTEED";
      TransferAuthorizationGuaranteeDecision2["Null"] = "null";
    })(TransferAuthorizationGuaranteeDecision = exports.TransferAuthorizationGuaranteeDecision || (exports.TransferAuthorizationGuaranteeDecision = {}));
    var TransferAuthorizationGuaranteeDecisionRationaleCode;
    (function(TransferAuthorizationGuaranteeDecisionRationaleCode2) {
      TransferAuthorizationGuaranteeDecisionRationaleCode2["ReturnBank"] = "RETURN_BANK";
      TransferAuthorizationGuaranteeDecisionRationaleCode2["ReturnCustomer"] = "RETURN_CUSTOMER";
      TransferAuthorizationGuaranteeDecisionRationaleCode2["GuaranteeLimitReached"] = "GUARANTEE_LIMIT_REACHED";
      TransferAuthorizationGuaranteeDecisionRationaleCode2["RiskEstimateUnavailable"] = "RISK_ESTIMATE_UNAVAILABLE";
      TransferAuthorizationGuaranteeDecisionRationaleCode2["RequiredParamMissing"] = "REQUIRED_PARAM_MISSING";
    })(TransferAuthorizationGuaranteeDecisionRationaleCode = exports.TransferAuthorizationGuaranteeDecisionRationaleCode || (exports.TransferAuthorizationGuaranteeDecisionRationaleCode = {}));
    var TransferAuthorizationRiskLevel;
    (function(TransferAuthorizationRiskLevel2) {
      TransferAuthorizationRiskLevel2["HighRisk"] = "HIGH_RISK";
      TransferAuthorizationRiskLevel2["MediumHighRisk"] = "MEDIUM_HIGH_RISK";
      TransferAuthorizationRiskLevel2["MediumRisk"] = "MEDIUM_RISK";
      TransferAuthorizationRiskLevel2["MediumLowRisk"] = "MEDIUM_LOW_RISK";
      TransferAuthorizationRiskLevel2["LowRisk"] = "LOW_RISK";
    })(TransferAuthorizationRiskLevel = exports.TransferAuthorizationRiskLevel || (exports.TransferAuthorizationRiskLevel = {}));
    var TransferBalanceType;
    (function(TransferBalanceType2) {
      TransferBalanceType2["RtpCredits"] = "prefunded_rtp_credits";
      TransferBalanceType2["AchCredits"] = "prefunded_ach_credits";
    })(TransferBalanceType = exports.TransferBalanceType || (exports.TransferBalanceType = {}));
    var TransferCreditFundsSource;
    (function(TransferCreditFundsSource2) {
      TransferCreditFundsSource2["Sweep"] = "sweep";
      TransferCreditFundsSource2["PrefundedRtpCredits"] = "prefunded_rtp_credits";
      TransferCreditFundsSource2["PrefundedAchCredits"] = "prefunded_ach_credits";
      TransferCreditFundsSource2["Null"] = "null";
    })(TransferCreditFundsSource = exports.TransferCreditFundsSource || (exports.TransferCreditFundsSource = {}));
    var TransferDiligenceStatus;
    (function(TransferDiligenceStatus2) {
      TransferDiligenceStatus2["NotSubmitted"] = "not_submitted";
      TransferDiligenceStatus2["Submitted"] = "submitted";
      TransferDiligenceStatus2["UnderReview"] = "under_review";
      TransferDiligenceStatus2["Approved"] = "approved";
      TransferDiligenceStatus2["Denied"] = "denied";
      TransferDiligenceStatus2["MoreInformationRequired"] = "more_information_required";
    })(TransferDiligenceStatus = exports.TransferDiligenceStatus || (exports.TransferDiligenceStatus = {}));
    var TransferDocumentPurpose;
    (function(TransferDocumentPurpose2) {
      TransferDocumentPurpose2["DueDiligence"] = "DUE_DILIGENCE";
    })(TransferDocumentPurpose = exports.TransferDocumentPurpose || (exports.TransferDocumentPurpose = {}));
    var TransferEventListTransferType;
    (function(TransferEventListTransferType2) {
      TransferEventListTransferType2["Debit"] = "debit";
      TransferEventListTransferType2["Credit"] = "credit";
      TransferEventListTransferType2["Null"] = "null";
    })(TransferEventListTransferType = exports.TransferEventListTransferType || (exports.TransferEventListTransferType = {}));
    var TransferEventType;
    (function(TransferEventType2) {
      TransferEventType2["Pending"] = "pending";
      TransferEventType2["Cancelled"] = "cancelled";
      TransferEventType2["Failed"] = "failed";
      TransferEventType2["Posted"] = "posted";
      TransferEventType2["Settled"] = "settled";
      TransferEventType2["FundsAvailable"] = "funds_available";
      TransferEventType2["Returned"] = "returned";
      TransferEventType2["Swept"] = "swept";
      TransferEventType2["SweptSettled"] = "swept_settled";
      TransferEventType2["ReturnSwept"] = "return_swept";
      TransferEventType2["SweepPending"] = "sweep.pending";
      TransferEventType2["SweepPosted"] = "sweep.posted";
      TransferEventType2["SweepSettled"] = "sweep.settled";
      TransferEventType2["SweepReturned"] = "sweep.returned";
      TransferEventType2["SweepFailed"] = "sweep.failed";
      TransferEventType2["SweepFundsAvailable"] = "sweep.funds_available";
      TransferEventType2["RefundPending"] = "refund.pending";
      TransferEventType2["RefundCancelled"] = "refund.cancelled";
      TransferEventType2["RefundFailed"] = "refund.failed";
      TransferEventType2["RefundPosted"] = "refund.posted";
      TransferEventType2["RefundSettled"] = "refund.settled";
      TransferEventType2["RefundReturned"] = "refund.returned";
      TransferEventType2["RefundSwept"] = "refund.swept";
      TransferEventType2["RefundReturnSwept"] = "refund.return_swept";
    })(TransferEventType = exports.TransferEventType || (exports.TransferEventType = {}));
    var TransferIntentAuthorizationDecision;
    (function(TransferIntentAuthorizationDecision2) {
      TransferIntentAuthorizationDecision2["Approved"] = "APPROVED";
      TransferIntentAuthorizationDecision2["Declined"] = "DECLINED";
    })(TransferIntentAuthorizationDecision = exports.TransferIntentAuthorizationDecision || (exports.TransferIntentAuthorizationDecision = {}));
    var TransferIntentCreateMode;
    (function(TransferIntentCreateMode2) {
      TransferIntentCreateMode2["Payment"] = "PAYMENT";
      TransferIntentCreateMode2["Disbursement"] = "DISBURSEMENT";
    })(TransferIntentCreateMode = exports.TransferIntentCreateMode || (exports.TransferIntentCreateMode = {}));
    var TransferIntentCreateNetwork;
    (function(TransferIntentCreateNetwork2) {
      TransferIntentCreateNetwork2["Ach"] = "ach";
      TransferIntentCreateNetwork2["SameDayAch"] = "same-day-ach";
      TransferIntentCreateNetwork2["Rtp"] = "rtp";
    })(TransferIntentCreateNetwork = exports.TransferIntentCreateNetwork || (exports.TransferIntentCreateNetwork = {}));
    var TransferIntentStatus;
    (function(TransferIntentStatus2) {
      TransferIntentStatus2["Pending"] = "PENDING";
      TransferIntentStatus2["Succeeded"] = "SUCCEEDED";
      TransferIntentStatus2["Failed"] = "FAILED";
    })(TransferIntentStatus = exports.TransferIntentStatus || (exports.TransferIntentStatus = {}));
    var TransferLedgerSweepSimulateEventType;
    (function(TransferLedgerSweepSimulateEventType2) {
      TransferLedgerSweepSimulateEventType2["Posted"] = "sweep.posted";
      TransferLedgerSweepSimulateEventType2["Settled"] = "sweep.settled";
      TransferLedgerSweepSimulateEventType2["Returned"] = "sweep.returned";
      TransferLedgerSweepSimulateEventType2["Failed"] = "sweep.failed";
    })(TransferLedgerSweepSimulateEventType = exports.TransferLedgerSweepSimulateEventType || (exports.TransferLedgerSweepSimulateEventType = {}));
    var TransferNetwork;
    (function(TransferNetwork2) {
      TransferNetwork2["Ach"] = "ach";
      TransferNetwork2["SameDayAch"] = "same-day-ach";
      TransferNetwork2["Rtp"] = "rtp";
      TransferNetwork2["Wire"] = "wire";
    })(TransferNetwork = exports.TransferNetwork || (exports.TransferNetwork = {}));
    var TransferRecurringNetwork;
    (function(TransferRecurringNetwork2) {
      TransferRecurringNetwork2["Ach"] = "ach";
      TransferRecurringNetwork2["SameDayAch"] = "same-day-ach";
      TransferRecurringNetwork2["Rtp"] = "rtp";
    })(TransferRecurringNetwork = exports.TransferRecurringNetwork || (exports.TransferRecurringNetwork = {}));
    var TransferRecurringStatus;
    (function(TransferRecurringStatus2) {
      TransferRecurringStatus2["Active"] = "active";
      TransferRecurringStatus2["Cancelled"] = "cancelled";
      TransferRecurringStatus2["Expired"] = "expired";
    })(TransferRecurringStatus = exports.TransferRecurringStatus || (exports.TransferRecurringStatus = {}));
    var TransferRefundStatus;
    (function(TransferRefundStatus2) {
      TransferRefundStatus2["Pending"] = "pending";
      TransferRefundStatus2["Posted"] = "posted";
      TransferRefundStatus2["Cancelled"] = "cancelled";
      TransferRefundStatus2["Failed"] = "failed";
      TransferRefundStatus2["Settled"] = "settled";
      TransferRefundStatus2["Returned"] = "returned";
    })(TransferRefundStatus = exports.TransferRefundStatus || (exports.TransferRefundStatus = {}));
    var TransferScheduleIntervalUnit;
    (function(TransferScheduleIntervalUnit2) {
      TransferScheduleIntervalUnit2["Week"] = "week";
      TransferScheduleIntervalUnit2["Month"] = "month";
    })(TransferScheduleIntervalUnit = exports.TransferScheduleIntervalUnit || (exports.TransferScheduleIntervalUnit = {}));
    var TransferStatus;
    (function(TransferStatus2) {
      TransferStatus2["Pending"] = "pending";
      TransferStatus2["Posted"] = "posted";
      TransferStatus2["Settled"] = "settled";
      TransferStatus2["FundsAvailable"] = "funds_available";
      TransferStatus2["Cancelled"] = "cancelled";
      TransferStatus2["Failed"] = "failed";
      TransferStatus2["Returned"] = "returned";
    })(TransferStatus = exports.TransferStatus || (exports.TransferStatus = {}));
    var TransferSweepStatus;
    (function(TransferSweepStatus2) {
      TransferSweepStatus2["Null"] = "null";
      TransferSweepStatus2["Unswept"] = "unswept";
      TransferSweepStatus2["Swept"] = "swept";
      TransferSweepStatus2["SweptSettled"] = "swept_settled";
      TransferSweepStatus2["ReturnSwept"] = "return_swept";
      TransferSweepStatus2["FundsAvailable"] = "funds_available";
    })(TransferSweepStatus = exports.TransferSweepStatus || (exports.TransferSweepStatus = {}));
    var TransferType;
    (function(TransferType2) {
      TransferType2["Debit"] = "debit";
      TransferType2["Credit"] = "credit";
    })(TransferType = exports.TransferType || (exports.TransferType = {}));
    var UserStatedIncomeSourceCategory;
    (function(UserStatedIncomeSourceCategory2) {
      UserStatedIncomeSourceCategory2["Other"] = "OTHER";
      UserStatedIncomeSourceCategory2["Salary"] = "SALARY";
      UserStatedIncomeSourceCategory2["Unemployment"] = "UNEMPLOYMENT";
      UserStatedIncomeSourceCategory2["Cash"] = "CASH";
      UserStatedIncomeSourceCategory2["GigEconomy"] = "GIG_ECONOMY";
      UserStatedIncomeSourceCategory2["Rental"] = "RENTAL";
      UserStatedIncomeSourceCategory2["ChildSupport"] = "CHILD_SUPPORT";
      UserStatedIncomeSourceCategory2["Military"] = "MILITARY";
      UserStatedIncomeSourceCategory2["Retirement"] = "RETIREMENT";
      UserStatedIncomeSourceCategory2["LongTermDisability"] = "LONG_TERM_DISABILITY";
      UserStatedIncomeSourceCategory2["BankInterest"] = "BANK_INTEREST";
    })(UserStatedIncomeSourceCategory = exports.UserStatedIncomeSourceCategory || (exports.UserStatedIncomeSourceCategory = {}));
    var UserStatedIncomeSourceFrequency;
    (function(UserStatedIncomeSourceFrequency2) {
      UserStatedIncomeSourceFrequency2["Unknown"] = "UNKNOWN";
      UserStatedIncomeSourceFrequency2["Weekly"] = "WEEKLY";
      UserStatedIncomeSourceFrequency2["Biweekly"] = "BIWEEKLY";
      UserStatedIncomeSourceFrequency2["SemiMonthly"] = "SEMI_MONTHLY";
      UserStatedIncomeSourceFrequency2["Monthly"] = "MONTHLY";
    })(UserStatedIncomeSourceFrequency = exports.UserStatedIncomeSourceFrequency || (exports.UserStatedIncomeSourceFrequency = {}));
    var UserStatedIncomeSourcePayType;
    (function(UserStatedIncomeSourcePayType2) {
      UserStatedIncomeSourcePayType2["Unknown"] = "UNKNOWN";
      UserStatedIncomeSourcePayType2["Gross"] = "GROSS";
      UserStatedIncomeSourcePayType2["Net"] = "NET";
    })(UserStatedIncomeSourcePayType = exports.UserStatedIncomeSourcePayType || (exports.UserStatedIncomeSourcePayType = {}));
    var VerificationRefreshStatus;
    (function(VerificationRefreshStatus2) {
      VerificationRefreshStatus2["StatusUserPresenceRequired"] = "VERIFICATION_REFRESH_STATUS_USER_PRESENCE_REQUIRED";
      VerificationRefreshStatus2["Successful"] = "VERIFICATION_REFRESH_SUCCESSFUL";
      VerificationRefreshStatus2["NotFound"] = "VERIFICATION_REFRESH_NOT_FOUND";
    })(VerificationRefreshStatus = exports.VerificationRefreshStatus || (exports.VerificationRefreshStatus = {}));
    var VerificationStatus;
    (function(VerificationStatus2) {
      VerificationStatus2["Verified"] = "VERIFIED";
      VerificationStatus2["Unverified"] = "UNVERIFIED";
      VerificationStatus2["NeedsInfo"] = "NEEDS_INFO";
      VerificationStatus2["UnableToVerify"] = "UNABLE_TO_VERIFY";
      VerificationStatus2["Unknown"] = "UNKNOWN";
    })(VerificationStatus = exports.VerificationStatus || (exports.VerificationStatus = {}));
    var VerifySMSDetailsStatus;
    (function(VerifySMSDetailsStatus2) {
      VerifySMSDetailsStatus2["Success"] = "success";
      VerifySMSDetailsStatus2["Failed"] = "failed";
    })(VerifySMSDetailsStatus = exports.VerifySMSDetailsStatus || (exports.VerifySMSDetailsStatus = {}));
    var WalletISOCurrencyCode;
    (function(WalletISOCurrencyCode2) {
      WalletISOCurrencyCode2["Gbp"] = "GBP";
      WalletISOCurrencyCode2["Eur"] = "EUR";
    })(WalletISOCurrencyCode = exports.WalletISOCurrencyCode || (exports.WalletISOCurrencyCode = {}));
    var WalletPaymentScheme;
    (function(WalletPaymentScheme2) {
      WalletPaymentScheme2["Null"] = "null";
      WalletPaymentScheme2["FasterPayments"] = "FASTER_PAYMENTS";
      WalletPaymentScheme2["SepaCreditTransfer"] = "SEPA_CREDIT_TRANSFER";
      WalletPaymentScheme2["SepaCreditTransferInstant"] = "SEPA_CREDIT_TRANSFER_INSTANT";
    })(WalletPaymentScheme = exports.WalletPaymentScheme || (exports.WalletPaymentScheme = {}));
    var WalletStatus;
    (function(WalletStatus2) {
      WalletStatus2["Unknown"] = "UNKNOWN";
      WalletStatus2["Active"] = "ACTIVE";
      WalletStatus2["Closed"] = "CLOSED";
    })(WalletStatus = exports.WalletStatus || (exports.WalletStatus = {}));
    var WalletTransactionTypeEnum;
    (function(WalletTransactionTypeEnum2) {
      WalletTransactionTypeEnum2["BankTransfer"] = "BANK_TRANSFER";
      WalletTransactionTypeEnum2["Payout"] = "PAYOUT";
      WalletTransactionTypeEnum2["PisPayIn"] = "PIS_PAY_IN";
      WalletTransactionTypeEnum2["Refund"] = "REFUND";
      WalletTransactionTypeEnum2["FundsSweep"] = "FUNDS_SWEEP";
      WalletTransactionTypeEnum2["Return"] = "RETURN";
      WalletTransactionTypeEnum2["Recall"] = "RECALL";
    })(WalletTransactionTypeEnum = exports.WalletTransactionTypeEnum || (exports.WalletTransactionTypeEnum = {}));
    var WalletTransactionFailureReason;
    (function(WalletTransactionFailureReason2) {
      WalletTransactionFailureReason2["ExternalSystem"] = "EXTERNAL_SYSTEM";
      WalletTransactionFailureReason2["Expired"] = "EXPIRED";
      WalletTransactionFailureReason2["Cancelled"] = "CANCELLED";
      WalletTransactionFailureReason2["Invalid"] = "INVALID";
      WalletTransactionFailureReason2["Unknown"] = "UNKNOWN";
    })(WalletTransactionFailureReason = exports.WalletTransactionFailureReason || (exports.WalletTransactionFailureReason = {}));
    var WalletTransactionGetResponseTypeEnum;
    (function(WalletTransactionGetResponseTypeEnum2) {
      WalletTransactionGetResponseTypeEnum2["BankTransfer"] = "BANK_TRANSFER";
      WalletTransactionGetResponseTypeEnum2["Payout"] = "PAYOUT";
      WalletTransactionGetResponseTypeEnum2["PisPayIn"] = "PIS_PAY_IN";
      WalletTransactionGetResponseTypeEnum2["Refund"] = "REFUND";
      WalletTransactionGetResponseTypeEnum2["FundsSweep"] = "FUNDS_SWEEP";
      WalletTransactionGetResponseTypeEnum2["Return"] = "RETURN";
      WalletTransactionGetResponseTypeEnum2["Recall"] = "RECALL";
    })(WalletTransactionGetResponseTypeEnum = exports.WalletTransactionGetResponseTypeEnum || (exports.WalletTransactionGetResponseTypeEnum = {}));
    var WalletTransactionRelationTypeEnum;
    (function(WalletTransactionRelationTypeEnum2) {
      WalletTransactionRelationTypeEnum2["Payout"] = "PAYOUT";
      WalletTransactionRelationTypeEnum2["Return"] = "RETURN";
      WalletTransactionRelationTypeEnum2["Refund"] = "REFUND";
      WalletTransactionRelationTypeEnum2["FundsSweep"] = "FUNDS_SWEEP";
    })(WalletTransactionRelationTypeEnum = exports.WalletTransactionRelationTypeEnum || (exports.WalletTransactionRelationTypeEnum = {}));
    var WalletTransactionStatus;
    (function(WalletTransactionStatus2) {
      WalletTransactionStatus2["Authorising"] = "AUTHORISING";
      WalletTransactionStatus2["Initiated"] = "INITIATED";
      WalletTransactionStatus2["Executed"] = "EXECUTED";
      WalletTransactionStatus2["Settled"] = "SETTLED";
      WalletTransactionStatus2["Blocked"] = "BLOCKED";
      WalletTransactionStatus2["Failed"] = "FAILED";
    })(WalletTransactionStatus = exports.WalletTransactionStatus || (exports.WalletTransactionStatus = {}));
    var WarningWarningCodeEnum;
    (function(WarningWarningCodeEnum2) {
      WarningWarningCodeEnum2["OwnersUnavailable"] = "OWNERS_UNAVAILABLE";
      WarningWarningCodeEnum2["InvestmentsUnavailable"] = "INVESTMENTS_UNAVAILABLE";
      WarningWarningCodeEnum2["TransactionsUnavailable"] = "TRANSACTIONS_UNAVAILABLE";
    })(WarningWarningCodeEnum = exports.WarningWarningCodeEnum || (exports.WarningWarningCodeEnum = {}));
    var WatchlistScreeningDocumentType;
    (function(WatchlistScreeningDocumentType2) {
      WatchlistScreeningDocumentType2["BirthCertificate"] = "birth_certificate";
      WatchlistScreeningDocumentType2["DriversLicense"] = "drivers_license";
      WatchlistScreeningDocumentType2["ImmigrationNumber"] = "immigration_number";
      WatchlistScreeningDocumentType2["MilitaryId"] = "military_id";
      WatchlistScreeningDocumentType2["Other"] = "other";
      WatchlistScreeningDocumentType2["Passport"] = "passport";
      WatchlistScreeningDocumentType2["PersonalIdentification"] = "personal_identification";
      WatchlistScreeningDocumentType2["RationCard"] = "ration_card";
      WatchlistScreeningDocumentType2["Ssn"] = "ssn";
      WatchlistScreeningDocumentType2["StudentId"] = "student_id";
      WatchlistScreeningDocumentType2["TaxId"] = "tax_id";
      WatchlistScreeningDocumentType2["TravelDocument"] = "travel_document";
      WatchlistScreeningDocumentType2["VoterId"] = "voter_id";
    })(WatchlistScreeningDocumentType = exports.WatchlistScreeningDocumentType || (exports.WatchlistScreeningDocumentType = {}));
    var WatchlistScreeningEntityUpdateRequestResettableField;
    (function(WatchlistScreeningEntityUpdateRequestResettableField2) {
      WatchlistScreeningEntityUpdateRequestResettableField2["Assignee"] = "assignee";
    })(WatchlistScreeningEntityUpdateRequestResettableField = exports.WatchlistScreeningEntityUpdateRequestResettableField || (exports.WatchlistScreeningEntityUpdateRequestResettableField = {}));
    var WatchlistScreeningHitStatus;
    (function(WatchlistScreeningHitStatus2) {
      WatchlistScreeningHitStatus2["Confirmed"] = "confirmed";
      WatchlistScreeningHitStatus2["PendingReview"] = "pending_review";
      WatchlistScreeningHitStatus2["Dismissed"] = "dismissed";
    })(WatchlistScreeningHitStatus = exports.WatchlistScreeningHitStatus || (exports.WatchlistScreeningHitStatus = {}));
    var WatchlistScreeningIndividualUpdateRequestResettableField;
    (function(WatchlistScreeningIndividualUpdateRequestResettableField2) {
      WatchlistScreeningIndividualUpdateRequestResettableField2["Assignee"] = "assignee";
    })(WatchlistScreeningIndividualUpdateRequestResettableField = exports.WatchlistScreeningIndividualUpdateRequestResettableField || (exports.WatchlistScreeningIndividualUpdateRequestResettableField = {}));
    var WatchlistScreeningStatus;
    (function(WatchlistScreeningStatus2) {
      WatchlistScreeningStatus2["Rejected"] = "rejected";
      WatchlistScreeningStatus2["PendingReview"] = "pending_review";
      WatchlistScreeningStatus2["Cleared"] = "cleared";
    })(WatchlistScreeningStatus = exports.WatchlistScreeningStatus || (exports.WatchlistScreeningStatus = {}));
    var WeakAliasDetermination;
    (function(WeakAliasDetermination2) {
      WeakAliasDetermination2["None"] = "none";
      WeakAliasDetermination2["Source"] = "source";
      WeakAliasDetermination2["Plaid"] = "plaid";
    })(WeakAliasDetermination = exports.WeakAliasDetermination || (exports.WeakAliasDetermination = {}));
    var WebhookEnvironmentValues;
    (function(WebhookEnvironmentValues2) {
      WebhookEnvironmentValues2["Sandbox"] = "sandbox";
      WebhookEnvironmentValues2["Production"] = "production";
    })(WebhookEnvironmentValues = exports.WebhookEnvironmentValues || (exports.WebhookEnvironmentValues = {}));
    var WebhookType;
    (function(WebhookType2) {
      WebhookType2["Auth"] = "AUTH";
      WebhookType2["Holdings"] = "HOLDINGS";
      WebhookType2["InvestmentsTransactions"] = "INVESTMENTS_TRANSACTIONS";
      WebhookType2["Item"] = "ITEM";
      WebhookType2["Liabilities"] = "LIABILITIES";
      WebhookType2["Transactions"] = "TRANSACTIONS";
      WebhookType2["Assets"] = "ASSETS";
    })(WebhookType = exports.WebhookType || (exports.WebhookType = {}));
    var YieldRateType;
    (function(YieldRateType2) {
      YieldRateType2["Coupon"] = "coupon";
      YieldRateType2["CouponEquivalent"] = "coupon_equivalent";
      YieldRateType2["Discount"] = "discount";
      YieldRateType2["Yield"] = "yield";
      YieldRateType2["Null"] = "null";
    })(YieldRateType = exports.YieldRateType || (exports.YieldRateType = {}));
    var PlaidApiAxiosParamCreator = function(configuration2) {
      return {
        /**
         * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints, such as `/accounts/get`, return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link. As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.
         * @summary Retrieve real-time balance data
         * @param {AccountsBalanceGetRequest} accountsBalanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsBalanceGet: (accountsBalanceGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("accountsBalanceGet", "accountsBalanceGetRequest", accountsBalanceGetRequest);
          const localVarPath = `/accounts/balance/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(accountsBalanceGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance. To return new accounts that were created after the user linked their Item, you can listen for the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link\'s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  `/accounts/get` is free to use and retrieves cached information, rather than extracting fresh information from the institution. The balance returned will reflect the balance at the time of the last successful Item update. If the Item is enabled for a regularly updating product, such as Transactions, Investments, or Liabilities, the balance will typically update about once a day, as long as the Item is healthy. If the Item is enabled only for products that do not frequently update, such as Auth or Identity, balance data may be much older.  For realtime balance information, use the paid endpoint `/accounts/balance/get` instead.
         * @summary Retrieve accounts
         * @param {AccountsGetRequest} accountsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsGet: (accountsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("accountsGet", "accountsGetRequest", accountsGetRequest);
          const localVarPath = `/accounts/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(accountsGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
         * @summary Retrieve information about a Plaid application
         * @param {ApplicationGetRequest} applicationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationGet: (applicationGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("applicationGet", "applicationGetRequest", applicationGetRequest);
          const localVarPath = `/application/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(applicationGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
         * @summary Create Asset Report Audit Copy
         * @param {AssetReportAuditCopyCreateRequest} assetReportAuditCopyCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyCreate: (assetReportAuditCopyCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("assetReportAuditCopyCreate", "assetReportAuditCopyCreateRequest", assetReportAuditCopyCreateRequest);
          const localVarPath = `/asset_report/audit_copy/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportAuditCopyCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.
         * @summary Retrieve an Asset Report Audit Copy
         * @param {AssetReportAuditCopyGetRequest} assetReportAuditCopyGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyGet: (assetReportAuditCopyGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("assetReportAuditCopyGet", "assetReportAuditCopyGetRequest", assetReportAuditCopyGetRequest);
          const localVarPath = `/asset_report/audit_copy/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportAuditCopyGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
         * @summary Remove Asset Report Audit Copy
         * @param {AssetReportAuditCopyRemoveRequest} assetReportAuditCopyRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyRemove: (assetReportAuditCopyRemoveRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("assetReportAuditCopyRemove", "assetReportAuditCopyRemoveRequest", assetReportAuditCopyRemoveRequest);
          const localVarPath = `/asset_report/audit_copy/remove`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportAuditCopyRemoveRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. The exact amount of time to create the report will vary depending on how many days of history are requested and will typically range from a few seconds to about one minute. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.
         * @summary Create an Asset Report
         * @param {AssetReportCreateRequest} assetReportCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportCreate: (assetReportCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("assetReportCreate", "assetReportCreateRequest", assetReportCreateRequest);
          const localVarPath = `/asset_report/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report\'s data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
         * @summary Filter Asset Report
         * @param {AssetReportFilterRequest} assetReportFilterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportFilter: (assetReportFilterRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("assetReportFilter", "assetReportFilterRequest", assetReportFilterRequest);
          const localVarPath = `/asset_report/filter`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportFilterRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report. To retrieve an Asset Report with Insights, call `/asset_report/get` endpoint with `include_insights` set to `true`.  For latency-sensitive applications, you can optionally call `/asset_report/create` with `options.add_ons` set to `[\"fast_assets\"]`. This will cause Plaid to create two versions of the Asset Report: one with only current and available balance and identity information, and then later on the complete Asset Report. You will receive separate webhooks for each version of the Asset Report.
         * @summary Retrieve an Asset Report
         * @param {AssetReportGetRequest} assetReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportGet: (assetReportGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("assetReportGet", "assetReportGetRequest", assetReportGetRequest);
          const localVarPath = `/asset_report/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
         * @summary Retrieve a PDF Asset Report
         * @param {AssetReportPDFGetRequest} assetReportPDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportPdfGet: (assetReportPDFGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("assetReportPdfGet", "assetReportPDFGetRequest", assetReportPDFGetRequest);
          const localVarPath = `/asset_report/pdf/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportPDFGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * An Asset Report is an immutable snapshot of a user\'s assets. In order to \"refresh\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\"\") for any previously-populated fields you would like set as empty.
         * @summary Refresh an Asset Report
         * @param {AssetReportRefreshRequest} assetReportRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRefresh: (assetReportRefreshRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("assetReportRefresh", "assetReportRefreshRequest", assetReportRefreshRequest);
          const localVarPath = `/asset_report/refresh`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportRefreshRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove access to an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.
         * @summary Delete an Asset Report
         * @param {AssetReportRemoveRequest} assetReportRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRemove: (assetReportRemoveRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("assetReportRemove", "assetReportRemoveRequest", assetReportRemoveRequest);
          const localVarPath = `/asset_report/remove`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(assetReportRemoveRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item\'s checking, savings, and cash management accounts, along with high-level account data and balances when available.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
         * @summary Retrieve auth data
         * @param {AuthGetRequest} authGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGet: (authGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("authGet", "authGetRequest", authGetRequest);
          const localVarPath = `/auth/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(authGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
         * @summary Get balance of your Bank Transfer account
         * @param {BankTransferBalanceGetRequest} bankTransferBalanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferBalanceGet: (bankTransferBalanceGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("bankTransferBalanceGet", "bankTransferBalanceGetRequest", bankTransferBalanceGetRequest);
          const localVarPath = `/bank_transfer/balance/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferBalanceGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.
         * @summary Cancel a bank transfer
         * @param {BankTransferCancelRequest} bankTransferCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferCancel: (bankTransferCancelRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("bankTransferCancel", "bankTransferCancelRequest", bankTransferCancelRequest);
          const localVarPath = `/bank_transfer/cancel`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferCancelRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.
         * @summary Create a bank transfer
         * @param {BankTransferCreateRequest} bankTransferCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferCreate: (bankTransferCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("bankTransferCreate", "bankTransferCreateRequest", bankTransferCreateRequest);
          const localVarPath = `/bank_transfer/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/bank_transfer/event/list` endpoint to get a list of Plaid-initiated ACH or bank transfer events based on specified filter criteria. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://plaid.com/docs/auth/coverage/microdeposit-events/).
         * @summary List bank transfer events
         * @param {BankTransferEventListRequest} bankTransferEventListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferEventList: (bankTransferEventListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("bankTransferEventList", "bankTransferEventListRequest", bankTransferEventListRequest);
          const localVarPath = `/bank_transfer/event/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferEventListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/bank_transfer/event/sync` allows you to request up to the next 25 Plaid-initiated bank transfer events that happened after a specific `event_id`. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://www.plaid.com/docs/auth/coverage/microdeposit-events/).
         * @summary Sync bank transfer events
         * @param {BankTransferEventSyncRequest} bankTransferEventSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferEventSync: (bankTransferEventSyncRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("bankTransferEventSync", "bankTransferEventSyncRequest", bankTransferEventSyncRequest);
          const localVarPath = `/bank_transfer/event/sync`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferEventSyncRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.
         * @summary Retrieve a bank transfer
         * @param {BankTransferGetRequest} bankTransferGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferGet: (bankTransferGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("bankTransferGet", "bankTransferGetRequest", bankTransferGetRequest);
          const localVarPath = `/bank_transfer/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers.
         * @summary List bank transfers
         * @param {BankTransferListRequest} bankTransferListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferList: (bankTransferListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("bankTransferList", "bankTransferListRequest", bankTransferListRequest);
          const localVarPath = `/bank_transfer/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
         * @summary Migrate account into Bank Transfers
         * @param {BankTransferMigrateAccountRequest} bankTransferMigrateAccountRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferMigrateAccount: (bankTransferMigrateAccountRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("bankTransferMigrateAccount", "bankTransferMigrateAccountRequest", bankTransferMigrateAccountRequest);
          const localVarPath = `/bank_transfer/migrate_account`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferMigrateAccountRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.
         * @summary Retrieve a sweep
         * @param {BankTransferSweepGetRequest} bankTransferSweepGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferSweepGet: (bankTransferSweepGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("bankTransferSweepGet", "bankTransferSweepGetRequest", bankTransferSweepGetRequest);
          const localVarPath = `/bank_transfer/sweep/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferSweepGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.
         * @summary List sweeps
         * @param {BankTransferSweepListRequest} bankTransferSweepListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferSweepList: (bankTransferSweepListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("bankTransferSweepList", "bankTransferSweepListRequest", bankTransferSweepListRequest);
          const localVarPath = `/bank_transfer/sweep/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(bankTransferSweepListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use `/beacon/account_risk/v1/evaluate` to get risk insights for a linked account.
         * @summary Evaluate risk of a bank account
         * @param {BeaconAccountRiskEvaluateRequest} beaconAccountRiskEvaluateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconAccountRiskEvaluate: (beaconAccountRiskEvaluateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("beaconAccountRiskEvaluate", "beaconAccountRiskEvaluateRequest", beaconAccountRiskEvaluateRequest);
          const localVarPath = `/beacon/account_risk/v1/evaluate`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(beaconAccountRiskEvaluateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Returns a Beacon Duplicate for a given Beacon Duplicate id.  A Beacon Duplicate represents a pair of similar Beacon Users within your organization.  Two Beacon User revisions are returned for each Duplicate record in either the `beacon_user1` or `beacon_user2` response fields.  The `analysis` field in the response indicates which fields matched between `beacon_user1` and `beacon_user2`.
         * @summary Get a Beacon Duplicate
         * @param {BeaconDuplicateGetRequest} beaconDuplicateGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconDuplicateGet: (beaconDuplicateGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("beaconDuplicateGet", "beaconDuplicateGetRequest", beaconDuplicateGetRequest);
          const localVarPath = `/beacon/duplicate/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(beaconDuplicateGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Create a fraud report for a given Beacon User.
         * @summary Create a Beacon Report
         * @param {BeaconReportCreateRequest} beaconReportCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconReportCreate: (beaconReportCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("beaconReportCreate", "beaconReportCreateRequest", beaconReportCreateRequest);
          const localVarPath = `/beacon/report/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(beaconReportCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Returns a Beacon report for a given Beacon report id.
         * @summary Get a Beacon Report
         * @param {BeaconReportGetRequest} beaconReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconReportGet: (beaconReportGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("beaconReportGet", "beaconReportGetRequest", beaconReportGetRequest);
          const localVarPath = `/beacon/report/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(beaconReportGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/beacon/report/list` endpoint to view all Beacon Reports you created for a specific Beacon User. The reports returned by this endpoint are exclusively reports you created for a specific user. A Beacon User can only have one active report at a time, but a new report can be created if a previous report has been deleted. The results from this endpoint are paginated; the `next_cursor` field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the `next_cursor` value as the `cursor` parameter in the next request.
         * @summary List Beacon Reports for a Beacon User
         * @param {BeaconReportListRequest} beaconReportListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconReportList: (beaconReportListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("beaconReportList", "beaconReportListRequest", beaconReportListRequest);
          const localVarPath = `/beacon/report/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(beaconReportListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Returns a Beacon Report Syndication for a given Beacon Report Syndication id.
         * @summary Get a Beacon Report Syndication
         * @param {BeaconReportSyndicationGetRequest} beaconReportSyndicationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconReportSyndicationGet: (beaconReportSyndicationGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("beaconReportSyndicationGet", "beaconReportSyndicationGetRequest", beaconReportSyndicationGetRequest);
          const localVarPath = `/beacon/report_syndication/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(beaconReportSyndicationGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/beacon/report_syndication/list` endpoint to view all Beacon Reports that have been syndicated to a specific Beacon User. This endpoint returns Beacon Report Syndications which are references to Beacon Reports created either by you, or another Beacon customer, that matched the specified Beacon User. A Beacon User can have multiple active Beacon Report Syndications at once. The results from this endpoint are paginated; the `next_cursor` field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the `next_cursor` value as the `cursor` parameter in the next request.
         * @summary List Beacon Report Syndications for a Beacon User
         * @param {BeaconReportSyndicationListRequest} beaconReportSyndicationListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconReportSyndicationList: (beaconReportSyndicationListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("beaconReportSyndicationList", "beaconReportSyndicationListRequest", beaconReportSyndicationListRequest);
          const localVarPath = `/beacon/report_syndication/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(beaconReportSyndicationListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Get Account Insights for all Accounts linked to this Beacon User. The insights for each account are computed based on the information that was last retrieved from the financial institution.
         * @summary Get Account Insights for a Beacon User
         * @param {BeaconUserAccountInsightsGetRequest} beaconUserAccountInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserAccountInsightsGet: (beaconUserAccountInsightsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("beaconUserAccountInsightsGet", "beaconUserAccountInsightsGetRequest", beaconUserAccountInsightsGetRequest);
          const localVarPath = `/beacon/user/account_insights/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(beaconUserAccountInsightsGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Create and scan a Beacon User against your Beacon Program, according to your program\'s settings.  When you submit a new user to `/beacon/user/create`, several checks are performed immediately:    - The user\'s PII (provided within the `user` object) is searched against all other users within the Beacon Program you specified. If a match is found that violates your program\'s \"Duplicate Information Filtering\" settings, the user will be returned with a status of `pending_review`.    - The user\'s PII is also searched against all fraud reports created by your organization across all of your Beacon Programs. If the user\'s data matches a fraud report that your team created, the user will be returned with a status of `rejected`.    - Finally, the user\'s PII is searched against all fraud report shared with the Beacon Network by other companies. If a matching fraud report is found, the user will be returned with a `pending_review` status if your program has enabled automatic flagging based on network fraud.
         * @summary Create a Beacon User
         * @param {BeaconUserCreateRequest} beaconUserCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserCreate: (beaconUserCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("beaconUserCreate", "beaconUserCreateRequest", beaconUserCreateRequest);
          const localVarPath = `/beacon/user/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(beaconUserCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Fetch a Beacon User.  The Beacon User is returned with all of their associated information and a `status` based on the Beacon Network duplicate record and fraud checks.
         * @summary Get a Beacon User
         * @param {BeaconUserGetRequest} beaconUserGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserGet: (beaconUserGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("beaconUserGet", "beaconUserGetRequest", beaconUserGetRequest);
          const localVarPath = `/beacon/user/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(beaconUserGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * List all changes to the Beacon User in reverse-chronological order.
         * @summary List a Beacon User\'s history
         * @param {BeaconUserHistoryListRequest} beaconUserHistoryListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserHistoryList: (beaconUserHistoryListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("beaconUserHistoryList", "beaconUserHistoryListRequest", beaconUserHistoryListRequest);
          const localVarPath = `/beacon/user/history/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(beaconUserHistoryListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Update the status of a Beacon User.  When updating a Beacon User\'s status via this endpoint, Plaid validates that the status change is consistent with the related state for this Beacon User. Specifically, we will check:  1. Whether there are any associated Beacon Reports connected to the Beacon User, and 2. Whether there are any confirmed Beacon Report Syndications connected to the Beacon User.  When updating a Beacon User\'s status to \"rejected\", we enforce that either a Beacon Report has been created for the Beacon User or a Beacon Report Syndication has been confirmed. When updating a Beacon User\'s status to \"cleared\", we enforce that there are no active Beacon Reports or confirmed Beacon Report Syndications associated with the user. If you previously created a Beacon Report for this user, you must delete it before updating the Beacon User\'s status to \"cleared\". There are no restrictions on updating a Beacon User\'s status to \"pending_review\".  If these conditions are not met, the request will be rejected with an error explaining the issue.
         * @summary Review a Beacon User
         * @param {BeaconUserReviewRequest} beaconUserReviewRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserReview: (beaconUserReviewRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("beaconUserReview", "beaconUserReviewRequest", beaconUserReviewRequest);
          const localVarPath = `/beacon/user/review`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(beaconUserReviewRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Update the identity data for a Beacon User in your Beacon Program or add new accounts to the Beacon User.  Similar to `/beacon/user/create`, several checks are performed immediately when you submit an identity data change to `/beacon/user/update`:    - The user\'s updated PII is searched against all other users within the Beacon Program you specified. If a match is found that violates your program\'s \"Duplicate Information Filtering\" settings, the user will be returned with a status of `pending_review`.    - The user\'s updated PII is also searched against all fraud reports created by your organization across all of your Beacon Programs. If the user\'s data matches a fraud report that your team created, the user will be returned with a status of `rejected`.    - Finally, the user\'s PII is searched against all fraud report shared with the Beacon Network by other companies. If a matching fraud report is found, the user will be returned with a `pending_review` status if your program has enabled automatic flagging based on network fraud.  Plaid maintains a version history for each Beacon User, so the Beacon User\'s identity data before and after the update is retained as separate versions.
         * @summary Update the identity data of a Beacon User
         * @param {BeaconUserUpdateRequest} beaconUserUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserUpdate: (beaconUserUpdateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("beaconUserUpdate", "beaconUserUpdateRequest", beaconUserUpdateRequest);
          const localVarPath = `/beacon/user/update`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(beaconUserUpdateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/cashflow_report/get` endpoint retrieves transactions data associated with an item. Transactions data is standardized across financial institutions.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift. Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions). Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `cursor` parameters in conjunction with the `has_more` response body field to fetch all available transactions. Note that data isn\'t likely to be immediately available to `/cashflow_report/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with cashflow_report, or if it wasn\'t, upon the first call to /cashflow_report/refresh. To be alerted when transaction data is ready to be fetched, listen for the `CASHFLOW_REPORT_READY` webhook.
         * @summary Gets transaction data in cashflow_report
         * @param {CashflowReportGetRequest} cashflowReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cashflowReportGet: (cashflowReportGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("cashflowReportGet", "cashflowReportGetRequest", cashflowReportGetRequest);
          const localVarPath = `/cashflow_report/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(cashflowReportGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/cashflow_report/refresh` is an endpoint that initiates an on-demand extraction to fetch the newest transactions for an item (given an `item_id`). The item must already have Cashflow Report added as a product in order to call `/cashflow_report/refresh`.  After calling `/cashflow_report/refresh`, Plaid will fire a webhook `CASHFLOW_REPORT_READY` alerting clients that new transactions data can then be ingested via `/cashflow_report/get` or the webhook will contain an error code informing there was an error in refreshing transactions data.   Note that the `/cashflow_report/refresh` endpoint is not supported for Capital One (`ins_128026`) non-depository accounts and will result in a `PRODUCTS_NOT_SUPPORTED` error if called on an Item that contains only non-depository accounts from that institution.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but up to 30 seconds or more). If you encounter errors, you may find it necessary to adjust your timeout period for requests.
         * @summary Refresh transaction data in cashflow_report
         * @param {CashflowReportRefreshRequest} cashflowReportRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cashflowReportRefresh: (cashflowReportRefreshRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("cashflowReportRefresh", "cashflowReportRefreshRequest", cashflowReportRefreshRequest);
          const localVarPath = `/cashflow_report/refresh`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(cashflowReportRefreshRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.  All implementations are recommended to use the newer `personal_finance_category` taxonomy instead of the older `category` taxonomy supported by this endpoint. The [`personal_finance_category taxonomy` CSV file](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) is available for download and is not accessible via API.
         * @summary Get categories
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesGet: (body, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("categoriesGet", "body", body);
          const localVarPath = `/categories/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(body, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * List a historical log of Item consent events. Consent logs are only available for events occurring on or after November 7, 2024. Up to three years of consent logs will be available via the endpoint.
         * @summary List a historical log of item consent events
         * @param {ConsentEventsGetRequest} consentEventsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consentEventsGet: (consentEventsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("consentEventsGet", "consentEventsGetRequest", consentEventsGetRequest);
          const localVarPath = `/consent/events/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(consentEventsGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Retrieves all existing CRB Bank Income and Base reports for the consumer in PDF format.  Response is PDF binary data. The `request_id` is returned in the `Plaid-Request-ID` header.
         * @summary Retrieve a PDF Reports
         * @param {ConsumerReportPDFGetRequest} consumerReportPDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consumerReportPdfGet: (consumerReportPDFGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("consumerReportPdfGet", "consumerReportPDFGetRequest", consumerReportPDFGetRequest);
          const localVarPath = `/consumer_report/pdf/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(consumerReportPDFGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/cra/bank_income/create` creates a CRA report for income verification
         * @summary Create a CRA report for income verification
         * @param {CraBankIncomeCreateRequest} craBankIncomeCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craBankIncomeCreate: (craBankIncomeCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craBankIncomeCreate", "craBankIncomeCreateRequest", craBankIncomeCreateRequest);
          const localVarPath = `/cra/bank_income/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craBankIncomeCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/cra/bank_income/get` returns the bank income report(s) for a specified user.
         * @summary Retrieve information from the bank accounts used for income verification
         * @param {CraBankIncomeGetRequest} craBankIncomeGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craBankIncomeGet: (craBankIncomeGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craBankIncomeGet", "craBankIncomeGetRequest", craBankIncomeGetRequest);
          const localVarPath = `/cra/bank_income/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craBankIncomeGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint allows you to retrieve the Base Report for your user, allowing you to receive comprehensive bank account and cash flow data. You should call this endpoint after you\'ve received a `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn\'t have sufficient data to generate the base report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.
         * @summary Retrieve a Base Report
         * @param {CraCheckReportBaseReportGetRequest} craCheckReportBaseReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportBaseReportGet: (craCheckReportBaseReportGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craCheckReportBaseReportGet", "craCheckReportBaseReportGetRequest", craCheckReportBaseReportGetRequest);
          const localVarPath = `/cra/check_report/base_report/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craCheckReportBaseReportGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint allows you to retrieve the Cashflow Insights report for your user. You should call this endpoint after you\'ve received the `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn’t have sufficient data to generate the insights, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.  If you did not initialize Link with the `cra_cashflow_insights` product or have generated a report using `/cra/check_report/create`, we will generate the insights when you call this endpoint. In this case, you may optionally provide parameters under `options` to configure which insights you want to receive.
         * @summary Retrieve cash flow insights from your user\'s banking data
         * @param {CraCheckReportCashflowInsightsGetRequest} craCheckReportCashflowInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportCashflowInsightsGet: (craCheckReportCashflowInsightsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craCheckReportCashflowInsightsGet", "craCheckReportCashflowInsightsGetRequest", craCheckReportCashflowInsightsGetRequest);
          const localVarPath = `/cra/check_report/cashflow_insights/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craCheckReportCashflowInsightsGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/cra/check_report/create` creates a Consumer Report powered by Plaid Check. You can call this endpoint to create a new report if `consumer_report_permissible_purpose` was omitted during Link token creation. If you did provide a `consumer_report_permissible_purpose` during Link token creation, then Plaid Check will automatically begin creating a Consumer Report once the user completes the Link process, and it is not necessary to call `/cra/check_report/create` before retrieving the report.   `/cra/check_report/create` can also be used to refresh data in an existing report. A Consumer Report will last for 24 hours before expiring; you should call any `/get` endpoints on the report before it expires. If a report expires, you can call `/cra/check_report/create` again to re-generate it. Note that refreshing or regenerating a report is a billable event.
         * @summary Create a Consumer Report
         * @param {CraCheckReportCreateRequest} craCheckReportCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportCreate: (craCheckReportCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craCheckReportCreate", "craCheckReportCreateRequest", craCheckReportCreateRequest);
          const localVarPath = `/cra/check_report/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craCheckReportCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint allows you to retrieve the Income Insights report for your user.  You should call this endpoint after you\'ve received a `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn’t have sufficient data to generate the base report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.
         * @summary Retrieve cash flow information from your user\'s banks
         * @param {CraCheckReportIncomeInsightsGetRequest} craCheckReportIncomeInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportIncomeInsightsGet: (craCheckReportIncomeInsightsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craCheckReportIncomeInsightsGet", "craCheckReportIncomeInsightsGetRequest", craCheckReportIncomeInsightsGetRequest);
          const localVarPath = `/cra/check_report/income_insights/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craCheckReportIncomeInsightsGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint allows you to retrieve the Network Insights product for your user. You should call this endpoint after you\'ve received the `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn’t have sufficient data to generate the report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.  If you did not initialize Link with the `cra_network_attributes` product or have generated a report using `/cra/check_report/create`, we will generate the attributes when you call this endpoint.
         * @summary Retrieve network attributes for the user
         * @param {CraCheckReportNetworkInsightsGetRequest} craCheckReportNetworkInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportNetworkInsightsGet: (craCheckReportNetworkInsightsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craCheckReportNetworkInsightsGet", "craCheckReportNetworkInsightsGetRequest", craCheckReportNetworkInsightsGetRequest);
          const localVarPath = `/cra/check_report/network_insights/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craCheckReportNetworkInsightsGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint allows you to retrieve the Partner Insights report for your user. You should call this endpoint after you\'ve received the `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn’t have sufficient data to generate the base report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.  If you did not initialize Link with the `credit_partner_insights` product or have generated a report using `/cra/check_report/create`, we will call our partners to generate the insights when you call this endpoint. In this case, you may optionally provide parameters under `options` to configure which insights you want to receive.
         * @summary Retrieve cash flow insights from partners
         * @param {CraCheckReportPartnerInsightsGetRequest} craCheckReportPartnerInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportPartnerInsightsGet: (craCheckReportPartnerInsightsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craCheckReportPartnerInsightsGet", "craCheckReportPartnerInsightsGetRequest", craCheckReportPartnerInsightsGetRequest);
          const localVarPath = `/cra/check_report/partner_insights/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craCheckReportPartnerInsightsGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/cra/check_report/pdf/get` retrieves the most recent Consumer Report in PDF format. By default, the most recent Base Report (if it exists) for the user will be returned. To request that the most recent Income Insights report be included in the PDF as well, use the `add-ons` field.
         * @summary Retrieve Consumer Reports as a PDF
         * @param {CraCheckReportPDFGetRequest} craCheckReportPDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportPdfGet: (craCheckReportPDFGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craCheckReportPdfGet", "craCheckReportPDFGetRequest", craCheckReportPDFGetRequest);
          const localVarPath = `/cra/check_report/pdf/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craCheckReportPDFGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/cra/loans/applications/register` registers loan applications and decisions.
         * @summary Register loan applications and decisions.
         * @param {CraLoansApplicationsRegisterRequest} craLoansApplicationsRegisterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craLoansApplicationsRegister: (craLoansApplicationsRegisterRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craLoansApplicationsRegister", "craLoansApplicationsRegisterRequest", craLoansApplicationsRegisterRequest);
          const localVarPath = `/cra/loans/applications/register`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craLoansApplicationsRegisterRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/cra/loans/register` registers a list of loans to their applicants.
         * @summary Register a list of loans to their applicants.
         * @param {CRALoansRegisterRequest} cRALoansRegisterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craLoansRegister: (cRALoansRegisterRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craLoansRegister", "cRALoansRegisterRequest", cRALoansRegisterRequest);
          const localVarPath = `/cra/loans/register`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(cRALoansRegisterRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/cra/loans/unregister` indicates the loans have reached a final status and no further updates are expected.
         * @summary Unregister a list of loans.
         * @param {CraLoansUnregisterRequest} craLoansUnregisterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craLoansUnregister: (craLoansUnregisterRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craLoansUnregister", "craLoansUnregisterRequest", craLoansUnregisterRequest);
          const localVarPath = `/cra/loans/unregister`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craLoansUnregisterRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/cra/loans/update` updates loan information such as the status and payment history.
         * @summary Updates loan data.
         * @param {CraLoansUpdateRequest} craLoansUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craLoansUpdate: (craLoansUpdateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craLoansUpdate", "craLoansUpdateRequest", craLoansUpdateRequest);
          const localVarPath = `/cra/loans/update`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craLoansUpdateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint allows you to retrieve a Monitoring Insights report by passing in the `user_token` referred to in the webhook you received.
         * @summary Retrieve a Monitoring Insights Report
         * @param {CraMonitoringInsightsGetRequest} craMonitoringInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craMonitoringInsightsGet: (craMonitoringInsightsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craMonitoringInsightsGet", "craMonitoringInsightsGetRequest", craMonitoringInsightsGetRequest);
          const localVarPath = `/cra/monitoring_insights/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craMonitoringInsightsGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint allows you to subscribe to insights for a user\'s linked CRA items, which are updated every day (best-effort).
         * @summary Subscribe to Monitoring Insights
         * @param {CraMonitoringInsightsSubscribeRequest} craMonitoringInsightsSubscribeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craMonitoringInsightsSubscribe: (craMonitoringInsightsSubscribeRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craMonitoringInsightsSubscribe", "craMonitoringInsightsSubscribeRequest", craMonitoringInsightsSubscribeRequest);
          const localVarPath = `/cra/monitoring_insights/subscribe`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craMonitoringInsightsSubscribeRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint allows you to unsubscribe from previously subscribed Monitoring Insights.
         * @summary Unsubscribe from Monitoring Insights
         * @param {CraMonitoringInsightsUnsubscribeRequest} craMonitoringInsightsUnsubscribeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craMonitoringInsightsUnsubscribe: (craMonitoringInsightsUnsubscribeRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craMonitoringInsightsUnsubscribe", "craMonitoringInsightsUnsubscribeRequest", craMonitoringInsightsUnsubscribeRequest);
          const localVarPath = `/cra/monitoring_insights/unsubscribe`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craMonitoringInsightsUnsubscribeRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/cra/partner_insights/get` returns cash flow insights for a specified user.
         * @summary Retrieve cash flow insights from the bank accounts used for income verification
         * @param {CraPartnerInsightsGetRequest} craPartnerInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craPartnerInsightsGet: (craPartnerInsightsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("craPartnerInsightsGet", "craPartnerInsightsGetRequest", craPartnerInsightsGetRequest);
          const localVarPath = `/cra/partner_insights/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(craPartnerInsightsGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
         * @summary Create payment token
         * @param {PaymentInitiationPaymentTokenCreateRequest} paymentInitiationPaymentTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPaymentToken: (paymentInitiationPaymentTokenCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("createPaymentToken", "paymentInitiationPaymentTokenCreateRequest", paymentInitiationPaymentTokenCreateRequest);
          const localVarPath = `/payment_initiation/payment/token/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationPaymentTokenCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Asset Report in Freddie Mac\'s JSON format.
         * @summary Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint.
         * @param {{ [key: string]: object; }} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditAssetReportFreddieMacGet: (requestBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditAssetReportFreddieMacGet", "requestBody", requestBody);
          const localVarPath = `/credit/asset_report/freddie_mac/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Plaid can create an Audit Copy token of an Asset Report and/or Income Report to share with participating Government Sponsored Entity (GSE). If you participate in the Day 1 Certainty™ program, Plaid can supply an Audit Copy token directly to Fannie Mae on your behalf. An Audit Copy token contains the same underlying data as the Asset Report and/or Income Report (result of /credit/payroll_income/get).  Use the `/credit/audit_copy_token/create` endpoint to create an `audit_copy_token` and then pass that token to the GSE who needs access.
         * @summary Create Asset or Income Report Audit Copy Token
         * @param {CreditAuditCopyTokenCreateRequest} creditAuditCopyTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditAuditCopyTokenCreate: (creditAuditCopyTokenCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditAuditCopyTokenCreate", "creditAuditCopyTokenCreateRequest", creditAuditCopyTokenCreateRequest);
          const localVarPath = `/credit/audit_copy_token/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditAuditCopyTokenCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/credit/audit_copy_token/update` endpoint updates an existing  Audit Copy Token by adding the report tokens in the `report_tokens` field to the `audit_copy_token`. If the Audit Copy Token already contains a report of a certain type, it will be replaced with the token provided in the `report_tokens` field.
         * @summary Update an Audit Copy Token
         * @param {CreditAuditCopyTokenUpdateRequest} creditAuditCopyTokenUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditAuditCopyTokenUpdate: (creditAuditCopyTokenUpdateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditAuditCopyTokenUpdate", "creditAuditCopyTokenUpdateRequest", creditAuditCopyTokenUpdateRequest);
          const localVarPath = `/credit/audit_copy_token/update`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditAuditCopyTokenUpdateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/credit/bank_employment/get` returns the employment report(s) derived from bank transaction data for a specified user.
         * @summary Retrieve information from the bank accounts used for employment verification
         * @param {CreditBankEmploymentGetRequest} creditBankEmploymentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankEmploymentGet: (creditBankEmploymentGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditBankEmploymentGet", "creditBankEmploymentGetRequest", creditBankEmploymentGetRequest);
          const localVarPath = `/beta/credit/v1/bank_employment/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditBankEmploymentGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/credit/bank_income/get` returns the bank income report(s) for a specified user. A single report corresponds to all institutions linked in a single Link session. To include multiple institutions in a single report, use [Multi-Item Link](https://plaid.com/docs/link/multi-item-link). To return older reports, use the `options.count` field.
         * @summary Retrieve information from the bank accounts used for income verification
         * @param {CreditBankIncomeGetRequest} creditBankIncomeGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomeGet: (creditBankIncomeGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditBankIncomeGet", "creditBankIncomeGetRequest", creditBankIncomeGetRequest);
          const localVarPath = `/credit/bank_income/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditBankIncomeGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/credit/bank_income/pdf/get` returns the most recent bank income report for a specified user in PDF format.  A single report corresponds to all institutions linked in a single Link session. To include multiple institutions in a single report, use [Multi-Item Link](https://plaid.com/docs/link/multi-item-link).
         * @summary Retrieve information from the bank accounts used for income verification in PDF format
         * @param {CreditBankIncomePDFGetRequest} creditBankIncomePDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomePdfGet: (creditBankIncomePDFGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditBankIncomePdfGet", "creditBankIncomePDFGetRequest", creditBankIncomePDFGetRequest);
          const localVarPath = `/credit/bank_income/pdf/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditBankIncomePDFGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/credit/bank_income/refresh` refreshes the most recent bank income report data for a specific user. If the most recent bank income report is no longer valid (i.e. deleted), the endpoint will refresh the most recent valid report instead.
         * @summary Refresh a user\'s bank income information
         * @param {CreditBankIncomeRefreshRequest} creditBankIncomeRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomeRefresh: (creditBankIncomeRefreshRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditBankIncomeRefresh", "creditBankIncomeRefreshRequest", creditBankIncomeRefreshRequest);
          const localVarPath = `/credit/bank_income/refresh`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditBankIncomeRefreshRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/credit/bank_income/webhook/update` allows you to subscribe or unsubscribe a user for income webhook notifications. By default, all users start out unsubscribed.  If a user is subscribed, on significant changes to the user\'s income profile, you will receive a `BANK_INCOME_REFRESH_UPDATE` webhook, prompting you to refresh bank income data for the user.
         * @summary Subscribe and unsubscribe to proactive notifications for a user\'s income profile
         * @param {CreditBankIncomeWebhookUpdateRequest} creditBankIncomeWebhookUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomeWebhookUpdate: (creditBankIncomeWebhookUpdateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditBankIncomeWebhookUpdate", "creditBankIncomeWebhookUpdateRequest", creditBankIncomeWebhookUpdateRequest);
          const localVarPath = `/credit/bank_income/webhook/update`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditBankIncomeWebhookUpdateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/credit/bank_statements/uploads/get` returns parsed data from bank statements uploaded by users as part of the Document Income flow. If your account is not enabled for Document Parsing, contact your account manager to request access.
         * @summary Retrieve data for a user\'s uploaded bank statements
         * @param {CreditBankStatementsUploadsGetRequest} creditBankStatementsUploadsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankStatementsUploadsGet: (creditBankStatementsUploadsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditBankStatementsUploadsGet", "creditBankStatementsUploadsGetRequest", creditBankStatementsUploadsGetRequest);
          const localVarPath = `/credit/bank_statements/uploads/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditBankStatementsUploadsGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/credit/employment/get` returns a list of items with employment information from a user\'s payroll provider that was verified by an end user.
         * @summary Retrieve a summary of an individual\'s employment information
         * @param {CreditEmploymentGetRequest} creditEmploymentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditEmploymentGet: (creditEmploymentGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditEmploymentGet", "creditEmploymentGetRequest", creditEmploymentGetRequest);
          const localVarPath = `/credit/employment/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditEmploymentGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Verification of Assets and Verification of Employment reports.
         * @summary Retrieve an Asset Report with Freddie Mac format (aka VOA - Verification Of Assets), and a Verification Of Employment (VOE) report if this one is available. Only Freddie Mac can use this endpoint.
         * @param {CreditFreddieMacReportsGetRequest} creditFreddieMacReportsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditFreddieMacReportsGet: (creditFreddieMacReportsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditFreddieMacReportsGet", "creditFreddieMacReportsGetRequest", creditFreddieMacReportsGetRequest);
          const localVarPath = `/credit/freddie_mac/reports/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditFreddieMacReportsGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document.
         * @summary Retrieve a user\'s payroll information
         * @param {CreditPayrollIncomeGetRequest} creditPayrollIncomeGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeGet: (creditPayrollIncomeGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditPayrollIncomeGet", "creditPayrollIncomeGetRequest", creditPayrollIncomeGetRequest);
          const localVarPath = `/credit/payroll_income/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditPayrollIncomeGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/credit/payroll_income/parsing_config/update` updates the parsing configuration for a document income verification.
         * @summary Update the parsing configuration for a document income verification
         * @param {{ [key: string]: object; }} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeParsingConfigUpdate: (requestBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditPayrollIncomeParsingConfigUpdate", "requestBody", requestBody);
          const localVarPath = `/credit/payroll_income/parsing_config/update`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/credit/payroll_income/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing `employer` data will increase the chance of receiving a useful result.  When testing in Sandbox, you can control the results by providing special test values in the `employer` and `access_tokens` fields. `employer_good` and `employer_bad` will result in `HIGH` and `LOW` confidence values, respectively. `employer_multi` will result in a `HIGH` confidence with multiple payroll options. Likewise, `access_good` and `access_bad` will result in `HIGH` and `LOW` confidence values, respectively. Any other value for `employer` and `access_tokens` in Sandbox will result in `UNKNOWN` confidence.
         * @summary Check income verification eligibility and optimize conversion
         * @param {CreditPayrollIncomePrecheckRequest} creditPayrollIncomePrecheckRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomePrecheck: (creditPayrollIncomePrecheckRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditPayrollIncomePrecheck", "creditPayrollIncomePrecheckRequest", creditPayrollIncomePrecheckRequest);
          const localVarPath = `/credit/payroll_income/precheck`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditPayrollIncomePrecheckRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/credit/payroll_income/refresh` refreshes a given digital payroll income verification.
         * @summary Refresh a digital payroll income verification
         * @param {CreditPayrollIncomeRefreshRequest} creditPayrollIncomeRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeRefresh: (creditPayrollIncomeRefreshRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditPayrollIncomeRefresh", "creditPayrollIncomeRefreshRequest", creditPayrollIncomeRefreshRequest);
          const localVarPath = `/credit/payroll_income/refresh`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditPayrollIncomeRefreshRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/credit/payroll_income/risk_signals/get` can be used as part of the Document Income flow to assess a user-uploaded document for signs of potential fraud or tampering. It returns a risk score for each uploaded document that indicates the likelihood of the document being fraudulent, in addition to details on the individual risk signals contributing to the score.  To trigger risk signal generation for an Item, call `/link/token/create` with `parsing_config` set to include `risk_signals`, or call `/credit/payroll_income/parsing_config/update`. Once risk signal generation has been triggered, `/credit/payroll_income/risk_signals/get` can be called at any time after the `INCOME_VERIFICATION_RISK_SIGNALS` webhook has been fired.  `/credit/payroll_income/risk_signals/get` is offered as an add-on to Document Income and is billed separately. To request access to this endpoint, submit a product access request or contact your Plaid account manager.
         * @summary Retrieve fraud insights for a user\'s manually uploaded document(s).
         * @param {CreditPayrollIncomeRiskSignalsGetRequest} creditPayrollIncomeRiskSignalsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeRiskSignalsGet: (creditPayrollIncomeRiskSignalsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditPayrollIncomeRiskSignalsGet", "creditPayrollIncomeRiskSignalsGetRequest", creditPayrollIncomeRiskSignalsGetRequest);
          const localVarPath = `/credit/payroll_income/risk_signals/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditPayrollIncomeRiskSignalsGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in `/asset_report/create`.  To grant a third party access to an Asset Report, use the `/credit/relay/create` endpoint to create a `relay_token` and then pass that token to your third party. Each third party has its own `secondary_client_id`; for example, `ce5bd328dcd34123456`. You\'ll need to create a separate `relay_token` for each third party that needs access to the report on your behalf.
         * @summary Create a relay token to share an Asset Report with a partner client
         * @param {CreditRelayCreateRequest} creditRelayCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayCreate: (creditRelayCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditRelayCreate", "creditRelayCreateRequest", creditRelayCreateRequest);
          const localVarPath = `/credit/relay/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditRelayCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/credit/relay/get` allows third parties to receive a report that was shared with them, using a `relay_token` that was created by the report owner.
         * @summary Retrieve the reports associated with a relay token that was shared with you
         * @param {CreditRelayGetRequest} creditRelayGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayGet: (creditRelayGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditRelayGet", "creditRelayGetRequest", creditRelayGetRequest);
          const localVarPath = `/credit/relay/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditRelayGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/credit/relay/pdf/get` allows third parties to receive a pdf report that was shared with them, using a `relay_token` that was created by the report owner.  The `/credit/relay/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/credit/relay/pdf/get`, you must first create the Asset Report using `/credit/relay/create` and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/credit/relay/pdf/get` is the PDF binary data. The `request_id` is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
         * @summary Retrieve the pdf reports associated with a relay token that was shared with you (beta)
         * @param {CreditRelayPDFGetRequest} creditRelayPDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayPdfGet: (creditRelayPDFGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditRelayPdfGet", "creditRelayPDFGetRequest", creditRelayPDFGetRequest);
          const localVarPath = `/credit/relay/pdf/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditRelayPDFGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/credit/relay/refresh` endpoint allows third parties to refresh a report that was relayed to them, using a `relay_token` that was created by the report owner. A new report will be created with the original report parameters, but with the most recent data available based on the `days_requested` value of the original report.
         * @summary Refresh a report of a relay token
         * @param {CreditRelayRefreshRequest} creditRelayRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayRefresh: (creditRelayRefreshRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditRelayRefresh", "creditRelayRefreshRequest", creditRelayRefreshRequest);
          const localVarPath = `/credit/relay/refresh`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditRelayRefreshRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/credit/relay/remove` endpoint allows you to invalidate a `relay_token`. The third party holding the token will no longer be able to access or refresh the reports which the `relay_token` gives access to. The original report, associated Items, and other relay tokens that provide access to the same report are not affected and will remain accessible after removing the given `relay_token`.
         * @summary Remove relay token
         * @param {CreditRelayRemoveRequest} creditRelayRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayRemove: (creditRelayRemoveRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditRelayRemove", "creditRelayRemoveRequest", creditRelayRemoveRequest);
          const localVarPath = `/credit/relay/remove`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditRelayRemoveRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/credit/audit_copy_token/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Report data and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
         * @summary Remove an Audit Copy token
         * @param {CreditAuditCopyTokenRemoveRequest} creditAuditCopyTokenRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditReportAuditCopyRemove: (creditAuditCopyTokenRemoveRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditReportAuditCopyRemove", "creditAuditCopyTokenRemoveRequest", creditAuditCopyTokenRemoveRequest);
          const localVarPath = `/credit/audit_copy_token/remove`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditAuditCopyTokenRemoveRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint can be used for your end users after they complete the Link flow. This endpoint returns a list of Link sessions that your user completed, where each session includes the results from the Link flow.  These results include details about the Item that was created and some product related metadata (showing, for example, whether the user finished the bank income verification step).
         * @summary Retrieve Link sessions for your user
         * @param {CreditSessionsGetRequest} creditSessionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditSessionsGet: (creditSessionsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("creditSessionsGet", "creditSessionsGetRequest", creditSessionsGetRequest);
          const localVarPath = `/credit/sessions/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(creditSessionsGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/dashboard_user/get` endpoint provides details (such as email address) about a specific Dashboard user based on the `dashboard_user_id` field, which is returned in the `audit_trail` object of certain Monitor and Beacon endpoints. This can be used to identify the specific reviewer who performed a Dashboard action.
         * @summary Retrieve a dashboard user
         * @param {DashboardUserGetRequest} dashboardUserGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardUserGet: (dashboardUserGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("dashboardUserGet", "dashboardUserGetRequest", dashboardUserGetRequest);
          const localVarPath = `/dashboard_user/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(dashboardUserGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/dashboard_user/list` endpoint provides details (such as email address) all Dashboard users associated with your account. This can use used to audit or track the list of reviewers for Monitor, Beacon, and Identity Verification products.
         * @summary List dashboard users
         * @param {DashboardUserListRequest} dashboardUserListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardUserList: (dashboardUserListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("dashboardUserList", "dashboardUserListRequest", dashboardUserListRequest);
          const localVarPath = `/dashboard_user/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(dashboardUserListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
         * @summary (Deprecated) Create a deposit switch without using Plaid Exchange
         * @param {DepositSwitchAltCreateRequest} depositSwitchAltCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchAltCreate: (depositSwitchAltCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("depositSwitchAltCreate", "depositSwitchAltCreateRequest", depositSwitchAltCreateRequest);
          const localVarPath = `/deposit_switch/alt/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(depositSwitchAltCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
         * @summary (Deprecated) Create a deposit switch
         * @param {DepositSwitchCreateRequest} depositSwitchCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchCreate: (depositSwitchCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("depositSwitchCreate", "depositSwitchCreateRequest", depositSwitchCreateRequest);
          const localVarPath = `/deposit_switch/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(depositSwitchCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user\'s direct deposit allocation preferences.
         * @summary (Deprecated) Retrieve a deposit switch
         * @param {DepositSwitchGetRequest} depositSwitchGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchGet: (depositSwitchGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("depositSwitchGet", "depositSwitchGetRequest", depositSwitchGetRequest);
          const localVarPath = `/deposit_switch/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(depositSwitchGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes.
         * @summary (Deprecated) Create a deposit switch token
         * @param {DepositSwitchTokenCreateRequest} depositSwitchTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchTokenCreate: (depositSwitchTokenCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("depositSwitchTokenCreate", "depositSwitchTokenCreateRequest", depositSwitchTokenCreateRequest);
          const localVarPath = `/deposit_switch/token/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(depositSwitchTokenCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/employers/search` allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user\'s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
         * @summary Search employer database
         * @param {EmployersSearchRequest} employersSearchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employersSearch: (employersSearchRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("employersSearch", "employersSearchRequest", employersSearchRequest);
          const localVarPath = `/employers/search`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(employersSearchRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.  This endpoint has been deprecated; new integrations should use `/credit/employment/get` instead.
         * @summary (Deprecated) Retrieve a summary of an individual\'s employment information
         * @param {EmploymentVerificationGetRequest} employmentVerificationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employmentVerificationGet: (employmentVerificationGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("employmentVerificationGet", "employmentVerificationGetRequest", employmentVerificationGetRequest);
          const localVarPath = `/employment/verification/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(employmentVerificationGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * A generic webhook receiver endpoint for FDX Event Notifications
         * @summary Webhook receiver for fdx notifications
         * @param {FDXNotification} fDXNotification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fdxNotifications: (fDXNotification, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("fdxNotifications", "fDXNotification", fDXNotification);
          const localVarPath = `/fdx/notifications`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(fDXNotification, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Get a specific recipient
         * @summary Get Recipient
         * @param {string} recipientId Recipient Identifier. Uniquely identifies the recipient
         * @param {string} [oAUTHSTATEID] The value that is passed into the OAuth URI \&#39;state\&#39; query parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipient: (recipientId, oAUTHSTATEID, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("getRecipient", "recipientId", recipientId);
          const localVarPath = `/fdx/recipient/{recipientId}`.replace(`{${"recipientId"}}`, encodeURIComponent(String(recipientId)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          if (oAUTHSTATEID !== void 0 && oAUTHSTATEID !== null) {
            localVarHeaderParameter["OAUTH-STATE-ID"] = String(oAUTHSTATEID);
          }
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Returns a list of Recipients
         * @summary Get Recipients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipients: (options = {}) => __awaiter(this, void 0, void 0, function* () {
          const localVarPath = `/fdx/recipients`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use `/identity/documents/uploads/get` to retrieve identity details when using [Identity Document Upload](https://plaid.com/docs/identity/identity-document-upload/).
         * @summary Returns uploaded document identity
         * @param {IdentityDocumentsUploadsGetRequest} identityDocumentsUploadsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityDocumentsUploadsGet: (identityDocumentsUploadsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("identityDocumentsUploadsGet", "identityDocumentsUploadsGetRequest", identityDocumentsUploadsGetRequest);
          const localVarPath = `/identity/documents/uploads/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(identityDocumentsUploadsGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  Note: In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
         * @summary Retrieve identity data
         * @param {IdentityGetRequest} identityGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityGet: (identityGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("identityGet", "identityGetRequest", identityGetRequest);
          const localVarPath = `/identity/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(identityGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder\'s financial institution.  Fields within the `balances` object will always be null when retrieved by `/identity/match`. Instead, use the free `/accounts/get` endpoint to request balance cached data, or `/accounts/balance/get` for real-time data.
         * @summary Retrieve identity match score
         * @param {IdentityMatchRequest} identityMatchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityMatch: (identityMatchRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("identityMatch", "identityMatchRequest", identityMatchRequest);
          const localVarPath = `/identity/match`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(identityMatchRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/identity/refresh` is an optional endpoint for users of the Identity product. It initiates an on-demand extraction to fetch the most up to date Identity information from the Financial Institution. This on-demand extraction takes place in addition to the periodic extractions that automatically occur for any Identity-enabled Item. If changes to Identity are discovered after calling `/identity/refresh`, Plaid will fire a webhook [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/identity/#default_update).  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/identity/refresh` is offered as an add-on to Identity and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh identity data
         * @param {IdentityRefreshRequest} identityRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityRefresh: (identityRefreshRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("identityRefresh", "identityRefreshRequest", identityRefreshRequest);
          const localVarPath = `/identity/refresh`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(identityRefreshRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Try to autofill an Identity Verification based of the provided phone number, date of birth and country of residence.
         * @summary Create autofill for an Identity Verification
         * @param {IdentityVerificationAutofillCreateRequest} identityVerificationAutofillCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationAutofillCreate: (identityVerificationAutofillCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("identityVerificationAutofillCreate", "identityVerificationAutofillCreateRequest", identityVerificationAutofillCreateRequest);
          const localVarPath = `/identity_verification/autofill/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(identityVerificationAutofillCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Create a new Identity Verification for the user specified by the `client_user_id` field. The requirements and behavior of the verification are determined by the `template_id` provided. If you don\'t know whether the associated user already has an active Identity Verification, you can specify `\"is_idempotent\": true` in the request body. With idempotency enabled, a new Identity Verification will only be created if one does not already exist for the associated `client_user_id` and `template_id`. If an Identity Verification is found, it will be returned unmodified with an `200 OK` HTTP status code.  You can also use this endpoint to supply information you already have collected about the user; if any of these fields are specified, the screens prompting the user to enter them will be skipped during the Link flow.
         * @summary Create a new Identity Verification
         * @param {IdentityVerificationCreateRequest} identityVerificationCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationCreate: (identityVerificationCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("identityVerificationCreate", "identityVerificationCreateRequest", identityVerificationCreateRequest);
          const localVarPath = `/identity_verification/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(identityVerificationCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Retrieve a previously created Identity Verification.
         * @summary Retrieve Identity Verification
         * @param {IdentityVerificationGetRequest} identityVerificationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationGet: (identityVerificationGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("identityVerificationGet", "identityVerificationGetRequest", identityVerificationGetRequest);
          const localVarPath = `/identity_verification/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(identityVerificationGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Filter and list Identity Verifications created by your account
         * @summary List Identity Verifications
         * @param {IdentityVerificationListRequest} identityVerificationListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationList: (identityVerificationListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("identityVerificationList", "identityVerificationListRequest", identityVerificationListRequest);
          const localVarPath = `/identity_verification/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(identityVerificationListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Allow a customer to retry their Identity Verification
         * @summary Retry an Identity Verification
         * @param {IdentityVerificationRetryRequest} identityVerificationRetryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationRetry: (identityVerificationRetryRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("identityVerificationRetry", "identityVerificationRetryRequest", identityVerificationRetryRequest);
          const localVarPath = `/identity_verification/retry`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(identityVerificationRetryRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing.
         * @summary (Deprecated) Create an income verification instance
         * @param {IncomeVerificationCreateRequest} incomeVerificationCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationCreate: (incomeVerificationCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("incomeVerificationCreate", "incomeVerificationCreateRequest", incomeVerificationCreateRequest);
          const localVarPath = `/income/verification/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(incomeVerificationCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The `request_id` is returned in the `Plaid-Request-ID` header.
         * @summary (Deprecated) Download the original documents used for income verification
         * @param {IncomeVerificationDocumentsDownloadRequest} incomeVerificationDocumentsDownloadRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationDocumentsDownload: (incomeVerificationDocumentsDownloadRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("incomeVerificationDocumentsDownload", "incomeVerificationDocumentsDownloadRequest", incomeVerificationDocumentsDownloadRequest);
          const localVarPath = `/income/verification/documents/download`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(incomeVerificationDocumentsDownloadRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
         * @summary (Deprecated) Retrieve information from the paystubs used for income verification
         * @param {IncomeVerificationPaystubsGetRequest} incomeVerificationPaystubsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationPaystubsGet: (incomeVerificationPaystubsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("incomeVerificationPaystubsGet", "incomeVerificationPaystubsGetRequest", incomeVerificationPaystubsGetRequest);
          const localVarPath = `/income/verification/paystubs/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(incomeVerificationPaystubsGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/precheck` instead.
         * @summary (Deprecated) Check digital income verification eligibility and optimize conversion
         * @param {IncomeVerificationPrecheckRequest} incomeVerificationPrecheckRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationPrecheck: (incomeVerificationPrecheckRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("incomeVerificationPrecheck", "incomeVerificationPrecheckRequest", incomeVerificationPrecheckRequest);
          const localVarPath = `/income/verification/precheck`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(incomeVerificationPrecheckRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user\'\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
         * @summary (Deprecated) Retrieve information from the tax documents used for income verification
         * @param {IncomeVerificationTaxformsGetRequest} incomeVerificationTaxformsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationTaxformsGet: (incomeVerificationTaxformsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("incomeVerificationTaxformsGet", "incomeVerificationTaxformsGetRequest", incomeVerificationTaxformsGetRequest);
          const localVarPath = `/income/verification/taxforms/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(incomeVerificationTaxformsGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
         * @summary Get details of all supported institutions
         * @param {InstitutionsGetRequest} institutionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsGet: (institutionsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("institutionsGet", "institutionsGetRequest", institutionsGetRequest);
          const localVarPath = `/institutions/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(institutionsGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
         * @summary Get details of an institution
         * @param {InstitutionsGetByIdRequest} institutionsGetByIdRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsGetById: (institutionsGetByIdRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("institutionsGetById", "institutionsGetByIdRequest", institutionsGetByIdRequest);
          const localVarPath = `/institutions/get_by_id`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(institutionsGetByIdRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
         * @summary Search institutions
         * @param {InstitutionsSearchRequest} institutionsSearchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsSearch: (institutionsSearchRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("institutionsSearch", "institutionsSearchRequest", institutionsSearchRequest);
          const localVarPath = `/institutions/search`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(institutionsSearchRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/investments/auth/get` endpoint allows developers to receive user-authorized data to facilitate the transfer of holdings
         * @summary Get data needed to authorize an investments transfer
         * @param {InvestmentsAuthGetRequest} investmentsAuthGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsAuthGet: (investmentsAuthGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("investmentsAuthGet", "investmentsAuthGetRequest", investmentsAuthGetRequest);
          const localVarPath = `/investments/auth/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(investmentsAuthGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.
         * @summary Get Investment holdings
         * @param {InvestmentsHoldingsGetRequest} investmentsHoldingsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsHoldingsGet: (investmentsHoldingsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("investmentsHoldingsGet", "investmentsHoldingsGetRequest", investmentsHoldingsGetRequest);
          const localVarPath = `/investments/holdings/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(investmentsHoldingsGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/investments/refresh` is an optional endpoint for users of the Investments product. It initiates an on-demand extraction to fetch the newest investment holdings and transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Investments-enabled Item. If changes to investments are discovered after calling `/investments/refresh`, Plaid will fire webhooks: [`HOLDINGS: DEFAULT_UPDATE`](https://plaid.com/docs/api/products/investments/#holdings-default_update) if any new holdings are detected, and [`INVESTMENTS_TRANSACTIONS: DEFAULT_UPDATE`](https://plaid.com/docs/api/products/investments/#investments_transactions-default_update) if any new investment transactions are detected. This webhook will typically not fire in the Sandbox environment, due to the lack of dynamic investment transactions and holdings data. To test this webhook in Sandbox, call `/sandbox/item/fire_webhook`. Updated holdings and investment transactions can be fetched by calling `/investments/holdings/get` and `/investments/transactions/get`. Note that the `/investments/refresh` endpoint is not supported by all institutions. If called on an Item from an institution that does not support this functionality, it will return a `PRODUCT_NOT_SUPPORTED` error.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/investments/refresh` is offered as an add-on to Investments and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh investment data
         * @param {InvestmentsRefreshRequest} investmentsRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsRefresh: (investmentsRefreshRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("investmentsRefresh", "investmentsRefreshRequest", investmentsRefreshRequest);
          const localVarPath = `/investments/refresh`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(investmentsRefreshRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/investments/transactions/get` endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.  Note that Investments does not have a webhook to indicate when initial transaction data has loaded (unless you use the `async_update` option). Instead, if transactions data is not ready when `/investments/transactions/get` is first called, Plaid will wait for the data. For this reason, calling `/investments/transactions/get` immediately after Link may take up to one to two minutes to return.  Data returned by the asynchronous investments extraction flow (when `async_update` is set to true) may not be immediately available to `/investments/transactions/get`. To be alerted when the data is ready to be fetched, listen for the `HISTORICAL_UPDATE` webhook. If no investments history is ready when `/investments/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
         * @summary Get investment transactions
         * @param {InvestmentsTransactionsGetRequest} investmentsTransactionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsTransactionsGet: (investmentsTransactionsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("investmentsTransactionsGet", "investmentsTransactionsGetRequest", investmentsTransactionsGetRequest);
          const localVarPath = `/investments/transactions/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(investmentsTransactionsGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Retrieve detailed information about a specific `Issue`. This endpoint returns a single `Issue` object.
         * @summary Get an Issue
         * @param {IssuesGetRequest} issuesGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesGet: (issuesGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("issuesGet", "issuesGetRequest", issuesGetRequest);
          const localVarPath = `/issues/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(issuesGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Search for an issue associated with one of the following identifiers:  `item_id`, `link_session_id` or Link session `request_id`.  This endpoint returns a list of `Issue` objects, with an empty list indicating that no issues are associated with the provided identifier. At least one of the identifiers must be provided to perform the search.
         * @summary Search for an Issue
         * @param {IssuesSearchRequest} issuesSearchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesSearch: (issuesSearchRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("issuesSearch", "issuesSearchRequest", issuesSearchRequest);
          const localVarPath = `/issues/search`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(issuesSearchRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Allows a user to subscribe to updates on a specific `Issue` using a POST method. Subscribers will receive webhook notifications when the issue status changes, particularly when resolved.
         * @summary Subscribe to an Issue
         * @param {IssuesSubscribeRequest} issuesSubscribeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesSubscribe: (issuesSubscribeRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("issuesSubscribe", "issuesSubscribeRequest", issuesSubscribeRequest);
          const localVarPath = `/issues/subscribe`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(issuesSubscribeRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`.
         * @summary Invalidate access_token
         * @param {ItemAccessTokenInvalidateRequest} itemAccessTokenInvalidateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemAccessTokenInvalidate: (itemAccessTokenInvalidateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("itemAccessTokenInvalidate", "itemAccessTokenInvalidateRequest", itemAccessTokenInvalidateRequest);
          const localVarPath = `/item/access_token/invalidate`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemAccessTokenInvalidateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * List a historical log of user consent events
         * @summary List a historical log of user consent events
         * @param {ItemActivityListRequest} itemActivityListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemActivityList: (itemActivityListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("itemActivityList", "itemActivityListRequest", itemActivityListRequest);
          const localVarPath = `/item/activity/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemActivityListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * List a user’s connected applications
         * @summary List a user’s connected applications
         * @param {ItemApplicationListRequest} itemApplicationListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemApplicationList: (itemApplicationListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("itemApplicationList", "itemApplicationListRequest", itemApplicationListRequest);
          const localVarPath = `/item/application/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemApplicationListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Enable consumers to update product access on selected accounts for an application.
         * @summary Update the scopes of access for a particular application
         * @param {ItemApplicationScopesUpdateRequest} itemApplicationScopesUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemApplicationScopesUpdate: (itemApplicationScopesUpdateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("itemApplicationScopesUpdate", "itemApplicationScopesUpdateRequest", itemApplicationScopesUpdateRequest);
          const localVarPath = `/item/application/scopes/update`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemApplicationScopesUpdateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Unlink a user’s connected application. On an unlink request, Plaid will immediately revoke the Application’s access to the User’s data.  The User will have to redo the OAuth authentication process in order to restore functionality.  This endpoint only removes ongoing data access permissions, therefore the User will need to reach out to the Application itself in order to disable and delete their account and delete any data that the Application already received (if the Application does not do so by default).  This endpoint should be called in real time as the User is unlinking an Application, and should not be batched in order to ensure that the change is reflected as soon as possible.
         * @summary Unlink a user’s connected application
         * @param {ItemApplicationUnlinkRequest} itemApplicationUnlinkRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemApplicationUnlink: (itemApplicationUnlinkRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("itemApplicationUnlink", "itemApplicationUnlinkRequest", itemApplicationUnlinkRequest);
          const localVarPath = `/item/application/unlink`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemApplicationUnlinkRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
         * @summary Create public token
         * @param {ItemPublicTokenCreateRequest} itemPublicTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemCreatePublicToken: (itemPublicTokenCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("itemCreatePublicToken", "itemPublicTokenCreateRequest", itemPublicTokenCreateRequest);
          const localVarPath = `/item/public_token/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemPublicTokenCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Returns information about the status of an Item.
         * @summary Retrieve an Item
         * @param {ItemGetRequest} itemGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemGet: (itemGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("itemGet", "itemGetRequest", itemGetRequest);
          const localVarPath = `/item/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated.
         * @summary Import Item
         * @param {ItemImportRequest} itemImportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemImport: (itemImportRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("itemImport", "itemImportRequest", itemImportRequest);
          const localVarPath = `/item/import`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemImportRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes. An `access_token` does not expire, but can be revoked by calling `/item/remove`.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
         * @summary Exchange public token for an access token
         * @param {ItemPublicTokenExchangeRequest} itemPublicTokenExchangeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemPublicTokenExchange: (itemPublicTokenExchangeRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("itemPublicTokenExchange", "itemPublicTokenExchangeRequest", itemPublicTokenExchangeRequest);
          const localVarPath = `/item/public_token/exchange`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemPublicTokenExchangeRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/item/remove` endpoint allows you to remove an Item. Once removed, the `access_token`, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.   Calling `/item/remove` is a recommended best practice when offboarding users or if a user chooses to disconnect an account linked via Plaid. For subscription products, such as Transactions, Liabilities, and Investments, calling `/item/remove` is required to end subscription billing for the Item. For money movement products such as Auth and Transfer, if the Item is at an institution that uses Tokenized Account Numbers (TANs), such as Chase or PNC, calling `/item/remove` will invalidate the TAN, and subsequent ACH transfer attempts using that TAN will be returned.  In Limited Production, calling `/item/remove` does not impact the number of remaining Limited Production Items you have available.  Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove access to them specifically using the `/asset_report/remove` endpoint.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution\'s OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.
         * @summary Remove an Item
         * @param {ItemRemoveRequest} itemRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemRemove: (itemRemoveRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("itemRemove", "itemRemoveRequest", itemRemoveRequest);
          const localVarPath = `/item/remove`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemRemoveRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL.
         * @summary Update Webhook URL
         * @param {ItemWebhookUpdateRequest} itemWebhookUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemWebhookUpdate: (itemWebhookUpdateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("itemWebhookUpdate", "itemWebhookUpdateRequest", itemWebhookUpdateRequest);
          const localVarPath = `/item/webhook/update`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(itemWebhookUpdateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/link/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.
         * @summary Retrieve Liabilities data
         * @param {LiabilitiesGetRequest} liabilitiesGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        liabilitiesGet: (liabilitiesGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("liabilitiesGet", "liabilitiesGetRequest", liabilitiesGetRequest);
          const localVarPath = `/liabilities/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(liabilitiesGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/link_delivery/create` endpoint to create a Hosted Link session.
         * @summary Create Hosted Link session
         * @param {LinkDeliveryCreateRequest} linkDeliveryCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkDeliveryCreate: (linkDeliveryCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("linkDeliveryCreate", "linkDeliveryCreateRequest", linkDeliveryCreateRequest);
          const localVarPath = `/link_delivery/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(linkDeliveryCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/link_delivery/get` endpoint to get the status of a Hosted Link session.
         * @summary Get Hosted Link session
         * @param {LinkDeliveryGetRequest} linkDeliveryGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkDeliveryGet: (linkDeliveryGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("linkDeliveryGet", "linkDeliveryGetRequest", linkDeliveryGetRequest);
          const localVarPath = `/link_delivery/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(linkDeliveryGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Exchange an OAuth `link_correlation_id` for the corresponding `link_token`. The `link_correlation_id` is only available for \'payment_initiation\' products and is provided to the client via the OAuth `redirect_uri` as a query parameter. The `link_correlation_id` is ephemeral and expires in a brief period, after which it can no longer be exchanged for the \'link_token\'.
         * @summary Exchange the Link Correlation Id for a Link Token
         * @param {LinkOAuthCorrelationIdExchangeRequest} linkOAuthCorrelationIdExchangeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkOauthCorrelationIdExchange: (linkOAuthCorrelationIdExchangeRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("linkOauthCorrelationIdExchange", "linkOAuthCorrelationIdExchangeRequest", linkOAuthCorrelationIdExchangeRequest);
          const localVarPath = `/link/oauth/correlation_id/exchange`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(linkOAuthCorrelationIdExchangeRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`. For most Plaid products, the `public_token` is saved and exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow. For more details, see the [Link flow overview](https://plaid.com/docs/link/#link-flow-overview).  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the [update mode](https://plaid.com/docs/link/update-mode) flow for tokens with expired credentials, or the Identity Verification flow.
         * @summary Create Link Token
         * @param {LinkTokenCreateRequest} linkTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkTokenCreate: (linkTokenCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("linkTokenCreate", "linkTokenCreateRequest", linkTokenCreateRequest);
          const localVarPath = `/link/token/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(linkTokenCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/link/token/get` endpoint gets information about a Link session, including all callbacks fired during the session along with their metadata, including the public token. This endpoint is used with Link flows that don\'t provide a public token via frontend callbacks, such as the [Hosted Link flow](https://plaid.com/docs/link/hosted-link/) and the [Multi-Item Link flow](https://plaid.com/docs/link/multi-item-link/). It also can be useful for debugging purposes.
         * @summary Get Link Token
         * @param {LinkTokenGetRequest} linkTokenGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkTokenGet: (linkTokenGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("linkTokenGet", "linkTokenGetRequest", linkTokenGetRequest);
          const localVarPath = `/link/token/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(linkTokenGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint allows you to retrieve the Network Insights from a list of `access_tokens`.
         * @summary Retrieve network insights for the provided `access_tokens`
         * @param {NetworkInsightsReportGetRequest} networkInsightsReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkInsightsReportGet: (networkInsightsReportGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("networkInsightsReportGet", "networkInsightsReportGetRequest", networkInsightsReportGetRequest);
          const localVarPath = `/network_insights/report/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(networkInsightsReportGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/network/status/get` endpoint can be used to check whether Plaid has a matching profile for the user. This is useful for determining if a user is eligible for a streamlined experience, such as Layer.  Note: it is strongly recommended to check for Layer eligibility in the frontend. `/network/status/get` should only be used for checking Layer eligibility if a frontend check is not possible for your use case. For instructions on performing a frontend eligibility check, see the [Layer documentation](https://plaid.com/docs/layer/#integration-overview).
         * @summary Check a user\'s Plaid Network status
         * @param {NetworkStatusGetRequest} networkStatusGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkStatusGet: (networkStatusGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("networkStatusGet", "networkStatusGetRequest", networkStatusGetRequest);
          const localVarPath = `/network/status/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(networkStatusGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/partner/customer/create` endpoint is used by reseller partners to create end customers. To create end customers, it should be called in the Production environment only, even when creating Sandbox API keys. If called in the Sandbox environment, it will return a sample response, but no customer will be created and the API keys will not be valid.
         * @summary Creates a new end customer for a Plaid reseller.
         * @param {PartnerCustomerCreateRequest} partnerCustomerCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerCreate: (partnerCustomerCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("partnerCustomerCreate", "partnerCustomerCreateRequest", partnerCustomerCreateRequest);
          const localVarPath = `/partner/customer/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(partnerCustomerCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/partner/customer/enable` endpoint is used by reseller partners to enable an end customer in the full Production environment.
         * @summary Enables a Plaid reseller\'s end customer in the Production environment.
         * @param {PartnerCustomerEnableRequest} partnerCustomerEnableRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerEnable: (partnerCustomerEnableRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("partnerCustomerEnable", "partnerCustomerEnableRequest", partnerCustomerEnableRequest);
          const localVarPath = `/partner/customer/enable`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(partnerCustomerEnableRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/partner/customer/get` endpoint is used by reseller partners to retrieve data about a single end customer.
         * @summary Returns a Plaid reseller\'s end customer.
         * @param {PartnerCustomerGetRequest} partnerCustomerGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerGet: (partnerCustomerGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("partnerCustomerGet", "partnerCustomerGetRequest", partnerCustomerGetRequest);
          const localVarPath = `/partner/customer/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(partnerCustomerGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/partner/customer/oauth_institutions/get` endpoint is used by reseller partners to retrieve OAuth-institution registration information about a single end customer. To learn how to set up a webhook to listen to status update events, visit the [reseller documentation](https://plaid.com/docs/account/resellers/#enabling-end-customers).
         * @summary Returns OAuth-institution registration information for a given end customer.
         * @param {PartnerCustomerOAuthInstitutionsGetRequest} partnerCustomerOAuthInstitutionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerOauthInstitutionsGet: (partnerCustomerOAuthInstitutionsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("partnerCustomerOauthInstitutionsGet", "partnerCustomerOAuthInstitutionsGetRequest", partnerCustomerOAuthInstitutionsGetRequest);
          const localVarPath = `/partner/customer/oauth_institutions/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(partnerCustomerOAuthInstitutionsGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/partner/customer/remove` endpoint is used by reseller partners to remove an end customer. Removing an end customer will remove it from view in the Plaid Dashboard and deactivate its API keys. This endpoint can only be used to remove an end customer that has not yet been enabled in full Production.
         * @summary Removes a Plaid reseller\'s end customer.
         * @param {PartnerCustomerRemoveRequest} partnerCustomerRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerRemove: (partnerCustomerRemoveRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("partnerCustomerRemove", "partnerCustomerRemoveRequest", partnerCustomerRemoveRequest);
          const localVarPath = `/partner/customer/remove`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(partnerCustomerRemoveRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/payment_initiation/consent/create` endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with `UNAUTHORISED` status by default and must be authorised by the user before payments can be initiated.  Consents can be limited in time and scope, and have constraints that describe limitations for payments.
         * @summary Create payment consent
         * @param {PaymentInitiationConsentCreateRequest} paymentInitiationConsentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentCreate: (paymentInitiationConsentCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("paymentInitiationConsentCreate", "paymentInitiationConsentCreateRequest", paymentInitiationConsentCreateRequest);
          const localVarPath = `/payment_initiation/consent/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationConsentCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/payment_initiation/consent/get` endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints.
         * @summary Get payment consent
         * @param {PaymentInitiationConsentGetRequest} paymentInitiationConsentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentGet: (paymentInitiationConsentGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("paymentInitiationConsentGet", "paymentInitiationConsentGetRequest", paymentInitiationConsentGetRequest);
          const localVarPath = `/payment_initiation/consent/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationConsentGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/payment_initiation/consent/payment/execute` endpoint can be used to execute payments using payment consent.
         * @summary Execute a single payment using consent
         * @param {PaymentInitiationConsentPaymentExecuteRequest} paymentInitiationConsentPaymentExecuteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentPaymentExecute: (paymentInitiationConsentPaymentExecuteRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("paymentInitiationConsentPaymentExecute", "paymentInitiationConsentPaymentExecuteRequest", paymentInitiationConsentPaymentExecuteRequest);
          const localVarPath = `/payment_initiation/consent/payment/execute`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationConsentPaymentExecuteRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/payment_initiation/consent/revoke` endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it.
         * @summary Revoke payment consent
         * @param {PaymentInitiationConsentRevokeRequest} paymentInitiationConsentRevokeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentRevoke: (paymentInitiationConsentRevokeRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("paymentInitiationConsentRevoke", "paymentInitiationConsentRevokeRequest", paymentInitiationConsentRevokeRequest);
          const localVarPath = `/payment_initiation/consent/revoke`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationConsentRevokeRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR, GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency).  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer, GBP-denominated payments will be sent via the Faster Payments network and for non-Eurozone markets typically via the local payment scheme, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer or other local payment schemes will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In Limited Production, payments must be below 5 GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency), and standing orders, variable recurring payments, and Virtual Accounts are not supported.
         * @summary Create a payment
         * @param {PaymentInitiationPaymentCreateRequest} paymentInitiationPaymentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentCreate: (paymentInitiationPaymentCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("paymentInitiationPaymentCreate", "paymentInitiationPaymentCreateRequest", paymentInitiationPaymentCreateRequest);
          const localVarPath = `/payment_initiation/payment/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationPaymentCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
         * @summary Get payment details
         * @param {PaymentInitiationPaymentGetRequest} paymentInitiationPaymentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentGet: (paymentInitiationPaymentGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("paymentInitiationPaymentGet", "paymentInitiationPaymentGetRequest", paymentInitiationPaymentGetRequest);
          const localVarPath = `/payment_initiation/payment/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationPaymentGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.
         * @summary List payments
         * @param {PaymentInitiationPaymentListRequest} paymentInitiationPaymentListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentList: (paymentInitiationPaymentListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("paymentInitiationPaymentList", "paymentInitiationPaymentListRequest", paymentInitiationPaymentListRequest);
          const localVarPath = `/payment_initiation/payment/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationPaymentListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Reverse a settled payment from a Plaid virtual account.  The original payment must be in a settled state to be refunded. To refund partially, specify the amount as part of the request. If the amount is not specified, the refund amount will be equal to all of the remaining payment amount that has not been refunded yet.  The refund will go back to the source account that initiated the payment. The original payment must have been initiated to a Plaid virtual account so that this account can be used to initiate the refund.  Providing counterparty information such as date of birth and address increases  the likelihood of refund being successful without human intervention.
         * @summary Reverse an existing payment
         * @param {PaymentInitiationPaymentReverseRequest} paymentInitiationPaymentReverseRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentReverse: (paymentInitiationPaymentReverseRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("paymentInitiationPaymentReverse", "paymentInitiationPaymentReverseRequest", paymentInitiationPaymentReverseRequest);
          const localVarPath = `/payment_initiation/payment/reverse`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationPaymentReverseRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA) or a non-Eurozone country [supported](https://plaid.com/global) by Plaid. For a standing order (recurring) payment, the recipient must be in the UK.  It is recommended to use `bacs` in the UK and `iban` in EU.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`.
         * @summary Create payment recipient
         * @param {PaymentInitiationRecipientCreateRequest} paymentInitiationRecipientCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientCreate: (paymentInitiationRecipientCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("paymentInitiationRecipientCreate", "paymentInitiationRecipientCreateRequest", paymentInitiationRecipientCreateRequest);
          const localVarPath = `/payment_initiation/recipient/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationRecipientCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Get details about a payment recipient you have previously created.
         * @summary Get payment recipient
         * @param {PaymentInitiationRecipientGetRequest} paymentInitiationRecipientGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientGet: (paymentInitiationRecipientGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("paymentInitiationRecipientGet", "paymentInitiationRecipientGetRequest", paymentInitiationRecipientGetRequest);
          const localVarPath = `/payment_initiation/recipient/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationRecipientGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.
         * @summary List payment recipients
         * @param {PaymentInitiationRecipientListRequest} paymentInitiationRecipientListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientList: (paymentInitiationRecipientListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("paymentInitiationRecipientList", "paymentInitiationRecipientListRequest", paymentInitiationRecipientListRequest);
          const localVarPath = `/payment_initiation/recipient/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentInitiationRecipientListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use `/payment_profile/create` endpoint to create a new payment profile. To initiate the account linking experience, call `/link/token/create` and provide the `payment_profile_token` in the `transfer.payment_profile_token` field. You can then use the `payment_profile_token` when creating transfers using `/transfer/authorization/create` and `/transfer/create`.
         * @summary Create payment profile
         * @param {PaymentProfileCreateRequest} paymentProfileCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentProfileCreate: (paymentProfileCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("paymentProfileCreate", "paymentProfileCreateRequest", paymentProfileCreateRequest);
          const localVarPath = `/payment_profile/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentProfileCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use `/payment_profile/get` endpoint to get the status of a given Payment Profile.
         * @summary Get payment profile
         * @param {PaymentProfileGetRequest} paymentProfileGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentProfileGet: (paymentProfileGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("paymentProfileGet", "paymentProfileGetRequest", paymentProfileGetRequest);
          const localVarPath = `/payment_profile/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentProfileGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/payment_profile/remove` endpoint to remove a given Payment Profile. Once it’s removed, it can no longer be used to create transfers.
         * @summary Remove payment profile
         * @param {PaymentProfileRemoveRequest} paymentProfileRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentProfileRemove: (paymentProfileRemoveRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("paymentProfileRemove", "paymentProfileRemoveRequest", paymentProfileRemoveRequest);
          const localVarPath = `/payment_profile/remove`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(paymentProfileRemoveRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint returns the account associated with a given processor token.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, the account balance returned may not be up-to-date; for realtime balance information, use `/processor/balance/get` instead. Note that some information is nullable.
         * @summary Retrieve the account associated with a processor token
         * @param {ProcessorAccountGetRequest} processorAccountGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorAccountGet: (processorAccountGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorAccountGet", "processorAccountGetRequest", processorAccountGetRequest);
          const localVarPath = `/processor/account/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorAccountGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
         * @summary Create Apex bank account token
         * @param {ProcessorApexProcessorTokenCreateRequest} processorApexProcessorTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorApexProcessorTokenCreate: (processorApexProcessorTokenCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorApexProcessorTokenCreate", "processorApexProcessorTokenCreateRequest", processorApexProcessorTokenCreateRequest);
          const localVarPath = `/processor/apex/processor_token/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorApexProcessorTokenCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking, savings, or cash management account that\'\'s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.  Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14).
         * @summary Retrieve Auth data
         * @param {ProcessorAuthGetRequest} processorAuthGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorAuthGet: (processorAuthGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorAuthGet", "processorAuthGetRequest", processorAuthGetRequest);
          const localVarPath = `/processor/auth/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorAuthGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/processor/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached.
         * @summary Retrieve Balance data
         * @param {ProcessorBalanceGetRequest} processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorBalanceGet: (processorBalanceGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorBalanceGet", "processorBalanceGetRequest", processorBalanceGetRequest);
          const localVarPath = `/processor/balance/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorBalanceGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor
         * @summary Create a bank transfer as a processor
         * @param {ProcessorBankTransferCreateRequest} processorBankTransferCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorBankTransferCreate: (processorBankTransferCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorBankTransferCreate", "processorBankTransferCreateRequest", processorBankTransferCreateRequest);
          const localVarPath = `/processor/bank_transfer/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorBankTransferCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
         * @summary Retrieve Identity data
         * @param {ProcessorIdentityGetRequest} processorIdentityGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorIdentityGet: (processorIdentityGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorIdentityGet", "processorIdentityGetRequest", processorIdentityGetRequest);
          const localVarPath = `/processor/identity/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorIdentityGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/processor/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder\'s financial institution.  Fields within the `balances` object will always be null when retrieved by `/identity/match`. Instead, use the free `/accounts/get` endpoint to request balance cached data, or `/accounts/balance/get` for real-time data.
         * @summary Retrieve identity match score
         * @param {ProcessorIdentityMatchRequest} processorIdentityMatchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorIdentityMatch: (processorIdentityMatchRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorIdentityMatch", "processorIdentityMatchRequest", processorIdentityMatchRequest);
          const localVarPath = `/processor/identity/match`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorIdentityMatchRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint returns the stock position data of the account associated with a given processor token.
         * @summary Retrieve Investment Holdings
         * @param {ProcessorInvestmentsHoldingsGetRequest} processorInvestmentsHoldingsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorInvestmentsHoldingsGet: (processorInvestmentsHoldingsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorInvestmentsHoldingsGet", "processorInvestmentsHoldingsGetRequest", processorInvestmentsHoldingsGetRequest);
          const localVarPath = `/processor/investments/holdings/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorInvestmentsHoldingsGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/processor/investments/transactions/get` endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for the investment account associated with the processor token.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with the account, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.  Note that Investments does not have a webhook to indicate when initial transaction data has loaded (unless you use the `async_update` option). Instead, if transactions data is not ready when `/processor/investments/transactions/get` is first called, Plaid will wait for the data. For this reason, calling `/processor/investments/transactions/get` immediately after Link may take up to one to two minutes to return.  Data returned by the asynchronous investments extraction flow (when `async_update` is set to true) may not be immediately available to `/processor/investments/transactions/get`. To be alerted when the data is ready to be fetched, listen for the `HISTORICAL_UPDATE` webhook. If no investments history is ready when `/processor/investments/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.  To receive Investments Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
         * @summary Get investment transactions data
         * @param {ProcessorInvestmentsTransactionsGetRequest} processorInvestmentsTransactionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorInvestmentsTransactionsGet: (processorInvestmentsTransactionsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorInvestmentsTransactionsGet", "processorInvestmentsTransactionsGetRequest", processorInvestmentsTransactionsGetRequest);
          const localVarPath = `/processor/investments/transactions/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorInvestmentsTransactionsGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/processor/liabilities/get` endpoint returns various details about a loan or credit account. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`.  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/processor/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the processor token. This is because Plaid must communicate directly with the institution to retrieve the additional data.
         * @summary Retrieve Liabilities data
         * @param {ProcessorLiabilitiesGetRequest} processorLiabilitiesGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorLiabilitiesGet: (processorLiabilitiesGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorLiabilitiesGet", "processorLiabilitiesGetRequest", processorLiabilitiesGetRequest);
          const localVarPath = `/processor/liabilities/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorLiabilitiesGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * After calling `/processor/signal/evaluate`, call `/processor/signal/decision/report` to report whether the transaction was initiated.  If you are using the [Plaid Transfer product](https://www.plaid.com/docs/transfer) to create transfers, it is not necessary to use this endpoint, as Plaid already knows whether the transfer was initiated.
         * @summary Report whether you initiated an ACH transaction
         * @param {ProcessorSignalDecisionReportRequest} processorSignalDecisionReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorSignalDecisionReport: (processorSignalDecisionReportRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorSignalDecisionReport", "processorSignalDecisionReportRequest", processorSignalDecisionReportRequest);
          const localVarPath = `/processor/signal/decision/report`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorSignalDecisionReportRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use `/processor/signal/evaluate` to evaluate a planned ACH transaction as a processor to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/processor/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to our error documentation on [item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time. To reduce this latency, you can call `/signal/prepare` on the Item before you need to request Signal data.
         * @summary Evaluate a planned ACH transaction
         * @param {ProcessorSignalEvaluateRequest} processorSignalEvaluateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorSignalEvaluate: (processorSignalEvaluateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorSignalEvaluate", "processorSignalEvaluateRequest", processorSignalEvaluateRequest);
          const localVarPath = `/processor/signal/evaluate`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorSignalEvaluateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * When a processor token is not initialized with Signal, call `/processor/signal/prepare` to opt-in that processor token to the Signal data collection process, which will improve the accuracy of the Signal score.  If this endpoint is called with a processor token that is already initialized with Signal, it will return a 200 response and will not modify the processor token.
         * @summary Opt-in a processor token to Signal
         * @param {ProcessorSignalPrepareRequest} processorSignalPrepareRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorSignalPrepare: (processorSignalPrepareRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorSignalPrepare", "processorSignalPrepareRequest", processorSignalPrepareRequest);
          const localVarPath = `/processor/signal/prepare`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorSignalPrepareRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Call the `/processor/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/processor/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.  If you are using the [Plaid Transfer product](https://www.plaid.com/docs/transfer) to create transfers, it is not necessary to use this endpoint, as Plaid already knows whether the transfer was returned.
         * @summary Report a return for an ACH transaction
         * @param {ProcessorSignalReturnReportRequest} processorSignalReturnReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorSignalReturnReport: (processorSignalReturnReportRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorSignalReturnReport", "processorSignalReturnReportRequest", processorSignalReturnReportRequest);
          const localVarPath = `/processor/signal/return/report`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorSignalReturnReportRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         *  Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).  Note that the Stripe bank account token is a one-time use token. To store bank account information for later use, you can use a Stripe customer object and create an associated bank account from the token, or you can use a Stripe Custom account and create an associated external bank account from the token. This bank account information should work indefinitely, unless the user\'s bank account information changes or they revoke Plaid\'s permissions to access their account. Stripe bank account information cannot be modified once the bank account token has been created. If you ever need to change the bank account details used by Stripe for a specific customer, have the user go through Link again and create a new bank account token from the new `access_token`.  To revoke a bank account token, the entire underlying access token must be revoked using `/item/remove`.
         * @summary Create Stripe bank account token
         * @param {ProcessorStripeBankAccountTokenCreateRequest} processorStripeBankAccountTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorStripeBankAccountTokenCreate: (processorStripeBankAccountTokenCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorStripeBankAccountTokenCreate", "processorStripeBankAccountTokenCreateRequest", processorStripeBankAccountTokenCreateRequest);
          const localVarPath = `/processor/stripe/bank_account_token/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorStripeBankAccountTokenCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Used to create a token suitable for sending to one of Plaid\'s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations. If using multiple processors, multiple different processor tokens can be created for a single access token. Once created, a processor token for a given Item cannot be modified or updated. To revoke the processor\'s access, the entire Item must be deleted by calling `/item/remove`.
         * @summary Create processor token
         * @param {ProcessorTokenCreateRequest} processorTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenCreate: (processorTokenCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorTokenCreate", "processorTokenCreateRequest", processorTokenCreateRequest);
          const localVarPath = `/processor/token/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorTokenCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Used to get a processor token\'s product permissions. The `products` field will be an empty list if the processor can access all available products.
         * @summary Get a processor token\'s product permissions
         * @param {ProcessorTokenPermissionsGetRequest} processorTokenPermissionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenPermissionsGet: (processorTokenPermissionsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorTokenPermissionsGet", "processorTokenPermissionsGetRequest", processorTokenPermissionsGetRequest);
          const localVarPath = `/processor/token/permissions/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorTokenPermissionsGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Used to control a processor\'s access to products on the given processor token. By default, a processor will have access to all available products on the corresponding item. To restrict access to a particular set of products, call this endpoint with the desired products. To restore access to all available products, call this endpoint with an empty list. This endpoint can be called multiple times as your needs and your processor\'s needs change.
         * @summary Control a processor\'s access to products
         * @param {ProcessorTokenPermissionsSetRequest} processorTokenPermissionsSetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenPermissionsSet: (processorTokenPermissionsSetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorTokenPermissionsSet", "processorTokenPermissionsSetRequest", processorTokenPermissionsSetRequest);
          const localVarPath = `/processor/token/permissions/set`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorTokenPermissionsSetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint allows you, the processor, to update the webhook URL associated with a processor token. This request triggers a `WEBHOOK_UPDATE_ACKNOWLEDGED` webhook to the newly specified webhook URL.
         * @summary Update a processor token\'s webhook URL
         * @param {ProcessorTokenWebhookUpdateRequest} processorTokenWebhookUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenWebhookUpdate: (processorTokenWebhookUpdateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorTokenWebhookUpdate", "processorTokenWebhookUpdateRequest", processorTokenWebhookUpdateRequest);
          const localVarPath = `/processor/token/webhook/update`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorTokenWebhookUpdateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/processor/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/processor/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with a processor token, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/processor/transactions/get` will be the data available for the processor token as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To force Plaid to check for new transactions, you can use the `/processor/transactions/refresh` endpoint.  Note that data may not be immediately available to `/processor/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/processor/transactions/get`, if it wasn\'t. If no transaction history is ready when `/processor/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
         * @summary Get transaction data
         * @param {ProcessorTransactionsGetRequest} processorTransactionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsGet: (processorTransactionsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorTransactionsGet", "processorTransactionsGetRequest", processorTransactionsGetRequest);
          const localVarPath = `/processor/transactions/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorTransactionsGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/processor/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on a processor token that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/processor/transactions/get` or `/processor/transactions/sync`). Once all historical transactions have been fetched, call `/processor/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/processor/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/processor/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/processor/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
         * @summary Fetch recurring transaction streams
         * @param {ProcessorTransactionsRecurringGetRequest} processorTransactionsRecurringGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsRecurringGet: (processorTransactionsRecurringGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorTransactionsRecurringGet", "processorTransactionsRecurringGetRequest", processorTransactionsRecurringGetRequest);
          const localVarPath = `/processor/transactions/recurring/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorTransactionsRecurringGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/processor/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for a processor token. This on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Transactions-enabled processor token. If changes to transactions are discovered after calling `/processor/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/processor/transactions/sync` and `/processor/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/processor/transactions/get` or `/processor/transactions/sync`. Note that the `/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) non-depository accounts and will result in a `PRODUCTS_NOT_SUPPORTED` error if called on an Item that contains only non-depository accounts from that institution.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/processor/transactions/refresh` is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh transaction data
         * @param {ProcessorTransactionsRefreshRequest} processorTransactionsRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsRefresh: (processorTransactionsRefreshRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorTransactionsRefresh", "processorTransactionsRefreshRequest", processorTransactionsRefreshRequest);
          const localVarPath = `/processor/transactions/refresh`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorTransactionsRefreshRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         *  The `/processor/transactions/sync` endpoint retrieves transactions associated with an Item and can fetch updates using a cursor to track which updates have already been seen.  For important instructions on integrating with `/processor/transactions/sync`, see the [Transactions integration overview](https://plaid.com/docs/transactions/#integration-overview). If you are migrating from an existing integration using `/processor/transactions/get`, see the [Transactions Sync migration guide](https://plaid.com/docs/transactions/sync-migration/).  This endpoint supports `credit`, `depository`, and some `loan`-type accounts (only those with account subtype `student`). For `investments` accounts, use `/investments/transactions/get` instead.  When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/processor/transactions/sync` fails when retrieving a paginated update (e.g due to the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error), the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  If transactions data is not yet available for the Item, which can happen if the Item was not initialized with transactions during the `/link/token/create` call or if `/processor/transactions/sync` was called within a few seconds of Item creation, `/processor/transactions/sync` will return empty transactions arrays.   Plaid typically checks for new transactions data between one and four times per day, depending on the institution. To find out when transactions were last updated for an Item, use the [Item Debugger](https://plaid.com/docs/account/activity/#troubleshooting-with-item-debugger) or call `/item/get`; the `item.status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/processor/transactions/refresh` endpoint.  To be alerted when new transactions are available, listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
         * @summary Get incremental transaction updates on a processor token
         * @param {ProcessorTransactionsSyncRequest} processorTransactionsSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsSync: (processorTransactionsSyncRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("processorTransactionsSync", "processorTransactionsSyncRequest", processorTransactionsSyncRequest);
          const localVarPath = `/processor/transactions/sync`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(processorTransactionsSyncRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/profile/network_status/get` endpoint can be used to check whether Plaid has a matching profile for the user.
         * @summary Check a user\'s Plaid Network status
         * @param {ProfileNetworkStatusGetRequest} profileNetworkStatusGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileNetworkStatusGet: (profileNetworkStatusGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("profileNetworkStatusGet", "profileNetworkStatusGetRequest", profileNetworkStatusGetRequest);
          const localVarPath = `/profile/network_status/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(profileNetworkStatusGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/bank_income/fire_webhook` endpoint to manually trigger a Bank Income webhook in the Sandbox environment.
         * @summary Manually fire a bank income webhook in sandbox
         * @param {SandboxBankIncomeFireWebhookRequest} sandboxBankIncomeFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxBankIncomeFireWebhook: (sandboxBankIncomeFireWebhookRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxBankIncomeFireWebhook", "sandboxBankIncomeFireWebhookRequest", sandboxBankIncomeFireWebhookRequest);
          const localVarPath = `/sandbox/bank_income/fire_webhook`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxBankIncomeFireWebhookRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
         * @summary Manually fire a Bank Transfer webhook
         * @param {SandboxBankTransferFireWebhookRequest} sandboxBankTransferFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxBankTransferFireWebhook: (sandboxBankTransferFireWebhookRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxBankTransferFireWebhook", "sandboxBankTransferFireWebhookRequest", sandboxBankTransferFireWebhookRequest);
          const localVarPath = `/sandbox/bank_transfer/fire_webhook`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxBankTransferFireWebhookRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
         * @summary Simulate a bank transfer event in Sandbox
         * @param {SandboxBankTransferSimulateRequest} sandboxBankTransferSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxBankTransferSimulate: (sandboxBankTransferSimulateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxBankTransferSimulate", "sandboxBankTransferSimulateRequest", sandboxBankTransferSimulateRequest);
          const localVarPath = `/sandbox/bank_transfer/simulate`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxBankTransferSimulateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/cra/cashflow_updates/update` endpoint to manually trigger an update for cashflow updates (Monitoring) in the Sandbox environment.
         * @summary Trigger an update for Cashflow Updates
         * @param {SandboxCraCashflowUpdatesUpdateRequest} sandboxCraCashflowUpdatesUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxCraCashflowUpdatesUpdate: (sandboxCraCashflowUpdatesUpdateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxCraCashflowUpdatesUpdate", "sandboxCraCashflowUpdatesUpdateRequest", sandboxCraCashflowUpdatesUpdateRequest);
          const localVarPath = `/sandbox/cra/cashflow_updates/update`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxCraCashflowUpdatesUpdateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/income/fire_webhook` endpoint to manually trigger a Payroll or Document Income webhook in the Sandbox environment.
         * @summary Manually fire an Income webhook
         * @param {SandboxIncomeFireWebhookRequest} sandboxIncomeFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxIncomeFireWebhook: (sandboxIncomeFireWebhookRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxIncomeFireWebhook", "sandboxIncomeFireWebhookRequest", sandboxIncomeFireWebhookRequest);
          const localVarPath = `/sandbox/income/fire_webhook`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxIncomeFireWebhookRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks:  `DEFAULT_UPDATE`: Webhook to be fired for a given Sandbox Item simulating a default update event for the respective product as specified with the `webhook_type` in the request body. Valid Sandbox `DEFAULT_UPDATE` webhook types include: `AUTH`, `IDENTITY`, `TRANSACTIONS`, `INVESTMENTS_TRANSACTIONS`, `LIABILITIES`, `HOLDINGS`. If the Item does not support the product, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `NEW_ACCOUNTS_AVAILABLE`: Fired to indicate that a new account is available on the Item and you can launch update mode to request access to it.  `SMS_MICRODEPOSITS_VERIFICATION`: Fired when a given same day micro-deposit item is verified via SMS verification.  `LOGIN_REPAIRED`: Fired when an Item recovers from the `ITEM_LOGIN_REQUIRED` without the user going through update mode in your app.  `PENDING_DISCONNECT`: Fired when an Item will stop working in the near future (e.g. due to a planned bank migration) and must be sent through update mode to continue working.   `RECURRING_TRANSACTIONS_UPDATE`: Recurring Transactions webhook to be fired for a given Sandbox Item. If the Item does not support Recurring Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `SYNC_UPDATES_AVAILABLE`: Transactions webhook to be fired for a given Sandbox Item.  If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `PRODUCT_READY`: Assets webhook to be fired when a given asset report has been successfully generated. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `ERROR`: Assets webhook to be fired when asset report generation has failed. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `USER_PERMISSION_REVOKED`: Indicates an end user has revoked the permission that they previously granted to access an Item. May not always fire upon revocation, as some institutions’ consent portals do not trigger this webhook. Upon receiving this webhook, it is recommended to delete any stored data from Plaid associated with the account or Item.  `USER_ACCOUNT_REVOKED`: Fired when an end user has revoked access to their account on the Data Provider\'s portal. This webhook is currently sent only for Chase and PNC Items, but may be sent in the future for other financial institutions. Upon receiving this webhook, it is recommended to delete any stored data from Plaid associated with the account or Item.  Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production (except for webhooks of type `TRANSFER`).
         * @summary Fire a test webhook
         * @param {SandboxItemFireWebhookRequest} sandboxItemFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemFireWebhook: (sandboxItemFireWebhookRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxItemFireWebhook", "sandboxItemFireWebhookRequest", sandboxItemFireWebhookRequest);
          const localVarPath = `/sandbox/item/fire_webhook`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxItemFireWebhookRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
         * @summary Force a Sandbox Item into an error state
         * @param {SandboxItemResetLoginRequest} sandboxItemResetLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemResetLogin: (sandboxItemResetLoginRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxItemResetLogin", "sandboxItemResetLoginRequest", sandboxItemResetLoginRequest);
          const localVarPath = `/sandbox/item/reset_login`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxItemResetLoginRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
         * @summary Set verification status for Sandbox account
         * @param {SandboxItemSetVerificationStatusRequest} sandboxItemSetVerificationStatusRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemSetVerificationStatus: (sandboxItemSetVerificationStatusRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxItemSetVerificationStatus", "sandboxItemSetVerificationStatusRequest", sandboxItemSetVerificationStatusRequest);
          const localVarPath = `/sandbox/item/set_verification_status`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxItemSetVerificationStatusRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Save the selected accounts when connecting to the Platypus Oauth institution
         * @summary Save the selected accounts when connecting to the Platypus Oauth institution
         * @param {SandboxOauthSelectAccountsRequest} sandboxOauthSelectAccountsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxOauthSelectAccounts: (sandboxOauthSelectAccountsRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxOauthSelectAccounts", "sandboxOauthSelectAccountsRequest", sandboxOauthSelectAccountsRequest);
          const localVarPath = `/sandbox/oauth/select_accounts`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxOauthSelectAccountsRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/sandbox/payment_profile/reset_login/` forces a Payment Profile into a state where the login is no longer valid. This makes it easy to test update mode for Payment Profile in the Sandbox environment.   After calling `/sandbox/payment_profile/reset_login`, calls to the `/transfer/authorization/create` with the Payment Profile will result in a `decision_rationale` `PAYMENT_PROFILE_LOGIN_REQUIRED`. You can then use update mode for Payment Profile to restore it into a good state.   In order to invoke this endpoint, you must first [create a Payment Profile](https://plaid.com/docs/transfer/add-to-app/#create-a-payment-profile-optional) and [go through the Link flow](https://plaid.com/docs/transfer/add-to-app/#create-a-link-token).
         * @summary Reset the login of a Payment Profile
         * @param {SandboxPaymentProfileResetLoginRequest} sandboxPaymentProfileResetLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxPaymentProfileResetLogin: (sandboxPaymentProfileResetLoginRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxPaymentProfileResetLogin", "sandboxPaymentProfileResetLoginRequest", sandboxPaymentProfileResetLoginRequest);
          const localVarPath = `/sandbox/payment_profile/reset_login`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxPaymentProfileResetLoginRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/payment/simulate` endpoint to simulate various payment events in the Sandbox environment. This endpoint will trigger the corresponding payment status webhook.
         * @summary Simulate a payment event in Sandbox
         * @param {SandboxPaymentSimulateRequest} sandboxPaymentSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxPaymentSimulate: (sandboxPaymentSimulateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxPaymentSimulate", "sandboxPaymentSimulateRequest", sandboxPaymentSimulateRequest);
          const localVarPath = `/sandbox/payment/simulate`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxPaymentSimulateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
         * @summary Create a test Item and processor token
         * @param {SandboxProcessorTokenCreateRequest} sandboxProcessorTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxProcessorTokenCreate: (sandboxProcessorTokenCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxProcessorTokenCreate", "sandboxProcessorTokenCreateRequest", sandboxProcessorTokenCreateRequest);
          const localVarPath = `/sandbox/processor_token/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxProcessorTokenCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data, or with Plaid\'s [pre-populated Sandbox test accounts](https://plaid.com/docs/sandbox/test-credentials/).
         * @summary Create a test Item
         * @param {SandboxPublicTokenCreateRequest} sandboxPublicTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxPublicTokenCreate: (sandboxPublicTokenCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxPublicTokenCreate", "sandboxPublicTokenCreateRequest", sandboxPublicTokenCreateRequest);
          const localVarPath = `/sandbox/public_token/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxPublicTokenCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/transfer/fire_webhook` endpoint to manually trigger a `TRANSFER_EVENTS_UPDATE` webhook in the Sandbox environment.
         * @summary Manually fire a Transfer webhook
         * @param {SandboxTransferFireWebhookRequest} sandboxTransferFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferFireWebhook: (sandboxTransferFireWebhookRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxTransferFireWebhook", "sandboxTransferFireWebhookRequest", sandboxTransferFireWebhookRequest);
          const localVarPath = `/sandbox/transfer/fire_webhook`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxTransferFireWebhookRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/transfer/ledger/deposit/simulate` endpoint to simulate a ledger deposit event in the Sandbox environment.
         * @summary Simulate a ledger deposit event in Sandbox
         * @param {SandboxTransferLedgerDepositSimulateRequest} sandboxTransferLedgerDepositSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferLedgerDepositSimulate: (sandboxTransferLedgerDepositSimulateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxTransferLedgerDepositSimulate", "sandboxTransferLedgerDepositSimulateRequest", sandboxTransferLedgerDepositSimulateRequest);
          const localVarPath = `/sandbox/transfer/ledger/deposit/simulate`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxTransferLedgerDepositSimulateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/transfer/ledger/simulate_available` endpoint to simulate converting pending balance to available balance for all originators in the Sandbox environment.
         * @summary Simulate converting pending balance to available balance
         * @param {SandboxTransferLedgerSimulateAvailableRequest} sandboxTransferLedgerSimulateAvailableRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferLedgerSimulateAvailable: (sandboxTransferLedgerSimulateAvailableRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxTransferLedgerSimulateAvailable", "sandboxTransferLedgerSimulateAvailableRequest", sandboxTransferLedgerSimulateAvailableRequest);
          const localVarPath = `/sandbox/transfer/ledger/simulate_available`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxTransferLedgerSimulateAvailableRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/transfer/ledger/withdraw/simulate` endpoint to simulate a ledger withdraw event in the Sandbox environment.
         * @summary Simulate a ledger withdraw event in Sandbox
         * @param {SandboxTransferLedgerWithdrawSimulateRequest} sandboxTransferLedgerWithdrawSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferLedgerWithdrawSimulate: (sandboxTransferLedgerWithdrawSimulateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxTransferLedgerWithdrawSimulate", "sandboxTransferLedgerWithdrawSimulateRequest", sandboxTransferLedgerWithdrawSimulateRequest);
          const localVarPath = `/sandbox/transfer/ledger/withdraw/simulate`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxTransferLedgerWithdrawSimulateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/transfer/refund/simulate` endpoint to simulate a refund event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
         * @summary Simulate a refund event in Sandbox
         * @param {SandboxTransferRefundSimulateRequest} sandboxTransferRefundSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferRefundSimulate: (sandboxTransferRefundSimulateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxTransferRefundSimulate", "sandboxTransferRefundSimulateRequest", sandboxTransferRefundSimulateRequest);
          const localVarPath = `/sandbox/transfer/refund/simulate`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxTransferRefundSimulateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
         * @summary Trigger the creation of a repayment
         * @param {SandboxTransferRepaymentSimulateRequest} sandboxTransferRepaymentSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferRepaymentSimulate: (sandboxTransferRepaymentSimulateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxTransferRepaymentSimulate", "sandboxTransferRepaymentSimulateRequest", sandboxTransferRepaymentSimulateRequest);
          const localVarPath = `/sandbox/transfer/repayment/simulate`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxTransferRepaymentSimulateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
         * @summary Simulate a transfer event in Sandbox
         * @param {SandboxTransferSimulateRequest} sandboxTransferSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferSimulate: (sandboxTransferSimulateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxTransferSimulate", "sandboxTransferSimulateRequest", sandboxTransferSimulateRequest);
          const localVarPath = `/sandbox/transfer/simulate`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxTransferSimulateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all transfers with a sweep status of `swept` will become `swept_settled`, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `returned` transfers with a sweep status of `swept` will become `return_swept`.
         * @summary Simulate creating a sweep
         * @param {SandboxTransferSweepSimulateRequest} sandboxTransferSweepSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferSweepSimulate: (sandboxTransferSweepSimulateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxTransferSweepSimulate", "sandboxTransferSweepSimulateRequest", sandboxTransferSweepSimulateRequest);
          const localVarPath = `/sandbox/transfer/sweep/simulate`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxTransferSweepSimulateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/transfer/test_clock/advance` endpoint to advance a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. A test clock can be advanced by incrementing `virtual_time`, but may never go back to a lower `virtual_time`.  If a test clock is advanced, we will simulate the changes that ought to occur during the time that elapsed.  For example, a client creates a weekly recurring transfer with a test clock set at t. When the client advances the test clock by setting `virtual_time` = t + 15 days, 2 new originations should be created, along with the webhook events.  The advancement of the test clock from its current `virtual_time` should be limited such that there are no more than 20 originations resulting from the advance operation on each `recurring_transfer` associated with the `test_clock`.  For example, if the recurring transfer associated with this test clock originates once every 4 weeks, you can advance the `virtual_time` up to 80 weeks on each API call.
         * @summary Advance a test clock
         * @param {SandboxTransferTestClockAdvanceRequest} sandboxTransferTestClockAdvanceRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockAdvance: (sandboxTransferTestClockAdvanceRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxTransferTestClockAdvance", "sandboxTransferTestClockAdvanceRequest", sandboxTransferTestClockAdvanceRequest);
          const localVarPath = `/sandbox/transfer/test_clock/advance`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxTransferTestClockAdvanceRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/transfer/test_clock/create` endpoint to create a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. Test clocks are used for testing recurring transfers in Sandbox.  A test clock can be associated with up to 5 recurring transfers.
         * @summary Create a test clock
         * @param {SandboxTransferTestClockCreateRequest} sandboxTransferTestClockCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockCreate: (sandboxTransferTestClockCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxTransferTestClockCreate", "sandboxTransferTestClockCreateRequest", sandboxTransferTestClockCreateRequest);
          const localVarPath = `/sandbox/transfer/test_clock/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxTransferTestClockCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/transfer/test_clock/get` endpoint to get a `test_clock` in the Sandbox environment.
         * @summary Get a test clock
         * @param {SandboxTransferTestClockGetRequest} sandboxTransferTestClockGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockGet: (sandboxTransferTestClockGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxTransferTestClockGet", "sandboxTransferTestClockGetRequest", sandboxTransferTestClockGetRequest);
          const localVarPath = `/sandbox/transfer/test_clock/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxTransferTestClockGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/sandbox/transfer/test_clock/list` endpoint to see a list of all your test clocks in the Sandbox environment, by ascending `virtual_time`. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired test clocks.
         * @summary List test clocks
         * @param {SandboxTransferTestClockListRequest} sandboxTransferTestClockListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockList: (sandboxTransferTestClockListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxTransferTestClockList", "sandboxTransferTestClockListRequest", sandboxTransferTestClockListRequest);
          const localVarPath = `/sandbox/transfer/test_clock/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxTransferTestClockListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/sandbox/user/reset_login/` functions the same as `/sandbox/item/reset_login`, but will modify Items related to a User. This endpoint forces each Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/user/reset_login`, You can then use Plaid Link update mode to restore Items associated with the User to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
         * @summary Force item(s) for a Sandbox User into an error state
         * @param {SandboxUserResetLoginRequest} sandboxUserResetLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxUserResetLogin: (sandboxUserResetLoginRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sandboxUserResetLogin", "sandboxUserResetLoginRequest", sandboxUserResetLoginRequest);
          const localVarPath = `/sandbox/user/reset_login`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sandboxUserResetLoginRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Any Plaid experience a user sees such as connecting a bank account, verifying identity, or sharing a credit report is considered a session. Today, most sessions happen through Link and the token to start these Link session is a link token created and configured via `link/token/create`. Sessions are a higher level abstraction where configuration primarily happens in Plaid Dashboard.  Depending on the template id provided, the session may a Link session, specified by a Link token, or may be another experience in the future. A primary benefit is that configuration changes can be done in Dashboard with no code changes required.  Currently, this endpoint is only supported for Layer templates and Link but is reserved in the future to initialize other end-user Plaid experiences. The returned Link token is used as an parameter when initializing the Link SDK. For more details, see the [Link flow overview](https://plaid.com/docs/link/#link-flow-overview).
         * @summary Create a Session Token
         * @param {SessionTokenCreateRequest} sessionTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionTokenCreate: (sessionTokenCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("sessionTokenCreate", "sessionTokenCreateRequest", sessionTokenCreateRequest);
          const localVarPath = `/session/token/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(sessionTokenCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated.
         * @summary Report whether you initiated an ACH transaction
         * @param {SignalDecisionReportRequest} signalDecisionReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalDecisionReport: (signalDecisionReportRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("signalDecisionReport", "signalDecisionReportRequest", signalDecisionReportRequest);
          const localVarPath = `/signal/decision/report`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(signalDecisionReportRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to the error documentation on [Item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time.
         * @summary Evaluate a planned ACH transaction
         * @param {SignalEvaluateRequest} signalEvaluateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalEvaluate: (signalEvaluateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("signalEvaluate", "signalEvaluateRequest", signalEvaluateRequest);
          const localVarPath = `/signal/evaluate`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(signalEvaluateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * When an Item is not initialized with Signal, call `/signal/prepare` to opt-in that Item to the Signal data collection process, developing a Signal score. This should be done on Items where Signal was added in the `additional_consented_products` array but not in the `products`, `optional_products`, or `required_if_supported_products` array. If `/signal/prepare` is skipped on an Item that is not initialized with Signal, the initial call to `/signal/evaluate` on that Item will be less accurate, because Signal will have access to less data for computing the Signal score.  If run on an Item that is already initialized with Signal, this endpoint will return a 200 response and will not modify the Item.
         * @summary Opt-in an Item to Signal
         * @param {SignalPrepareRequest} signalPrepareRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalPrepare: (signalPrepareRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("signalPrepare", "signalPrepareRequest", signalPrepareRequest);
          const localVarPath = `/signal/prepare`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(signalPrepareRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
         * @summary Report a return for an ACH transaction
         * @param {SignalReturnReportRequest} signalReturnReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalReturnReport: (signalReturnReportRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("signalReturnReport", "signalReturnReportRequest", signalReturnReportRequest);
          const localVarPath = `/signal/return/report`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(signalReturnReportRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use `/signal/schedule` to schedule a planned ACH transaction.
         * @summary Schedule a planned ACH transaction
         * @param {SignalScheduleRequest} signalScheduleRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalSchedule: (signalScheduleRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("signalSchedule", "signalScheduleRequest", signalScheduleRequest);
          const localVarPath = `/signal/schedule`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(signalScheduleRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/statements/download` endpoint retrieves a single statement PDF in binary format.  The response will contain a `Plaid-Content-Hash` header containing a SHA 256 checksum of the statement. This can be used to verify that the file being sent by Plaid is the same file that was downloaded to your system.
         * @summary Retrieve a single statement.
         * @param {StatementsDownloadRequest} statementsDownloadRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statementsDownload: (statementsDownloadRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("statementsDownload", "statementsDownloadRequest", statementsDownloadRequest);
          const localVarPath = `/statements/download`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(statementsDownloadRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/statements/list` endpoint retrieves a list of all statements associated with an item.
         * @summary Retrieve a list of all statements associated with an item.
         * @param {StatementsListRequest} statementsListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statementsList: (statementsListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("statementsList", "statementsListRequest", statementsListRequest);
          const localVarPath = `/statements/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(statementsListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/statements/refresh` initiates an on-demand extraction to fetch the statements for the provided dates.
         * @summary Refresh statements data.
         * @param {StatementsRefreshRequest} statementsRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statementsRefresh: (statementsRefreshRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("statementsRefresh", "statementsRefreshRequest", statementsRefreshRequest);
          const localVarPath = `/statements/refresh`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(statementsRefreshRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/beta/transactions/v1/enhance` endpoint enriches raw transaction data provided directly by clients.  The product is currently in beta.
         * @summary enhance locally-held transaction data
         * @param {TransactionsEnhanceGetRequest} transactionsEnhanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsEnhance: (transactionsEnhanceGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transactionsEnhance", "transactionsEnhanceGetRequest", transactionsEnhanceGetRequest);
          const localVarPath = `/beta/transactions/v1/enhance`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsEnhanceGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transactions/enrich` endpoint enriches raw transaction data generated by your own banking products or retrieved from other non-Plaid sources.
         * @summary Enrich locally-held transaction data
         * @param {TransactionsEnrichRequest} transactionsEnrichRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsEnrich: (transactionsEnrichRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transactionsEnrich", "transactionsEnrichRequest", transactionsEnrichRequest);
          const localVarPath = `/transactions/enrich`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsEnrichRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Note: All new implementations are encouraged to use `/transactions/sync` rather than `/transactions/get`. `/transactions/sync` provides the same functionality as `/transactions/get` and improves developer ease-of-use for handling transactions updates.  The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To find out when the Item was last updated, use the [Item Debugger](https://plaid.com/docs/account/activity/#troubleshooting-with-item-debugger) or call `/item/get`; the `item.status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn\'t. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
         * @summary Get transaction data
         * @param {TransactionsGetRequest} transactionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsGet: (transactionsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transactionsGet", "transactionsGetRequest", transactionsGetRequest);
          const localVarPath = `/transactions/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on an Item that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/transactions/get` or `/transactions/sync`).   When using Recurring Transactions, for best results, make sure to use the [`days_requested`](https://plaid.com/docs/api/link/#link-token-create-request-transactions-days-requested) parameter to request at least 180 days of history when initializing Items with Transactions. Once all historical transactions have been fetched, call `/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.
         * @summary Fetch recurring transaction streams
         * @param {TransactionsRecurringGetRequest} transactionsRecurringGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRecurringGet: (transactionsRecurringGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transactionsRecurringGet", "transactionsRecurringGetRequest", transactionsRecurringGetRequest);
          const localVarPath = `/transactions/recurring/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsRecurringGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/transactions/refresh` is an optional endpoint that initiates an on-demand extraction to fetch the newest transactions for an Item. The on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Transactions-enabled Item. The Item must already have Transactions added as a product in order to call `/transactions/refresh`.  If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/transactions/sync` and `/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get` or `/transactions/sync`.  Note that the `/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) non-depository accounts and will result in a `PRODUCTS_NOT_SUPPORTED` error if called on an Item that contains only non-depository accounts from that institution.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/transactions/refresh` is offered as an optional add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh transaction data
         * @param {TransactionsRefreshRequest} transactionsRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRefresh: (transactionsRefreshRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transactionsRefresh", "transactionsRefreshRequest", transactionsRefreshRequest);
          const localVarPath = `/transactions/refresh`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsRefreshRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transactions/rules/v1/create` endpoint creates transaction categorization rules.  Rules will be applied on the Item\'s transactions returned in `/transactions/get` response.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
         * @summary Create transaction category rule
         * @param {TransactionsRulesCreateRequest} transactionsRulesCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesCreate: (transactionsRulesCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transactionsRulesCreate", "transactionsRulesCreateRequest", transactionsRulesCreateRequest);
          const localVarPath = `/beta/transactions/rules/v1/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsRulesCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transactions/rules/v1/list` returns a list of transaction rules created for the Item associated with the access token.
         * @summary Return a list of rules created for the Item associated with the access token.
         * @param {TransactionsRulesListRequest} transactionsRulesListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesList: (transactionsRulesListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transactionsRulesList", "transactionsRulesListRequest", transactionsRulesListRequest);
          const localVarPath = `/beta/transactions/rules/v1/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsRulesListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transactions/rules/v1/remove` endpoint is used to remove a transaction rule.
         * @summary Remove transaction rule
         * @param {TransactionsRulesRemoveRequest} transactionsRulesRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesRemove: (transactionsRulesRemoveRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transactionsRulesRemove", "transactionsRulesRemoveRequest", transactionsRulesRemoveRequest);
          const localVarPath = `/beta/transactions/rules/v1/remove`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsRulesRemoveRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transactions/sync` endpoint retrieves transactions associated with an Item and can fetch updates using a cursor to track which updates have already been seen.  For important instructions on integrating with `/transactions/sync`, see the [Transactions integration overview](https://plaid.com/docs/transactions/#integration-overview). If you are migrating from an existing integration using `/transactions/get`, see the [Transactions Sync migration guide](https://plaid.com/docs/transactions/sync-migration/).  This endpoint supports `credit`, `depository`, and some `loan`-type accounts (only those with account subtype `student`). For `investments` accounts, use `/investments/transactions/get` instead.   When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/transactions/sync` fails when retrieving a paginated update (e.g due to the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error), the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  If transactions data is not yet available for the Item, which can happen if the Item was not initialized with transactions during the `/link/token/create` call or if `/transactions/sync` was called within a few seconds of Item creation, `/transactions/sync` will return empty transactions arrays.   Plaid typically checks for new transactions data between one and four times per day, depending on the institution. To find out when transactions were last updated for an Item, use the [Item Debugger](https://plaid.com/docs/account/activity/#troubleshooting-with-item-debugger) or call `/item/get`; the `item.status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/transactions/refresh` endpoint.  To be alerted when new transactions are available, listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.
         * @summary Get incremental transaction updates on an Item
         * @param {TransactionsSyncRequest} transactionsSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsSync: (transactionsSyncRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transactionsSync", "transactionsSyncRequest", transactionsSyncRequest);
          const localVarPath = `/transactions/sync`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsSyncRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/beta/transactions/user_insights/v1/get` gets user insights for clients who have enriched data with `/transactions/enrich`.  The product is currently in beta.
         * @summary Obtain user insights based on transactions sent through /transactions/enrich
         * @param {TransactionsUserInsightsGetRequest} transactionsUserInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsUserInsightsGet: (transactionsUserInsightsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transactionsUserInsightsGet", "transactionsUserInsightsGetRequest", transactionsUserInsightsGetRequest);
          const localVarPath = `/beta/transactions/user_insights/v1/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transactionsUserInsightsGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/authorization/cancel` endpoint to cancel a transfer authorization. A transfer authorization is eligible for cancellation if it has not yet been used to create a transfer.
         * @summary Cancel a transfer authorization
         * @param {TransferAuthorizationCancelRequest} transferAuthorizationCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferAuthorizationCancel: (transferAuthorizationCancelRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferAuthorizationCancel", "transferAuthorizationCancelRequest", transferAuthorizationCancelRequest);
          const localVarPath = `/transfer/authorization/cancel`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferAuthorizationCancelRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/authorization/create` endpoint to authorize a transfer. This endpoint must be called prior to calling `/transfer/create`. The transfer authorization will expire if not used after one hour. (You can contact your account manager to change the default authorization lifetime.)   There are four possible outcomes to calling this endpoint:     - If the `authorization.decision` in the response is `declined`, the proposed transfer has failed the risk check and you cannot proceed with the transfer.     - If the `authorization.decision` is `user_action_required`, additional user input is needed, usually to fix a broken bank connection, before Plaid can properly assess the risk. You need to launch Link in update mode to complete the required user action. When calling `/link/token/create` to get a new Link token, instead of providing `access_token` in the request, you should set [`transfer.authorization_id`](https://plaid.com/docs/api/link/#link-token-create-request-transfer-authorization-id) as the `authorization.id`. After the Link flow is completed, you may re-attempt the authorization.    - If the `authorization.decision` is `approved`, and the `authorization.rationale_code` is `null`, the transfer has passed the risk check and you can proceed to call `/transfer/create`.      - If the `authorization.decision` is `approved` and the `authorization.rationale_code` is non-`null`, the risk check could not be run: you may proceed with the transfer, but should perform your own risk evaluation. For more details, see the response schema.  In Plaid\'s Sandbox environment the decisions will be returned as follows:    - To approve a transfer with `null` rationale code, make an authorization request with an `amount` less than the available balance in the account.    - To approve a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To get an authorization decision of `user_action_required`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).    - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.
         * @summary Create a transfer authorization
         * @param {TransferAuthorizationCreateRequest} transferAuthorizationCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferAuthorizationCreate: (transferAuthorizationCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferAuthorizationCreate", "transferAuthorizationCreateRequest", transferAuthorizationCreateRequest);
          const localVarPath = `/transfer/authorization/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferAuthorizationCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * (Deprecated) Use the `/transfer/balance/get` endpoint to view a balance held with Plaid.
         * @summary (Deprecated) Retrieve a balance held with Plaid
         * @param {TransferBalanceGetRequest} transferBalanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferBalanceGet: (transferBalanceGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferBalanceGet", "transferBalanceGetRequest", transferBalanceGetRequest);
          const localVarPath = `/transfer/balance/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferBalanceGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancellation if the `cancellable` property returned by `/transfer/get` is `true`.
         * @summary Cancel a transfer
         * @param {TransferCancelRequest} transferCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCancel: (transferCancelRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferCancel", "transferCancelRequest", transferCancelRequest);
          const localVarPath = `/transfer/cancel`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferCancelRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/capabilities/get` endpoint to determine the RTP eligibility information of an account to be used with Transfer. This endpoint works on all Transfer-capable Items, including those created by `/transfer/migrate_account`. To simulate RTP eligibility in Sandbox, log in using the username `user_good` and password `pass_good` and use the first two checking and savings accounts in the \"First Platypus Bank\" institution (ending in 0000 or 1111), which will return `true`. Any other account will return `false`.
         * @summary Get RTP eligibility information of a transfer
         * @param {TransferCapabilitiesGetRequest} transferCapabilitiesGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCapabilitiesGet: (transferCapabilitiesGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferCapabilitiesGet", "transferCapabilitiesGetRequest", transferCapabilitiesGetRequest);
          const localVarPath = `/transfer/capabilities/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferCapabilitiesGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/configuration/get` endpoint to view your transfer product configurations.
         * @summary Get transfer product configuration
         * @param {TransferConfigurationGetRequest} transferConfigurationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferConfigurationGet: (transferConfigurationGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferConfigurationGet", "transferConfigurationGetRequest", transferConfigurationGetRequest);
          const localVarPath = `/transfer/configuration/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferConfigurationGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/create` endpoint to initiate a new transfer. This endpoint is retryable and idempotent; if a transfer with the provided `transfer_id` has already been created, it will return the transfer details without creating a new transfer. A transfer may still be created if a 500 error is returned; to detect this scenario, use [Transfer events](https://plaid.com/docs/transfer/reconciling-transfers/).
         * @summary Create a transfer
         * @param {TransferCreateRequest} transferCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCreate: (transferCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferCreate", "transferCreateRequest", transferCreateRequest);
          const localVarPath = `/transfer/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Third-party sender customers can use `/transfer/diligence/document/upload` endpoint to upload a document on behalf of its end customer (i.e. originator) to Plaid. You’ll need to send a request of type multipart/form-data. You must provide the `client_id` in the `PLAID-CLIENT-ID` header and `secret` in the `PLAID-SECRET` header.
         * @summary Upload transfer diligence document on behalf of the originator
         * @param {TransferDiligenceDocumentUploadRequest} transferDiligenceDocumentUploadRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferDiligenceDocumentUpload: (transferDiligenceDocumentUploadRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferDiligenceDocumentUpload", "transferDiligenceDocumentUploadRequest", transferDiligenceDocumentUploadRequest);
          const localVarPath = `/transfer/diligence/document/upload`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferDiligenceDocumentUploadRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/diligence/submit` endpoint to submit transfer diligence on behalf of the originator (i.e., the end customer).
         * @summary Submit transfer diligence on behalf of the originator
         * @param {TransferDiligenceSubmitRequest} transferDiligenceSubmitRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferDiligenceSubmit: (transferDiligenceSubmitRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferDiligenceSubmit", "transferDiligenceSubmitRequest", transferDiligenceSubmitRequest);
          const localVarPath = `/transfer/diligence/submit`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferDiligenceSubmitRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.
         * @summary List transfer events
         * @param {TransferEventListRequest} transferEventListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferEventList: (transferEventListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferEventList", "transferEventListRequest", transferEventListRequest);
          const localVarPath = `/transfer/event/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferEventListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.
         * @summary Sync transfer events
         * @param {TransferEventSyncRequest} transferEventSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferEventSync: (transferEventSyncRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferEventSync", "transferEventSyncRequest", transferEventSyncRequest);
          const localVarPath = `/transfer/event/sync`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferEventSyncRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transfer/get` endpoint fetches information about the transfer corresponding to the given `transfer_id` or `authorization_id`. One of `transfer_id` or `authorization_id` must be populated but not both.
         * @summary Retrieve a transfer
         * @param {TransferGetRequest} transferGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferGet: (transferGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferGet", "transferGetRequest", transferGetRequest);
          const localVarPath = `/transfer/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.
         * @summary Create a transfer intent object to invoke the Transfer UI
         * @param {TransferIntentCreateRequest} transferIntentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferIntentCreate: (transferIntentCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferIntentCreate", "transferIntentCreateRequest", transferIntentCreateRequest);
          const localVarPath = `/transfer/intent/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferIntentCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.
         * @summary Retrieve more information about a transfer intent
         * @param {TransferIntentGetRequest} transferIntentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferIntentGet: (transferIntentGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferIntentGet", "transferIntentGetRequest", transferIntentGetRequest);
          const localVarPath = `/transfer/intent/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferIntentGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/ledger/deposit` endpoint to deposit funds into Plaid Ledger.
         * @summary Deposit funds into a Plaid Ledger balance
         * @param {TransferLedgerDepositRequest} transferLedgerDepositRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferLedgerDeposit: (transferLedgerDepositRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferLedgerDeposit", "transferLedgerDepositRequest", transferLedgerDepositRequest);
          const localVarPath = `/transfer/ledger/deposit`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferLedgerDepositRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/ledger/distribute` endpoint to move available balance between the ledgers of the platform and one of its originators.
         * @summary Move available balance between the ledgers of the platform and one of its originators
         * @param {TransferLedgerDistributeRequest} transferLedgerDistributeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferLedgerDistribute: (transferLedgerDistributeRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferLedgerDistribute", "transferLedgerDistributeRequest", transferLedgerDistributeRequest);
          const localVarPath = `/transfer/ledger/distribute`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferLedgerDistributeRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/ledger/get` endpoint to view a balance on the ledger held with Plaid.
         * @summary Retrieve Plaid Ledger balance
         * @param {TransferLedgerGetRequest} transferLedgerGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferLedgerGet: (transferLedgerGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferLedgerGet", "transferLedgerGetRequest", transferLedgerGetRequest);
          const localVarPath = `/transfer/ledger/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferLedgerGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/ledger/withdraw` endpoint to withdraw funds from a Plaid Ledger balance.
         * @summary Withdraw funds from a Plaid Ledger balance
         * @param {TransferLedgerWithdrawRequest} transferLedgerWithdrawRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferLedgerWithdraw: (transferLedgerWithdrawRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferLedgerWithdraw", "transferLedgerWithdrawRequest", transferLedgerWithdrawRequest);
          const localVarPath = `/transfer/ledger/withdraw`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferLedgerWithdrawRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers.
         * @summary List transfers
         * @param {TransferListRequest} transferListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferList: (transferListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferList", "transferListRequest", transferListRequest);
          const localVarPath = `/transfer/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/metrics/get` endpoint to view your transfer product usage metrics.
         * @summary Get transfer product usage metrics
         * @param {TransferMetricsGetRequest} transferMetricsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferMetricsGet: (transferMetricsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferMetricsGet", "transferMetricsGetRequest", transferMetricsGetRequest);
          const localVarPath = `/transfer/metrics/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferMetricsGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * As an alternative to adding Items via Link, you can also use the `/transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items. This endpoint is also required when adding an Item for use with wire transfers; if you intend to create wire transfers on this account, you must provide `wire_routing_number`. Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
         * @summary Migrate account into Transfers
         * @param {TransferMigrateAccountRequest} transferMigrateAccountRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferMigrateAccount: (transferMigrateAccountRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferMigrateAccount", "transferMigrateAccountRequest", transferMigrateAccountRequest);
          const localVarPath = `/transfer/migrate_account`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferMigrateAccountRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/originator/create` endpoint to create a new originator and return an `originator_client_id`.
         * @summary Create a new originator
         * @param {TransferOriginatorCreateRequest} transferOriginatorCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOriginatorCreate: (transferOriginatorCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferOriginatorCreate", "transferOriginatorCreateRequest", transferOriginatorCreateRequest);
          const localVarPath = `/transfer/originator/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferOriginatorCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/originator/funding_account/update` endpoint to update the funding account associated with the originator.
         * @summary Update the funding account associated with the originator
         * @param {TransferOriginatorFundingAccountUpdateRequest} transferOriginatorFundingAccountUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOriginatorFundingAccountUpdate: (transferOriginatorFundingAccountUpdateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferOriginatorFundingAccountUpdate", "transferOriginatorFundingAccountUpdateRequest", transferOriginatorFundingAccountUpdateRequest);
          const localVarPath = `/transfer/originator/funding_account/update`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferOriginatorFundingAccountUpdateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transfer/originator/get` endpoint gets status updates for an originator\'s onboarding process. This information is also available via the Transfer page on the Plaid dashboard.
         * @summary Get status of an originator\'s onboarding
         * @param {TransferOriginatorGetRequest} transferOriginatorGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOriginatorGet: (transferOriginatorGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferOriginatorGet", "transferOriginatorGetRequest", transferOriginatorGetRequest);
          const localVarPath = `/transfer/originator/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferOriginatorGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transfer/originator/list` endpoint gets status updates for all of your originators\' onboarding. This information is also available via the Plaid dashboard.
         * @summary Get status of all originators\' onboarding
         * @param {TransferOriginatorListRequest} transferOriginatorListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOriginatorList: (transferOriginatorListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferOriginatorList", "transferOriginatorListRequest", transferOriginatorListRequest);
          const localVarPath = `/transfer/originator/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferOriginatorListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transfer/platform/originator/create` endpoint allows gathering information about the originator specific to the Scaled Platform Transfer offering, including the originator\'s agreement to legal terms required before accepting any further information related to the originator.
         * @summary Create an originator for scaled platform customers
         * @param {TransferPlatformOriginatorCreateRequest} transferPlatformOriginatorCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferPlatformOriginatorCreate: (transferPlatformOriginatorCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferPlatformOriginatorCreate", "transferPlatformOriginatorCreateRequest", transferPlatformOriginatorCreateRequest);
          const localVarPath = `/transfer/platform/originator/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferPlatformOriginatorCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/platform/person/create` endpoint to create a person record associated with an originator and optionally submit person-specific requirements.
         * @summary Create a person associated with an originator
         * @param {TransferPlatformPersonCreateRequest} transferPlatformPersonCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferPlatformPersonCreate: (transferPlatformPersonCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferPlatformPersonCreate", "transferPlatformPersonCreateRequest", transferPlatformPersonCreateRequest);
          const localVarPath = `/transfer/platform/person/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferPlatformPersonCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transfer/platform/requirement/submit` endpoint allows platforms to submit onboarding requirements for an originator as part of the Scaled Platform Transfer offering.
         * @summary Submit onboarding requirements for Scaled Platform originators
         * @param {TransferPlatformRequirementSubmitRequest} transferPlatformRequirementSubmitRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferPlatformRequirementSubmit: (transferPlatformRequirementSubmitRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferPlatformRequirementSubmit", "transferPlatformRequirementSubmitRequest", transferPlatformRequirementSubmitRequest);
          const localVarPath = `/transfer/platform/requirement/submit`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferPlatformRequirementSubmitRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transfer/questionnaire/create` endpoint generates a Plaid-hosted onboarding UI URL. Redirect the originator to this URL to provide their due diligence information and agree to Plaid’s terms for ACH money movement.
         * @summary Generate a Plaid-hosted onboarding UI URL.
         * @param {TransferQuestionnaireCreateRequest} transferQuestionnaireCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferQuestionnaireCreate: (transferQuestionnaireCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferQuestionnaireCreate", "transferQuestionnaireCreateRequest", transferQuestionnaireCreateRequest);
          const localVarPath = `/transfer/questionnaire/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferQuestionnaireCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/recurring/cancel` endpoint to cancel a recurring transfer.  Scheduled transfer that hasn\'t been submitted to bank will be cancelled.
         * @summary Cancel a recurring transfer.
         * @param {TransferRecurringCancelRequest} transferRecurringCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringCancel: (transferRecurringCancelRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferRecurringCancel", "transferRecurringCancelRequest", transferRecurringCancelRequest);
          const localVarPath = `/transfer/recurring/cancel`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferRecurringCancelRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/recurring/create` endpoint to initiate a new recurring transfer. This capability is not currently supported for Transfer UI or Platform Payments (beta) customers.
         * @summary Create a recurring transfer
         * @param {TransferRecurringCreateRequest} transferRecurringCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringCreate: (transferRecurringCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferRecurringCreate", "transferRecurringCreateRequest", transferRecurringCreateRequest);
          const localVarPath = `/transfer/recurring/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferRecurringCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transfer/recurring/get` fetches information about the recurring transfer corresponding to the given `recurring_transfer_id`.
         * @summary Retrieve a recurring transfer
         * @param {TransferRecurringGetRequest} transferRecurringGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringGet: (transferRecurringGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferRecurringGet", "transferRecurringGetRequest", transferRecurringGetRequest);
          const localVarPath = `/transfer/recurring/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferRecurringGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/recurring/list` endpoint to see a list of all your recurring transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired recurring transfers.
         * @summary List recurring transfers
         * @param {TransferRecurringListRequest} transferRecurringListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringList: (transferRecurringListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferRecurringList", "transferRecurringListRequest", transferRecurringListRequest);
          const localVarPath = `/transfer/recurring/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferRecurringListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/refund/cancel` endpoint to cancel a refund.  A refund is eligible for cancellation if it has not yet been submitted to the payment network.
         * @summary Cancel a refund
         * @param {TransferRefundCancelRequest} transferRefundCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRefundCancel: (transferRefundCancelRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferRefundCancel", "transferRefundCancelRequest", transferRefundCancelRequest);
          const localVarPath = `/transfer/refund/cancel`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferRefundCancelRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Use the `/transfer/refund/create` endpoint to create a refund for a transfer. A transfer can be refunded if the transfer was initiated in the past 180 days.  Refunds come out of the available balance of the ledger used for the original debit transfer. If there are not enough funds in the available balance to cover the refund amount, the refund will be rejected. You can create a refund at any time. Plaid does not impose any hold time on refunds.
         * @summary Create a refund
         * @param {TransferRefundCreateRequest} transferRefundCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRefundCreate: (transferRefundCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferRefundCreate", "transferRefundCreateRequest", transferRefundCreateRequest);
          const localVarPath = `/transfer/refund/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferRefundCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transfer/refund/get` endpoint fetches information about the refund corresponding to the given `refund_id`.
         * @summary Retrieve a refund
         * @param {TransferRefundGetRequest} transferRefundGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRefundGet: (transferRefundGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferRefundGet", "transferRefundGetRequest", transferRefundGetRequest);
          const localVarPath = `/transfer/refund/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferRefundGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.
         * @summary Lists historical repayments
         * @param {TransferRepaymentListRequest} transferRepaymentListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRepaymentList: (transferRepaymentListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferRepaymentList", "transferRepaymentListRequest", transferRepaymentListRequest);
          const localVarPath = `/transfer/repayment/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferRepaymentListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
         * @summary List the returns included in a repayment
         * @param {TransferRepaymentReturnListRequest} transferRepaymentReturnListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRepaymentReturnList: (transferRepaymentReturnListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferRepaymentReturnList", "transferRepaymentReturnListRequest", transferRepaymentReturnListRequest);
          const localVarPath = `/transfer/repayment/return/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferRepaymentReturnListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.
         * @summary Retrieve a sweep
         * @param {TransferSweepGetRequest} transferSweepGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferSweepGet: (transferSweepGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferSweepGet", "transferSweepGetRequest", transferSweepGetRequest);
          const localVarPath = `/transfer/sweep/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferSweepGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.
         * @summary List sweeps
         * @param {TransferSweepListRequest} transferSweepListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferSweepList: (transferSweepListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("transferSweepList", "transferSweepListRequest", transferSweepListRequest);
          const localVarPath = `/transfer/sweep/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(transferSweepListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Returns user permissioned account data including identity and Item access tokens.
         * @summary Retrieve User Account
         * @param {UserAccountSessionGetRequest} userAccountSessionGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userAccountSessionGet: (userAccountSessionGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("userAccountSessionGet", "userAccountSessionGetRequest", userAccountSessionGetRequest);
          const localVarPath = `/user_account/session/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(userAccountSessionGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint should be called for each of your end users before they begin a Plaid Check or Income flow, or a Multi-Item Link flow. This provides you a single token to access all data associated with the user. You should only create one per end user.  The `consumer_report_user_identity` object must be present in order to create a Plaid Check Consumer Report for a user. If it is not provided during the `/user/create` call, it can be added later by calling `/user/update`. Plaid Check Consumer Reports can only be created for US-based users; the user\'s address country must be `US`.  If you call the endpoint multiple times with the same `client_user_id`, the first creation call will succeed and the rest will fail with an error message indicating that the user has been created for the given `client_user_id`.  Ensure that you store the `user_token` along with your user\'s identifier in your database, as it is not possible to retrieve a previously created `user_token`.
         * @summary Create user
         * @param {UserCreateRequest} userCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCreate: (userCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("userCreate", "userCreateRequest", userCreateRequest);
          const localVarPath = `/user/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(userCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Returns Items associated with a User along with their corresponding statuses.
         * @summary Get Items associated with a User
         * @param {UserItemsGetRequest} userItemsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userItemsGet: (userItemsGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("userItemsGet", "userItemsGetRequest", userItemsGetRequest);
          const localVarPath = `/user/items/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(userItemsGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * `/user/remove` deletes a user token and and associated information, including any Items associated with the token.  Any subsequent calls to retrieve information using the same user token will result in an error stating the user does not exist.
         * @summary Remove user
         * @param {UserRemoveRequest} userRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRemove: (userRemoveRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("userRemove", "userRemoveRequest", userRemoveRequest);
          const localVarPath = `/user/remove`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(userRemoveRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint is used to create a third-party user token. This token can be shared with and used by a specified third-party client to access data associated with the user through supported endpoints.  Ensure you store the `third_party_user_token` along with the `user_token` and `third_party_client_id`, as it is not possible to retrieve a previously created `third_party_user_token`.
         * @summary Create a third-party user token
         * @param {UserThirdPartyTokenCreateRequest} userThirdPartyTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userThirdPartyTokenCreate: (userThirdPartyTokenCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("userThirdPartyTokenCreate", "userThirdPartyTokenCreateRequest", userThirdPartyTokenCreateRequest);
          const localVarPath = `/user/third_party_token/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(userThirdPartyTokenCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint is used to delete a third-party user token. Once removed, the token can longer be used to access data associated with the user.   Any subsequent calls to retrieve information using the same third-party user token will result in an error stating the third-party user token does not exist.
         * @summary Remove a third-party user token
         * @param {UserThirdPartyTokenRemoveRequest} userThirdPartyTokenRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userThirdPartyTokenRemove: (userThirdPartyTokenRemoveRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("userThirdPartyTokenRemove", "userThirdPartyTokenRemoveRequest", userThirdPartyTokenRemoveRequest);
          const localVarPath = `/user/third_party_token/remove`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(userThirdPartyTokenRemoveRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint is used to update user information associated with an existing `user_token`. It can also be used to enable an existing `user_token` for use with Consumer Reports by Plaid Check, by adding a `consumer_report_user_identity` object to the user. Plaid Check Consumer Reports can only be created for US-based users; the user\'s address country must be `US`.
         * @summary Update user information
         * @param {UserUpdateRequest} userUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUpdate: (userUpdateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("userUpdate", "userUpdateRequest", userUpdateRequest);
          const localVarPath = `/user/update`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(userUpdateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Create an e-wallet. The response is the newly created e-wallet object.
         * @summary Create an e-wallet
         * @param {WalletCreateRequest} walletCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreate: (walletCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("walletCreate", "walletCreateRequest", walletCreateRequest);
          const localVarPath = `/wallet/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(walletCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Fetch an e-wallet. The response includes the current balance.
         * @summary Fetch an e-wallet
         * @param {WalletGetRequest} walletGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGet: (walletGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("walletGet", "walletGetRequest", walletGetRequest);
          const localVarPath = `/wallet/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(walletGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint lists all e-wallets in descending order of creation.
         * @summary Fetch a list of e-wallets
         * @param {WalletListRequest} walletListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletList: (walletListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("walletList", "walletListRequest", walletListRequest);
          const localVarPath = `/wallet/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(walletListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate transactions, the amount and reference for the transaction. Transactions will settle in seconds to several days, depending on the underlying payment rail.
         * @summary Execute a transaction using an e-wallet
         * @param {WalletTransactionExecuteRequest} walletTransactionExecuteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionExecute: (walletTransactionExecuteRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("walletTransactionExecute", "walletTransactionExecuteRequest", walletTransactionExecuteRequest);
          const localVarPath = `/wallet/transaction/execute`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(walletTransactionExecuteRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Fetch a specific e-wallet transaction
         * @summary Fetch an e-wallet transaction
         * @param {WalletTransactionGetRequest} walletTransactionGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionGet: (walletTransactionGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("walletTransactionGet", "walletTransactionGetRequest", walletTransactionGetRequest);
          const localVarPath = `/wallet/transaction/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(walletTransactionGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time.
         * @summary List e-wallet transactions
         * @param {WalletTransactionListRequest} walletTransactionListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionList: (walletTransactionListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("walletTransactionList", "walletTransactionListRequest", walletTransactionListRequest);
          const localVarPath = `/wallet/transaction/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(walletTransactionListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Create a new entity watchlist screening to check your customer against watchlists defined in the associated entity watchlist program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
         * @summary Create a watchlist screening for an entity
         * @param {WatchlistScreeningEntityCreateRequest} watchlistScreeningEntityCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityCreate: (watchlistScreeningEntityCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningEntityCreate", "watchlistScreeningEntityCreateRequest", watchlistScreeningEntityCreateRequest);
          const localVarPath = `/watchlist_screening/entity/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningEntityCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Retrieve an entity watchlist screening.
         * @summary Get an entity screening
         * @param {WatchlistScreeningEntityGetRequest} watchlistScreeningEntityGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityGet: (watchlistScreeningEntityGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningEntityGet", "watchlistScreeningEntityGetRequest", watchlistScreeningEntityGetRequest);
          const localVarPath = `/watchlist_screening/entity/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningEntityGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * List all changes to the entity watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
         * @summary List history for entity watchlist screenings
         * @param {WatchlistScreeningEntityHistoryListRequest} watchlistScreeningEntityHistoryListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityHistoryList: (watchlistScreeningEntityHistoryListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningEntityHistoryList", "watchlistScreeningEntityHistoryListRequest", watchlistScreeningEntityHistoryListRequest);
          const localVarPath = `/watchlist_screening/entity/history/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningEntityHistoryListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * List all hits for the entity watchlist screening.
         * @summary List hits for entity watchlist screenings
         * @param {WatchlistScreeningEntityHitListRequest} watchlistScreeningEntityHitListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityHitList: (watchlistScreeningEntityHitListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningEntityHitList", "watchlistScreeningEntityHitListRequest", watchlistScreeningEntityHitListRequest);
          const localVarPath = `/watchlist_screening/entity/hit/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningEntityHitListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * List all entity screenings.
         * @summary List entity watchlist screenings
         * @param {WatchlistScreeningEntityListRequest} watchlistScreeningEntityListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityList: (watchlistScreeningEntityListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningEntityList", "watchlistScreeningEntityListRequest", watchlistScreeningEntityListRequest);
          const localVarPath = `/watchlist_screening/entity/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningEntityListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Get an entity watchlist screening program
         * @summary Get entity watchlist screening program
         * @param {WatchlistScreeningEntityProgramGetRequest} watchlistScreeningEntityProgramGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityProgramGet: (watchlistScreeningEntityProgramGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningEntityProgramGet", "watchlistScreeningEntityProgramGetRequest", watchlistScreeningEntityProgramGetRequest);
          const localVarPath = `/watchlist_screening/entity/program/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningEntityProgramGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * List all entity watchlist screening programs
         * @summary List entity watchlist screening programs
         * @param {WatchlistScreeningEntityProgramListRequest} watchlistScreeningEntityProgramListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityProgramList: (watchlistScreeningEntityProgramListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningEntityProgramList", "watchlistScreeningEntityProgramListRequest", watchlistScreeningEntityProgramListRequest);
          const localVarPath = `/watchlist_screening/entity/program/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningEntityProgramListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Create a review for an entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
         * @summary Create a review for an entity watchlist screening
         * @param {WatchlistScreeningEntityReviewCreateRequest} watchlistScreeningEntityReviewCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityReviewCreate: (watchlistScreeningEntityReviewCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningEntityReviewCreate", "watchlistScreeningEntityReviewCreateRequest", watchlistScreeningEntityReviewCreateRequest);
          const localVarPath = `/watchlist_screening/entity/review/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningEntityReviewCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * List all reviews for a particular entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
         * @summary List reviews for entity watchlist screenings
         * @param {WatchlistScreeningEntityReviewListRequest} watchlistScreeningEntityReviewListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityReviewList: (watchlistScreeningEntityReviewListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningEntityReviewList", "watchlistScreeningEntityReviewListRequest", watchlistScreeningEntityReviewListRequest);
          const localVarPath = `/watchlist_screening/entity/review/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningEntityReviewListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Update an entity watchlist screening.
         * @summary Update an entity screening
         * @param {WatchlistScreeningEntityUpdateRequest} watchlistScreeningEntityUpdateRequest The entity screening was successfully updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityUpdate: (watchlistScreeningEntityUpdateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningEntityUpdate", "watchlistScreeningEntityUpdateRequest", watchlistScreeningEntityUpdateRequest);
          const localVarPath = `/watchlist_screening/entity/update`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningEntityUpdateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Create a new Watchlist Screening to check your customer against watchlists defined in the associated Watchlist Program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
         * @summary Create a watchlist screening for a person
         * @param {WatchlistScreeningIndividualCreateRequest} watchlistScreeningIndividualCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualCreate: (watchlistScreeningIndividualCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningIndividualCreate", "watchlistScreeningIndividualCreateRequest", watchlistScreeningIndividualCreateRequest);
          const localVarPath = `/watchlist_screening/individual/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningIndividualCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Retrieve a previously created individual watchlist screening
         * @summary Retrieve an individual watchlist screening
         * @param {WatchlistScreeningIndividualGetRequest} watchlistScreeningIndividualGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualGet: (watchlistScreeningIndividualGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningIndividualGet", "watchlistScreeningIndividualGetRequest", watchlistScreeningIndividualGetRequest);
          const localVarPath = `/watchlist_screening/individual/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningIndividualGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * List all changes to the individual watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
         * @summary List history for individual watchlist screenings
         * @param {WatchlistScreeningIndividualHistoryListRequest} watchlistScreeningIndividualHistoryListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualHistoryList: (watchlistScreeningIndividualHistoryListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningIndividualHistoryList", "watchlistScreeningIndividualHistoryListRequest", watchlistScreeningIndividualHistoryListRequest);
          const localVarPath = `/watchlist_screening/individual/history/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningIndividualHistoryListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * List all hits found by Plaid for a particular individual watchlist screening.
         * @summary List hits for individual watchlist screening
         * @param {WatchlistScreeningIndividualHitListRequest} watchlistScreeningIndividualHitListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualHitList: (watchlistScreeningIndividualHitListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningIndividualHitList", "watchlistScreeningIndividualHitListRequest", watchlistScreeningIndividualHitListRequest);
          const localVarPath = `/watchlist_screening/individual/hit/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningIndividualHitListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * List previously created watchlist screenings for individuals
         * @summary List Individual Watchlist Screenings
         * @param {WatchlistScreeningIndividualListRequest} watchlistScreeningIndividualListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualList: (watchlistScreeningIndividualListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningIndividualList", "watchlistScreeningIndividualListRequest", watchlistScreeningIndividualListRequest);
          const localVarPath = `/watchlist_screening/individual/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningIndividualListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Get an individual watchlist screening program
         * @summary Get individual watchlist screening program
         * @param {WatchlistScreeningIndividualProgramGetRequest} watchlistScreeningIndividualProgramGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualProgramGet: (watchlistScreeningIndividualProgramGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningIndividualProgramGet", "watchlistScreeningIndividualProgramGetRequest", watchlistScreeningIndividualProgramGetRequest);
          const localVarPath = `/watchlist_screening/individual/program/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningIndividualProgramGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * List all individual watchlist screening programs
         * @summary List individual watchlist screening programs
         * @param {WatchlistScreeningIndividualProgramListRequest} watchlistScreeningIndividualProgramListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualProgramList: (watchlistScreeningIndividualProgramListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningIndividualProgramList", "watchlistScreeningIndividualProgramListRequest", watchlistScreeningIndividualProgramListRequest);
          const localVarPath = `/watchlist_screening/individual/program/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningIndividualProgramListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Create a review for the individual watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
         * @summary Create a review for an individual watchlist screening
         * @param {WatchlistScreeningIndividualReviewCreateRequest} watchlistScreeningIndividualReviewCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualReviewCreate: (watchlistScreeningIndividualReviewCreateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningIndividualReviewCreate", "watchlistScreeningIndividualReviewCreateRequest", watchlistScreeningIndividualReviewCreateRequest);
          const localVarPath = `/watchlist_screening/individual/review/create`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningIndividualReviewCreateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * List all reviews for the individual watchlist screening.
         * @summary List reviews for individual watchlist screenings
         * @param {WatchlistScreeningIndividualReviewListRequest} watchlistScreeningIndividualReviewListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualReviewList: (watchlistScreeningIndividualReviewListRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningIndividualReviewList", "watchlistScreeningIndividualReviewListRequest", watchlistScreeningIndividualReviewListRequest);
          const localVarPath = `/watchlist_screening/individual/review/list`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningIndividualReviewListRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Update a specific individual watchlist screening. This endpoint can be used to add additional customer information, correct outdated information, add a reference id, assign the individual to a reviewer, and update which program it is associated with. Please note that you may not update `search_terms` and `status` at the same time since editing `search_terms` may trigger an automatic `status` change.
         * @summary Update individual watchlist screening
         * @param {WatchlistScreeningIndividualUpdateRequest} watchlistScreeningIndividualUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualUpdate: (watchlistScreeningIndividualUpdateRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("watchlistScreeningIndividualUpdate", "watchlistScreeningIndividualUpdateRequest", watchlistScreeningIndividualUpdateRequest);
          const localVarPath = `/watchlist_screening/individual/update`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(watchlistScreeningIndividualUpdateRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
         * @summary Get webhook verification key
         * @param {WebhookVerificationKeyGetRequest} webhookVerificationKeyGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookVerificationKeyGet: (webhookVerificationKeyGetRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("webhookVerificationKeyGet", "webhookVerificationKeyGetRequest", webhookVerificationKeyGetRequest);
          const localVarPath = `/webhook_verification_key/get`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration2) {
            baseOptions = configuration2.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-CLIENT-ID", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "Plaid-Version", configuration2);
          yield common_1.setApiKeyToObject(localVarHeaderParameter, "PLAID-SECRET", configuration2);
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(webhookVerificationKeyGetRequest, localVarRequestOptions, configuration2);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        })
      };
    };
    exports.PlaidApiAxiosParamCreator = PlaidApiAxiosParamCreator;
    var PlaidApiFp = function(configuration2) {
      const localVarAxiosParamCreator = exports.PlaidApiAxiosParamCreator(configuration2);
      return {
        /**
         * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints, such as `/accounts/get`, return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link. As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.
         * @summary Retrieve real-time balance data
         * @param {AccountsBalanceGetRequest} accountsBalanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsBalanceGet(accountsBalanceGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.accountsBalanceGet(accountsBalanceGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance. To return new accounts that were created after the user linked their Item, you can listen for the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link\'s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  `/accounts/get` is free to use and retrieves cached information, rather than extracting fresh information from the institution. The balance returned will reflect the balance at the time of the last successful Item update. If the Item is enabled for a regularly updating product, such as Transactions, Investments, or Liabilities, the balance will typically update about once a day, as long as the Item is healthy. If the Item is enabled only for products that do not frequently update, such as Auth or Identity, balance data may be much older.  For realtime balance information, use the paid endpoint `/accounts/balance/get` instead.
         * @summary Retrieve accounts
         * @param {AccountsGetRequest} accountsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsGet(accountsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.accountsGet(accountsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
         * @summary Retrieve information about a Plaid application
         * @param {ApplicationGetRequest} applicationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationGet(applicationGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.applicationGet(applicationGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
         * @summary Create Asset Report Audit Copy
         * @param {AssetReportAuditCopyCreateRequest} assetReportAuditCopyCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.
         * @summary Retrieve an Asset Report Audit Copy
         * @param {AssetReportAuditCopyGetRequest} assetReportAuditCopyGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyGet(assetReportAuditCopyGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportAuditCopyGet(assetReportAuditCopyGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
         * @summary Remove Asset Report Audit Copy
         * @param {AssetReportAuditCopyRemoveRequest} assetReportAuditCopyRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. The exact amount of time to create the report will vary depending on how many days of history are requested and will typically range from a few seconds to about one minute. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.
         * @summary Create an Asset Report
         * @param {AssetReportCreateRequest} assetReportCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportCreate(assetReportCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportCreate(assetReportCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report\'s data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
         * @summary Filter Asset Report
         * @param {AssetReportFilterRequest} assetReportFilterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportFilter(assetReportFilterRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportFilter(assetReportFilterRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report. To retrieve an Asset Report with Insights, call `/asset_report/get` endpoint with `include_insights` set to `true`.  For latency-sensitive applications, you can optionally call `/asset_report/create` with `options.add_ons` set to `[\"fast_assets\"]`. This will cause Plaid to create two versions of the Asset Report: one with only current and available balance and identity information, and then later on the complete Asset Report. You will receive separate webhooks for each version of the Asset Report.
         * @summary Retrieve an Asset Report
         * @param {AssetReportGetRequest} assetReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportGet(assetReportGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportGet(assetReportGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
         * @summary Retrieve a PDF Asset Report
         * @param {AssetReportPDFGetRequest} assetReportPDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportPdfGet(assetReportPDFGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportPdfGet(assetReportPDFGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * An Asset Report is an immutable snapshot of a user\'s assets. In order to \"refresh\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\"\") for any previously-populated fields you would like set as empty.
         * @summary Refresh an Asset Report
         * @param {AssetReportRefreshRequest} assetReportRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRefresh(assetReportRefreshRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportRefresh(assetReportRefreshRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove access to an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.
         * @summary Delete an Asset Report
         * @param {AssetReportRemoveRequest} assetReportRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRemove(assetReportRemoveRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.assetReportRemove(assetReportRemoveRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item\'s checking, savings, and cash management accounts, along with high-level account data and balances when available.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
         * @summary Retrieve auth data
         * @param {AuthGetRequest} authGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGet(authGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.authGet(authGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
         * @summary Get balance of your Bank Transfer account
         * @param {BankTransferBalanceGetRequest} bankTransferBalanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferBalanceGet(bankTransferBalanceGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferBalanceGet(bankTransferBalanceGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.
         * @summary Cancel a bank transfer
         * @param {BankTransferCancelRequest} bankTransferCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferCancel(bankTransferCancelRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferCancel(bankTransferCancelRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.
         * @summary Create a bank transfer
         * @param {BankTransferCreateRequest} bankTransferCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferCreate(bankTransferCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferCreate(bankTransferCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/bank_transfer/event/list` endpoint to get a list of Plaid-initiated ACH or bank transfer events based on specified filter criteria. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://plaid.com/docs/auth/coverage/microdeposit-events/).
         * @summary List bank transfer events
         * @param {BankTransferEventListRequest} bankTransferEventListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferEventList(bankTransferEventListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferEventList(bankTransferEventListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/bank_transfer/event/sync` allows you to request up to the next 25 Plaid-initiated bank transfer events that happened after a specific `event_id`. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://www.plaid.com/docs/auth/coverage/microdeposit-events/).
         * @summary Sync bank transfer events
         * @param {BankTransferEventSyncRequest} bankTransferEventSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferEventSync(bankTransferEventSyncRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferEventSync(bankTransferEventSyncRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.
         * @summary Retrieve a bank transfer
         * @param {BankTransferGetRequest} bankTransferGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferGet(bankTransferGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferGet(bankTransferGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers.
         * @summary List bank transfers
         * @param {BankTransferListRequest} bankTransferListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferList(bankTransferListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferList(bankTransferListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
         * @summary Migrate account into Bank Transfers
         * @param {BankTransferMigrateAccountRequest} bankTransferMigrateAccountRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferMigrateAccount(bankTransferMigrateAccountRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferMigrateAccount(bankTransferMigrateAccountRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.
         * @summary Retrieve a sweep
         * @param {BankTransferSweepGetRequest} bankTransferSweepGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferSweepGet(bankTransferSweepGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferSweepGet(bankTransferSweepGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.
         * @summary List sweeps
         * @param {BankTransferSweepListRequest} bankTransferSweepListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferSweepList(bankTransferSweepListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.bankTransferSweepList(bankTransferSweepListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use `/beacon/account_risk/v1/evaluate` to get risk insights for a linked account.
         * @summary Evaluate risk of a bank account
         * @param {BeaconAccountRiskEvaluateRequest} beaconAccountRiskEvaluateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconAccountRiskEvaluate(beaconAccountRiskEvaluateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.beaconAccountRiskEvaluate(beaconAccountRiskEvaluateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Returns a Beacon Duplicate for a given Beacon Duplicate id.  A Beacon Duplicate represents a pair of similar Beacon Users within your organization.  Two Beacon User revisions are returned for each Duplicate record in either the `beacon_user1` or `beacon_user2` response fields.  The `analysis` field in the response indicates which fields matched between `beacon_user1` and `beacon_user2`.
         * @summary Get a Beacon Duplicate
         * @param {BeaconDuplicateGetRequest} beaconDuplicateGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconDuplicateGet(beaconDuplicateGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.beaconDuplicateGet(beaconDuplicateGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Create a fraud report for a given Beacon User.
         * @summary Create a Beacon Report
         * @param {BeaconReportCreateRequest} beaconReportCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconReportCreate(beaconReportCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.beaconReportCreate(beaconReportCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Returns a Beacon report for a given Beacon report id.
         * @summary Get a Beacon Report
         * @param {BeaconReportGetRequest} beaconReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconReportGet(beaconReportGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.beaconReportGet(beaconReportGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/beacon/report/list` endpoint to view all Beacon Reports you created for a specific Beacon User. The reports returned by this endpoint are exclusively reports you created for a specific user. A Beacon User can only have one active report at a time, but a new report can be created if a previous report has been deleted. The results from this endpoint are paginated; the `next_cursor` field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the `next_cursor` value as the `cursor` parameter in the next request.
         * @summary List Beacon Reports for a Beacon User
         * @param {BeaconReportListRequest} beaconReportListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconReportList(beaconReportListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.beaconReportList(beaconReportListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Returns a Beacon Report Syndication for a given Beacon Report Syndication id.
         * @summary Get a Beacon Report Syndication
         * @param {BeaconReportSyndicationGetRequest} beaconReportSyndicationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconReportSyndicationGet(beaconReportSyndicationGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.beaconReportSyndicationGet(beaconReportSyndicationGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/beacon/report_syndication/list` endpoint to view all Beacon Reports that have been syndicated to a specific Beacon User. This endpoint returns Beacon Report Syndications which are references to Beacon Reports created either by you, or another Beacon customer, that matched the specified Beacon User. A Beacon User can have multiple active Beacon Report Syndications at once. The results from this endpoint are paginated; the `next_cursor` field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the `next_cursor` value as the `cursor` parameter in the next request.
         * @summary List Beacon Report Syndications for a Beacon User
         * @param {BeaconReportSyndicationListRequest} beaconReportSyndicationListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconReportSyndicationList(beaconReportSyndicationListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.beaconReportSyndicationList(beaconReportSyndicationListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Get Account Insights for all Accounts linked to this Beacon User. The insights for each account are computed based on the information that was last retrieved from the financial institution.
         * @summary Get Account Insights for a Beacon User
         * @param {BeaconUserAccountInsightsGetRequest} beaconUserAccountInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserAccountInsightsGet(beaconUserAccountInsightsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.beaconUserAccountInsightsGet(beaconUserAccountInsightsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Create and scan a Beacon User against your Beacon Program, according to your program\'s settings.  When you submit a new user to `/beacon/user/create`, several checks are performed immediately:    - The user\'s PII (provided within the `user` object) is searched against all other users within the Beacon Program you specified. If a match is found that violates your program\'s \"Duplicate Information Filtering\" settings, the user will be returned with a status of `pending_review`.    - The user\'s PII is also searched against all fraud reports created by your organization across all of your Beacon Programs. If the user\'s data matches a fraud report that your team created, the user will be returned with a status of `rejected`.    - Finally, the user\'s PII is searched against all fraud report shared with the Beacon Network by other companies. If a matching fraud report is found, the user will be returned with a `pending_review` status if your program has enabled automatic flagging based on network fraud.
         * @summary Create a Beacon User
         * @param {BeaconUserCreateRequest} beaconUserCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserCreate(beaconUserCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.beaconUserCreate(beaconUserCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Fetch a Beacon User.  The Beacon User is returned with all of their associated information and a `status` based on the Beacon Network duplicate record and fraud checks.
         * @summary Get a Beacon User
         * @param {BeaconUserGetRequest} beaconUserGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserGet(beaconUserGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.beaconUserGet(beaconUserGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * List all changes to the Beacon User in reverse-chronological order.
         * @summary List a Beacon User\'s history
         * @param {BeaconUserHistoryListRequest} beaconUserHistoryListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserHistoryList(beaconUserHistoryListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.beaconUserHistoryList(beaconUserHistoryListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Update the status of a Beacon User.  When updating a Beacon User\'s status via this endpoint, Plaid validates that the status change is consistent with the related state for this Beacon User. Specifically, we will check:  1. Whether there are any associated Beacon Reports connected to the Beacon User, and 2. Whether there are any confirmed Beacon Report Syndications connected to the Beacon User.  When updating a Beacon User\'s status to \"rejected\", we enforce that either a Beacon Report has been created for the Beacon User or a Beacon Report Syndication has been confirmed. When updating a Beacon User\'s status to \"cleared\", we enforce that there are no active Beacon Reports or confirmed Beacon Report Syndications associated with the user. If you previously created a Beacon Report for this user, you must delete it before updating the Beacon User\'s status to \"cleared\". There are no restrictions on updating a Beacon User\'s status to \"pending_review\".  If these conditions are not met, the request will be rejected with an error explaining the issue.
         * @summary Review a Beacon User
         * @param {BeaconUserReviewRequest} beaconUserReviewRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserReview(beaconUserReviewRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.beaconUserReview(beaconUserReviewRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Update the identity data for a Beacon User in your Beacon Program or add new accounts to the Beacon User.  Similar to `/beacon/user/create`, several checks are performed immediately when you submit an identity data change to `/beacon/user/update`:    - The user\'s updated PII is searched against all other users within the Beacon Program you specified. If a match is found that violates your program\'s \"Duplicate Information Filtering\" settings, the user will be returned with a status of `pending_review`.    - The user\'s updated PII is also searched against all fraud reports created by your organization across all of your Beacon Programs. If the user\'s data matches a fraud report that your team created, the user will be returned with a status of `rejected`.    - Finally, the user\'s PII is searched against all fraud report shared with the Beacon Network by other companies. If a matching fraud report is found, the user will be returned with a `pending_review` status if your program has enabled automatic flagging based on network fraud.  Plaid maintains a version history for each Beacon User, so the Beacon User\'s identity data before and after the update is retained as separate versions.
         * @summary Update the identity data of a Beacon User
         * @param {BeaconUserUpdateRequest} beaconUserUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserUpdate(beaconUserUpdateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.beaconUserUpdate(beaconUserUpdateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/cashflow_report/get` endpoint retrieves transactions data associated with an item. Transactions data is standardized across financial institutions.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift. Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions). Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `cursor` parameters in conjunction with the `has_more` response body field to fetch all available transactions. Note that data isn\'t likely to be immediately available to `/cashflow_report/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with cashflow_report, or if it wasn\'t, upon the first call to /cashflow_report/refresh. To be alerted when transaction data is ready to be fetched, listen for the `CASHFLOW_REPORT_READY` webhook.
         * @summary Gets transaction data in cashflow_report
         * @param {CashflowReportGetRequest} cashflowReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cashflowReportGet(cashflowReportGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.cashflowReportGet(cashflowReportGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/cashflow_report/refresh` is an endpoint that initiates an on-demand extraction to fetch the newest transactions for an item (given an `item_id`). The item must already have Cashflow Report added as a product in order to call `/cashflow_report/refresh`.  After calling `/cashflow_report/refresh`, Plaid will fire a webhook `CASHFLOW_REPORT_READY` alerting clients that new transactions data can then be ingested via `/cashflow_report/get` or the webhook will contain an error code informing there was an error in refreshing transactions data.   Note that the `/cashflow_report/refresh` endpoint is not supported for Capital One (`ins_128026`) non-depository accounts and will result in a `PRODUCTS_NOT_SUPPORTED` error if called on an Item that contains only non-depository accounts from that institution.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but up to 30 seconds or more). If you encounter errors, you may find it necessary to adjust your timeout period for requests.
         * @summary Refresh transaction data in cashflow_report
         * @param {CashflowReportRefreshRequest} cashflowReportRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cashflowReportRefresh(cashflowReportRefreshRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.cashflowReportRefresh(cashflowReportRefreshRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.  All implementations are recommended to use the newer `personal_finance_category` taxonomy instead of the older `category` taxonomy supported by this endpoint. The [`personal_finance_category taxonomy` CSV file](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) is available for download and is not accessible via API.
         * @summary Get categories
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesGet(body, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.categoriesGet(body, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * List a historical log of Item consent events. Consent logs are only available for events occurring on or after November 7, 2024. Up to three years of consent logs will be available via the endpoint.
         * @summary List a historical log of item consent events
         * @param {ConsentEventsGetRequest} consentEventsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consentEventsGet(consentEventsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.consentEventsGet(consentEventsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Retrieves all existing CRB Bank Income and Base reports for the consumer in PDF format.  Response is PDF binary data. The `request_id` is returned in the `Plaid-Request-ID` header.
         * @summary Retrieve a PDF Reports
         * @param {ConsumerReportPDFGetRequest} consumerReportPDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consumerReportPdfGet(consumerReportPDFGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.consumerReportPdfGet(consumerReportPDFGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/cra/bank_income/create` creates a CRA report for income verification
         * @summary Create a CRA report for income verification
         * @param {CraBankIncomeCreateRequest} craBankIncomeCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craBankIncomeCreate(craBankIncomeCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craBankIncomeCreate(craBankIncomeCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/cra/bank_income/get` returns the bank income report(s) for a specified user.
         * @summary Retrieve information from the bank accounts used for income verification
         * @param {CraBankIncomeGetRequest} craBankIncomeGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craBankIncomeGet(craBankIncomeGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craBankIncomeGet(craBankIncomeGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * This endpoint allows you to retrieve the Base Report for your user, allowing you to receive comprehensive bank account and cash flow data. You should call this endpoint after you\'ve received a `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn\'t have sufficient data to generate the base report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.
         * @summary Retrieve a Base Report
         * @param {CraCheckReportBaseReportGetRequest} craCheckReportBaseReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportBaseReportGet(craCheckReportBaseReportGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craCheckReportBaseReportGet(craCheckReportBaseReportGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * This endpoint allows you to retrieve the Cashflow Insights report for your user. You should call this endpoint after you\'ve received the `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn’t have sufficient data to generate the insights, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.  If you did not initialize Link with the `cra_cashflow_insights` product or have generated a report using `/cra/check_report/create`, we will generate the insights when you call this endpoint. In this case, you may optionally provide parameters under `options` to configure which insights you want to receive.
         * @summary Retrieve cash flow insights from your user\'s banking data
         * @param {CraCheckReportCashflowInsightsGetRequest} craCheckReportCashflowInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportCashflowInsightsGet(craCheckReportCashflowInsightsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craCheckReportCashflowInsightsGet(craCheckReportCashflowInsightsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/cra/check_report/create` creates a Consumer Report powered by Plaid Check. You can call this endpoint to create a new report if `consumer_report_permissible_purpose` was omitted during Link token creation. If you did provide a `consumer_report_permissible_purpose` during Link token creation, then Plaid Check will automatically begin creating a Consumer Report once the user completes the Link process, and it is not necessary to call `/cra/check_report/create` before retrieving the report.   `/cra/check_report/create` can also be used to refresh data in an existing report. A Consumer Report will last for 24 hours before expiring; you should call any `/get` endpoints on the report before it expires. If a report expires, you can call `/cra/check_report/create` again to re-generate it. Note that refreshing or regenerating a report is a billable event.
         * @summary Create a Consumer Report
         * @param {CraCheckReportCreateRequest} craCheckReportCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportCreate(craCheckReportCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craCheckReportCreate(craCheckReportCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * This endpoint allows you to retrieve the Income Insights report for your user.  You should call this endpoint after you\'ve received a `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn’t have sufficient data to generate the base report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.
         * @summary Retrieve cash flow information from your user\'s banks
         * @param {CraCheckReportIncomeInsightsGetRequest} craCheckReportIncomeInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportIncomeInsightsGet(craCheckReportIncomeInsightsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craCheckReportIncomeInsightsGet(craCheckReportIncomeInsightsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * This endpoint allows you to retrieve the Network Insights product for your user. You should call this endpoint after you\'ve received the `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn’t have sufficient data to generate the report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.  If you did not initialize Link with the `cra_network_attributes` product or have generated a report using `/cra/check_report/create`, we will generate the attributes when you call this endpoint.
         * @summary Retrieve network attributes for the user
         * @param {CraCheckReportNetworkInsightsGetRequest} craCheckReportNetworkInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportNetworkInsightsGet(craCheckReportNetworkInsightsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craCheckReportNetworkInsightsGet(craCheckReportNetworkInsightsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * This endpoint allows you to retrieve the Partner Insights report for your user. You should call this endpoint after you\'ve received the `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn’t have sufficient data to generate the base report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.  If you did not initialize Link with the `credit_partner_insights` product or have generated a report using `/cra/check_report/create`, we will call our partners to generate the insights when you call this endpoint. In this case, you may optionally provide parameters under `options` to configure which insights you want to receive.
         * @summary Retrieve cash flow insights from partners
         * @param {CraCheckReportPartnerInsightsGetRequest} craCheckReportPartnerInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportPartnerInsightsGet(craCheckReportPartnerInsightsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craCheckReportPartnerInsightsGet(craCheckReportPartnerInsightsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/cra/check_report/pdf/get` retrieves the most recent Consumer Report in PDF format. By default, the most recent Base Report (if it exists) for the user will be returned. To request that the most recent Income Insights report be included in the PDF as well, use the `add-ons` field.
         * @summary Retrieve Consumer Reports as a PDF
         * @param {CraCheckReportPDFGetRequest} craCheckReportPDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportPdfGet(craCheckReportPDFGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craCheckReportPdfGet(craCheckReportPDFGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/cra/loans/applications/register` registers loan applications and decisions.
         * @summary Register loan applications and decisions.
         * @param {CraLoansApplicationsRegisterRequest} craLoansApplicationsRegisterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craLoansApplicationsRegister(craLoansApplicationsRegisterRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craLoansApplicationsRegister(craLoansApplicationsRegisterRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/cra/loans/register` registers a list of loans to their applicants.
         * @summary Register a list of loans to their applicants.
         * @param {CRALoansRegisterRequest} cRALoansRegisterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craLoansRegister(cRALoansRegisterRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craLoansRegister(cRALoansRegisterRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/cra/loans/unregister` indicates the loans have reached a final status and no further updates are expected.
         * @summary Unregister a list of loans.
         * @param {CraLoansUnregisterRequest} craLoansUnregisterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craLoansUnregister(craLoansUnregisterRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craLoansUnregister(craLoansUnregisterRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/cra/loans/update` updates loan information such as the status and payment history.
         * @summary Updates loan data.
         * @param {CraLoansUpdateRequest} craLoansUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craLoansUpdate(craLoansUpdateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craLoansUpdate(craLoansUpdateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * This endpoint allows you to retrieve a Monitoring Insights report by passing in the `user_token` referred to in the webhook you received.
         * @summary Retrieve a Monitoring Insights Report
         * @param {CraMonitoringInsightsGetRequest} craMonitoringInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craMonitoringInsightsGet(craMonitoringInsightsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craMonitoringInsightsGet(craMonitoringInsightsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * This endpoint allows you to subscribe to insights for a user\'s linked CRA items, which are updated every day (best-effort).
         * @summary Subscribe to Monitoring Insights
         * @param {CraMonitoringInsightsSubscribeRequest} craMonitoringInsightsSubscribeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craMonitoringInsightsSubscribe(craMonitoringInsightsSubscribeRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craMonitoringInsightsSubscribe(craMonitoringInsightsSubscribeRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * This endpoint allows you to unsubscribe from previously subscribed Monitoring Insights.
         * @summary Unsubscribe from Monitoring Insights
         * @param {CraMonitoringInsightsUnsubscribeRequest} craMonitoringInsightsUnsubscribeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craMonitoringInsightsUnsubscribe(craMonitoringInsightsUnsubscribeRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craMonitoringInsightsUnsubscribe(craMonitoringInsightsUnsubscribeRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/cra/partner_insights/get` returns cash flow insights for a specified user.
         * @summary Retrieve cash flow insights from the bank accounts used for income verification
         * @param {CraPartnerInsightsGetRequest} craPartnerInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craPartnerInsightsGet(craPartnerInsightsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.craPartnerInsightsGet(craPartnerInsightsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
         * @summary Create payment token
         * @param {PaymentInitiationPaymentTokenCreateRequest} paymentInitiationPaymentTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPaymentToken(paymentInitiationPaymentTokenCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.createPaymentToken(paymentInitiationPaymentTokenCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Asset Report in Freddie Mac\'s JSON format.
         * @summary Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint.
         * @param {{ [key: string]: object; }} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditAssetReportFreddieMacGet(requestBody, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditAssetReportFreddieMacGet(requestBody, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Plaid can create an Audit Copy token of an Asset Report and/or Income Report to share with participating Government Sponsored Entity (GSE). If you participate in the Day 1 Certainty™ program, Plaid can supply an Audit Copy token directly to Fannie Mae on your behalf. An Audit Copy token contains the same underlying data as the Asset Report and/or Income Report (result of /credit/payroll_income/get).  Use the `/credit/audit_copy_token/create` endpoint to create an `audit_copy_token` and then pass that token to the GSE who needs access.
         * @summary Create Asset or Income Report Audit Copy Token
         * @param {CreditAuditCopyTokenCreateRequest} creditAuditCopyTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditAuditCopyTokenCreate(creditAuditCopyTokenCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditAuditCopyTokenCreate(creditAuditCopyTokenCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/credit/audit_copy_token/update` endpoint updates an existing  Audit Copy Token by adding the report tokens in the `report_tokens` field to the `audit_copy_token`. If the Audit Copy Token already contains a report of a certain type, it will be replaced with the token provided in the `report_tokens` field.
         * @summary Update an Audit Copy Token
         * @param {CreditAuditCopyTokenUpdateRequest} creditAuditCopyTokenUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditAuditCopyTokenUpdate(creditAuditCopyTokenUpdateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditAuditCopyTokenUpdate(creditAuditCopyTokenUpdateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/credit/bank_employment/get` returns the employment report(s) derived from bank transaction data for a specified user.
         * @summary Retrieve information from the bank accounts used for employment verification
         * @param {CreditBankEmploymentGetRequest} creditBankEmploymentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankEmploymentGet(creditBankEmploymentGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditBankEmploymentGet(creditBankEmploymentGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/credit/bank_income/get` returns the bank income report(s) for a specified user. A single report corresponds to all institutions linked in a single Link session. To include multiple institutions in a single report, use [Multi-Item Link](https://plaid.com/docs/link/multi-item-link). To return older reports, use the `options.count` field.
         * @summary Retrieve information from the bank accounts used for income verification
         * @param {CreditBankIncomeGetRequest} creditBankIncomeGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomeGet(creditBankIncomeGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditBankIncomeGet(creditBankIncomeGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/credit/bank_income/pdf/get` returns the most recent bank income report for a specified user in PDF format.  A single report corresponds to all institutions linked in a single Link session. To include multiple institutions in a single report, use [Multi-Item Link](https://plaid.com/docs/link/multi-item-link).
         * @summary Retrieve information from the bank accounts used for income verification in PDF format
         * @param {CreditBankIncomePDFGetRequest} creditBankIncomePDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomePdfGet(creditBankIncomePDFGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditBankIncomePdfGet(creditBankIncomePDFGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/credit/bank_income/refresh` refreshes the most recent bank income report data for a specific user. If the most recent bank income report is no longer valid (i.e. deleted), the endpoint will refresh the most recent valid report instead.
         * @summary Refresh a user\'s bank income information
         * @param {CreditBankIncomeRefreshRequest} creditBankIncomeRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomeRefresh(creditBankIncomeRefreshRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditBankIncomeRefresh(creditBankIncomeRefreshRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/credit/bank_income/webhook/update` allows you to subscribe or unsubscribe a user for income webhook notifications. By default, all users start out unsubscribed.  If a user is subscribed, on significant changes to the user\'s income profile, you will receive a `BANK_INCOME_REFRESH_UPDATE` webhook, prompting you to refresh bank income data for the user.
         * @summary Subscribe and unsubscribe to proactive notifications for a user\'s income profile
         * @param {CreditBankIncomeWebhookUpdateRequest} creditBankIncomeWebhookUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomeWebhookUpdate(creditBankIncomeWebhookUpdateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditBankIncomeWebhookUpdate(creditBankIncomeWebhookUpdateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/credit/bank_statements/uploads/get` returns parsed data from bank statements uploaded by users as part of the Document Income flow. If your account is not enabled for Document Parsing, contact your account manager to request access.
         * @summary Retrieve data for a user\'s uploaded bank statements
         * @param {CreditBankStatementsUploadsGetRequest} creditBankStatementsUploadsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankStatementsUploadsGet(creditBankStatementsUploadsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditBankStatementsUploadsGet(creditBankStatementsUploadsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/credit/employment/get` returns a list of items with employment information from a user\'s payroll provider that was verified by an end user.
         * @summary Retrieve a summary of an individual\'s employment information
         * @param {CreditEmploymentGetRequest} creditEmploymentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditEmploymentGet(creditEmploymentGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditEmploymentGet(creditEmploymentGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Verification of Assets and Verification of Employment reports.
         * @summary Retrieve an Asset Report with Freddie Mac format (aka VOA - Verification Of Assets), and a Verification Of Employment (VOE) report if this one is available. Only Freddie Mac can use this endpoint.
         * @param {CreditFreddieMacReportsGetRequest} creditFreddieMacReportsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditFreddieMacReportsGet(creditFreddieMacReportsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditFreddieMacReportsGet(creditFreddieMacReportsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document.
         * @summary Retrieve a user\'s payroll information
         * @param {CreditPayrollIncomeGetRequest} creditPayrollIncomeGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeGet(creditPayrollIncomeGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditPayrollIncomeGet(creditPayrollIncomeGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/credit/payroll_income/parsing_config/update` updates the parsing configuration for a document income verification.
         * @summary Update the parsing configuration for a document income verification
         * @param {{ [key: string]: object; }} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeParsingConfigUpdate(requestBody, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditPayrollIncomeParsingConfigUpdate(requestBody, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/credit/payroll_income/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing `employer` data will increase the chance of receiving a useful result.  When testing in Sandbox, you can control the results by providing special test values in the `employer` and `access_tokens` fields. `employer_good` and `employer_bad` will result in `HIGH` and `LOW` confidence values, respectively. `employer_multi` will result in a `HIGH` confidence with multiple payroll options. Likewise, `access_good` and `access_bad` will result in `HIGH` and `LOW` confidence values, respectively. Any other value for `employer` and `access_tokens` in Sandbox will result in `UNKNOWN` confidence.
         * @summary Check income verification eligibility and optimize conversion
         * @param {CreditPayrollIncomePrecheckRequest} creditPayrollIncomePrecheckRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomePrecheck(creditPayrollIncomePrecheckRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditPayrollIncomePrecheck(creditPayrollIncomePrecheckRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/credit/payroll_income/refresh` refreshes a given digital payroll income verification.
         * @summary Refresh a digital payroll income verification
         * @param {CreditPayrollIncomeRefreshRequest} creditPayrollIncomeRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeRefresh(creditPayrollIncomeRefreshRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditPayrollIncomeRefresh(creditPayrollIncomeRefreshRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/credit/payroll_income/risk_signals/get` can be used as part of the Document Income flow to assess a user-uploaded document for signs of potential fraud or tampering. It returns a risk score for each uploaded document that indicates the likelihood of the document being fraudulent, in addition to details on the individual risk signals contributing to the score.  To trigger risk signal generation for an Item, call `/link/token/create` with `parsing_config` set to include `risk_signals`, or call `/credit/payroll_income/parsing_config/update`. Once risk signal generation has been triggered, `/credit/payroll_income/risk_signals/get` can be called at any time after the `INCOME_VERIFICATION_RISK_SIGNALS` webhook has been fired.  `/credit/payroll_income/risk_signals/get` is offered as an add-on to Document Income and is billed separately. To request access to this endpoint, submit a product access request or contact your Plaid account manager.
         * @summary Retrieve fraud insights for a user\'s manually uploaded document(s).
         * @param {CreditPayrollIncomeRiskSignalsGetRequest} creditPayrollIncomeRiskSignalsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeRiskSignalsGet(creditPayrollIncomeRiskSignalsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditPayrollIncomeRiskSignalsGet(creditPayrollIncomeRiskSignalsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in `/asset_report/create`.  To grant a third party access to an Asset Report, use the `/credit/relay/create` endpoint to create a `relay_token` and then pass that token to your third party. Each third party has its own `secondary_client_id`; for example, `ce5bd328dcd34123456`. You\'ll need to create a separate `relay_token` for each third party that needs access to the report on your behalf.
         * @summary Create a relay token to share an Asset Report with a partner client
         * @param {CreditRelayCreateRequest} creditRelayCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayCreate(creditRelayCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditRelayCreate(creditRelayCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/credit/relay/get` allows third parties to receive a report that was shared with them, using a `relay_token` that was created by the report owner.
         * @summary Retrieve the reports associated with a relay token that was shared with you
         * @param {CreditRelayGetRequest} creditRelayGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayGet(creditRelayGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditRelayGet(creditRelayGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/credit/relay/pdf/get` allows third parties to receive a pdf report that was shared with them, using a `relay_token` that was created by the report owner.  The `/credit/relay/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/credit/relay/pdf/get`, you must first create the Asset Report using `/credit/relay/create` and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/credit/relay/pdf/get` is the PDF binary data. The `request_id` is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
         * @summary Retrieve the pdf reports associated with a relay token that was shared with you (beta)
         * @param {CreditRelayPDFGetRequest} creditRelayPDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayPdfGet(creditRelayPDFGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditRelayPdfGet(creditRelayPDFGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/credit/relay/refresh` endpoint allows third parties to refresh a report that was relayed to them, using a `relay_token` that was created by the report owner. A new report will be created with the original report parameters, but with the most recent data available based on the `days_requested` value of the original report.
         * @summary Refresh a report of a relay token
         * @param {CreditRelayRefreshRequest} creditRelayRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayRefresh(creditRelayRefreshRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditRelayRefresh(creditRelayRefreshRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/credit/relay/remove` endpoint allows you to invalidate a `relay_token`. The third party holding the token will no longer be able to access or refresh the reports which the `relay_token` gives access to. The original report, associated Items, and other relay tokens that provide access to the same report are not affected and will remain accessible after removing the given `relay_token`.
         * @summary Remove relay token
         * @param {CreditRelayRemoveRequest} creditRelayRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayRemove(creditRelayRemoveRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditRelayRemove(creditRelayRemoveRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/credit/audit_copy_token/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Report data and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
         * @summary Remove an Audit Copy token
         * @param {CreditAuditCopyTokenRemoveRequest} creditAuditCopyTokenRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditReportAuditCopyRemove(creditAuditCopyTokenRemoveRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditReportAuditCopyRemove(creditAuditCopyTokenRemoveRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * This endpoint can be used for your end users after they complete the Link flow. This endpoint returns a list of Link sessions that your user completed, where each session includes the results from the Link flow.  These results include details about the Item that was created and some product related metadata (showing, for example, whether the user finished the bank income verification step).
         * @summary Retrieve Link sessions for your user
         * @param {CreditSessionsGetRequest} creditSessionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditSessionsGet(creditSessionsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.creditSessionsGet(creditSessionsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/dashboard_user/get` endpoint provides details (such as email address) about a specific Dashboard user based on the `dashboard_user_id` field, which is returned in the `audit_trail` object of certain Monitor and Beacon endpoints. This can be used to identify the specific reviewer who performed a Dashboard action.
         * @summary Retrieve a dashboard user
         * @param {DashboardUserGetRequest} dashboardUserGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardUserGet(dashboardUserGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.dashboardUserGet(dashboardUserGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/dashboard_user/list` endpoint provides details (such as email address) all Dashboard users associated with your account. This can use used to audit or track the list of reviewers for Monitor, Beacon, and Identity Verification products.
         * @summary List dashboard users
         * @param {DashboardUserListRequest} dashboardUserListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardUserList(dashboardUserListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.dashboardUserList(dashboardUserListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
         * @summary (Deprecated) Create a deposit switch without using Plaid Exchange
         * @param {DepositSwitchAltCreateRequest} depositSwitchAltCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchAltCreate(depositSwitchAltCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.depositSwitchAltCreate(depositSwitchAltCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
         * @summary (Deprecated) Create a deposit switch
         * @param {DepositSwitchCreateRequest} depositSwitchCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchCreate(depositSwitchCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.depositSwitchCreate(depositSwitchCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user\'s direct deposit allocation preferences.
         * @summary (Deprecated) Retrieve a deposit switch
         * @param {DepositSwitchGetRequest} depositSwitchGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchGet(depositSwitchGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.depositSwitchGet(depositSwitchGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes.
         * @summary (Deprecated) Create a deposit switch token
         * @param {DepositSwitchTokenCreateRequest} depositSwitchTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchTokenCreate(depositSwitchTokenCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.depositSwitchTokenCreate(depositSwitchTokenCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/employers/search` allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user\'s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
         * @summary Search employer database
         * @param {EmployersSearchRequest} employersSearchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employersSearch(employersSearchRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.employersSearch(employersSearchRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.  This endpoint has been deprecated; new integrations should use `/credit/employment/get` instead.
         * @summary (Deprecated) Retrieve a summary of an individual\'s employment information
         * @param {EmploymentVerificationGetRequest} employmentVerificationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employmentVerificationGet(employmentVerificationGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.employmentVerificationGet(employmentVerificationGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * A generic webhook receiver endpoint for FDX Event Notifications
         * @summary Webhook receiver for fdx notifications
         * @param {FDXNotification} fDXNotification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fdxNotifications(fDXNotification, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.fdxNotifications(fDXNotification, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Get a specific recipient
         * @summary Get Recipient
         * @param {string} recipientId Recipient Identifier. Uniquely identifies the recipient
         * @param {string} [oAUTHSTATEID] The value that is passed into the OAuth URI \&#39;state\&#39; query parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipient(recipientId, oAUTHSTATEID, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.getRecipient(recipientId, oAUTHSTATEID, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Returns a list of Recipients
         * @summary Get Recipients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipients(options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.getRecipients(options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use `/identity/documents/uploads/get` to retrieve identity details when using [Identity Document Upload](https://plaid.com/docs/identity/identity-document-upload/).
         * @summary Returns uploaded document identity
         * @param {IdentityDocumentsUploadsGetRequest} identityDocumentsUploadsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityDocumentsUploadsGet(identityDocumentsUploadsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.identityDocumentsUploadsGet(identityDocumentsUploadsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  Note: In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
         * @summary Retrieve identity data
         * @param {IdentityGetRequest} identityGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityGet(identityGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.identityGet(identityGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder\'s financial institution.  Fields within the `balances` object will always be null when retrieved by `/identity/match`. Instead, use the free `/accounts/get` endpoint to request balance cached data, or `/accounts/balance/get` for real-time data.
         * @summary Retrieve identity match score
         * @param {IdentityMatchRequest} identityMatchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityMatch(identityMatchRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.identityMatch(identityMatchRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/identity/refresh` is an optional endpoint for users of the Identity product. It initiates an on-demand extraction to fetch the most up to date Identity information from the Financial Institution. This on-demand extraction takes place in addition to the periodic extractions that automatically occur for any Identity-enabled Item. If changes to Identity are discovered after calling `/identity/refresh`, Plaid will fire a webhook [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/identity/#default_update).  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/identity/refresh` is offered as an add-on to Identity and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh identity data
         * @param {IdentityRefreshRequest} identityRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityRefresh(identityRefreshRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.identityRefresh(identityRefreshRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Try to autofill an Identity Verification based of the provided phone number, date of birth and country of residence.
         * @summary Create autofill for an Identity Verification
         * @param {IdentityVerificationAutofillCreateRequest} identityVerificationAutofillCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationAutofillCreate(identityVerificationAutofillCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.identityVerificationAutofillCreate(identityVerificationAutofillCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Create a new Identity Verification for the user specified by the `client_user_id` field. The requirements and behavior of the verification are determined by the `template_id` provided. If you don\'t know whether the associated user already has an active Identity Verification, you can specify `\"is_idempotent\": true` in the request body. With idempotency enabled, a new Identity Verification will only be created if one does not already exist for the associated `client_user_id` and `template_id`. If an Identity Verification is found, it will be returned unmodified with an `200 OK` HTTP status code.  You can also use this endpoint to supply information you already have collected about the user; if any of these fields are specified, the screens prompting the user to enter them will be skipped during the Link flow.
         * @summary Create a new Identity Verification
         * @param {IdentityVerificationCreateRequest} identityVerificationCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationCreate(identityVerificationCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.identityVerificationCreate(identityVerificationCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Retrieve a previously created Identity Verification.
         * @summary Retrieve Identity Verification
         * @param {IdentityVerificationGetRequest} identityVerificationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationGet(identityVerificationGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.identityVerificationGet(identityVerificationGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Filter and list Identity Verifications created by your account
         * @summary List Identity Verifications
         * @param {IdentityVerificationListRequest} identityVerificationListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationList(identityVerificationListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.identityVerificationList(identityVerificationListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Allow a customer to retry their Identity Verification
         * @summary Retry an Identity Verification
         * @param {IdentityVerificationRetryRequest} identityVerificationRetryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationRetry(identityVerificationRetryRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.identityVerificationRetry(identityVerificationRetryRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing.
         * @summary (Deprecated) Create an income verification instance
         * @param {IncomeVerificationCreateRequest} incomeVerificationCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationCreate(incomeVerificationCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.incomeVerificationCreate(incomeVerificationCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The `request_id` is returned in the `Plaid-Request-ID` header.
         * @summary (Deprecated) Download the original documents used for income verification
         * @param {IncomeVerificationDocumentsDownloadRequest} incomeVerificationDocumentsDownloadRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
         * @summary (Deprecated) Retrieve information from the paystubs used for income verification
         * @param {IncomeVerificationPaystubsGetRequest} incomeVerificationPaystubsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/precheck` instead.
         * @summary (Deprecated) Check digital income verification eligibility and optimize conversion
         * @param {IncomeVerificationPrecheckRequest} incomeVerificationPrecheckRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationPrecheck(incomeVerificationPrecheckRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.incomeVerificationPrecheck(incomeVerificationPrecheckRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user\'\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
         * @summary (Deprecated) Retrieve information from the tax documents used for income verification
         * @param {IncomeVerificationTaxformsGetRequest} incomeVerificationTaxformsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationTaxformsGet(incomeVerificationTaxformsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.incomeVerificationTaxformsGet(incomeVerificationTaxformsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
         * @summary Get details of all supported institutions
         * @param {InstitutionsGetRequest} institutionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsGet(institutionsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.institutionsGet(institutionsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
         * @summary Get details of an institution
         * @param {InstitutionsGetByIdRequest} institutionsGetByIdRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsGetById(institutionsGetByIdRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.institutionsGetById(institutionsGetByIdRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
         * @summary Search institutions
         * @param {InstitutionsSearchRequest} institutionsSearchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsSearch(institutionsSearchRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.institutionsSearch(institutionsSearchRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/investments/auth/get` endpoint allows developers to receive user-authorized data to facilitate the transfer of holdings
         * @summary Get data needed to authorize an investments transfer
         * @param {InvestmentsAuthGetRequest} investmentsAuthGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsAuthGet(investmentsAuthGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.investmentsAuthGet(investmentsAuthGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.
         * @summary Get Investment holdings
         * @param {InvestmentsHoldingsGetRequest} investmentsHoldingsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsHoldingsGet(investmentsHoldingsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.investmentsHoldingsGet(investmentsHoldingsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/investments/refresh` is an optional endpoint for users of the Investments product. It initiates an on-demand extraction to fetch the newest investment holdings and transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Investments-enabled Item. If changes to investments are discovered after calling `/investments/refresh`, Plaid will fire webhooks: [`HOLDINGS: DEFAULT_UPDATE`](https://plaid.com/docs/api/products/investments/#holdings-default_update) if any new holdings are detected, and [`INVESTMENTS_TRANSACTIONS: DEFAULT_UPDATE`](https://plaid.com/docs/api/products/investments/#investments_transactions-default_update) if any new investment transactions are detected. This webhook will typically not fire in the Sandbox environment, due to the lack of dynamic investment transactions and holdings data. To test this webhook in Sandbox, call `/sandbox/item/fire_webhook`. Updated holdings and investment transactions can be fetched by calling `/investments/holdings/get` and `/investments/transactions/get`. Note that the `/investments/refresh` endpoint is not supported by all institutions. If called on an Item from an institution that does not support this functionality, it will return a `PRODUCT_NOT_SUPPORTED` error.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/investments/refresh` is offered as an add-on to Investments and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh investment data
         * @param {InvestmentsRefreshRequest} investmentsRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsRefresh(investmentsRefreshRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.investmentsRefresh(investmentsRefreshRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/investments/transactions/get` endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.  Note that Investments does not have a webhook to indicate when initial transaction data has loaded (unless you use the `async_update` option). Instead, if transactions data is not ready when `/investments/transactions/get` is first called, Plaid will wait for the data. For this reason, calling `/investments/transactions/get` immediately after Link may take up to one to two minutes to return.  Data returned by the asynchronous investments extraction flow (when `async_update` is set to true) may not be immediately available to `/investments/transactions/get`. To be alerted when the data is ready to be fetched, listen for the `HISTORICAL_UPDATE` webhook. If no investments history is ready when `/investments/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
         * @summary Get investment transactions
         * @param {InvestmentsTransactionsGetRequest} investmentsTransactionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsTransactionsGet(investmentsTransactionsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.investmentsTransactionsGet(investmentsTransactionsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Retrieve detailed information about a specific `Issue`. This endpoint returns a single `Issue` object.
         * @summary Get an Issue
         * @param {IssuesGetRequest} issuesGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesGet(issuesGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.issuesGet(issuesGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Search for an issue associated with one of the following identifiers:  `item_id`, `link_session_id` or Link session `request_id`.  This endpoint returns a list of `Issue` objects, with an empty list indicating that no issues are associated with the provided identifier. At least one of the identifiers must be provided to perform the search.
         * @summary Search for an Issue
         * @param {IssuesSearchRequest} issuesSearchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesSearch(issuesSearchRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.issuesSearch(issuesSearchRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Allows a user to subscribe to updates on a specific `Issue` using a POST method. Subscribers will receive webhook notifications when the issue status changes, particularly when resolved.
         * @summary Subscribe to an Issue
         * @param {IssuesSubscribeRequest} issuesSubscribeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesSubscribe(issuesSubscribeRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.issuesSubscribe(issuesSubscribeRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`.
         * @summary Invalidate access_token
         * @param {ItemAccessTokenInvalidateRequest} itemAccessTokenInvalidateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * List a historical log of user consent events
         * @summary List a historical log of user consent events
         * @param {ItemActivityListRequest} itemActivityListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemActivityList(itemActivityListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.itemActivityList(itemActivityListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * List a user’s connected applications
         * @summary List a user’s connected applications
         * @param {ItemApplicationListRequest} itemApplicationListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemApplicationList(itemApplicationListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.itemApplicationList(itemApplicationListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Enable consumers to update product access on selected accounts for an application.
         * @summary Update the scopes of access for a particular application
         * @param {ItemApplicationScopesUpdateRequest} itemApplicationScopesUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Unlink a user’s connected application. On an unlink request, Plaid will immediately revoke the Application’s access to the User’s data.  The User will have to redo the OAuth authentication process in order to restore functionality.  This endpoint only removes ongoing data access permissions, therefore the User will need to reach out to the Application itself in order to disable and delete their account and delete any data that the Application already received (if the Application does not do so by default).  This endpoint should be called in real time as the User is unlinking an Application, and should not be batched in order to ensure that the change is reflected as soon as possible.
         * @summary Unlink a user’s connected application
         * @param {ItemApplicationUnlinkRequest} itemApplicationUnlinkRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemApplicationUnlink(itemApplicationUnlinkRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.itemApplicationUnlink(itemApplicationUnlinkRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
         * @summary Create public token
         * @param {ItemPublicTokenCreateRequest} itemPublicTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemCreatePublicToken(itemPublicTokenCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.itemCreatePublicToken(itemPublicTokenCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Returns information about the status of an Item.
         * @summary Retrieve an Item
         * @param {ItemGetRequest} itemGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemGet(itemGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.itemGet(itemGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated.
         * @summary Import Item
         * @param {ItemImportRequest} itemImportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemImport(itemImportRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.itemImport(itemImportRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes. An `access_token` does not expire, but can be revoked by calling `/item/remove`.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
         * @summary Exchange public token for an access token
         * @param {ItemPublicTokenExchangeRequest} itemPublicTokenExchangeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemPublicTokenExchange(itemPublicTokenExchangeRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.itemPublicTokenExchange(itemPublicTokenExchangeRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/item/remove` endpoint allows you to remove an Item. Once removed, the `access_token`, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.   Calling `/item/remove` is a recommended best practice when offboarding users or if a user chooses to disconnect an account linked via Plaid. For subscription products, such as Transactions, Liabilities, and Investments, calling `/item/remove` is required to end subscription billing for the Item. For money movement products such as Auth and Transfer, if the Item is at an institution that uses Tokenized Account Numbers (TANs), such as Chase or PNC, calling `/item/remove` will invalidate the TAN, and subsequent ACH transfer attempts using that TAN will be returned.  In Limited Production, calling `/item/remove` does not impact the number of remaining Limited Production Items you have available.  Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove access to them specifically using the `/asset_report/remove` endpoint.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution\'s OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.
         * @summary Remove an Item
         * @param {ItemRemoveRequest} itemRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemRemove(itemRemoveRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.itemRemove(itemRemoveRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL.
         * @summary Update Webhook URL
         * @param {ItemWebhookUpdateRequest} itemWebhookUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemWebhookUpdate(itemWebhookUpdateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.itemWebhookUpdate(itemWebhookUpdateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/link/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.
         * @summary Retrieve Liabilities data
         * @param {LiabilitiesGetRequest} liabilitiesGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        liabilitiesGet(liabilitiesGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.liabilitiesGet(liabilitiesGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/link_delivery/create` endpoint to create a Hosted Link session.
         * @summary Create Hosted Link session
         * @param {LinkDeliveryCreateRequest} linkDeliveryCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkDeliveryCreate(linkDeliveryCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.linkDeliveryCreate(linkDeliveryCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/link_delivery/get` endpoint to get the status of a Hosted Link session.
         * @summary Get Hosted Link session
         * @param {LinkDeliveryGetRequest} linkDeliveryGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkDeliveryGet(linkDeliveryGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.linkDeliveryGet(linkDeliveryGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Exchange an OAuth `link_correlation_id` for the corresponding `link_token`. The `link_correlation_id` is only available for \'payment_initiation\' products and is provided to the client via the OAuth `redirect_uri` as a query parameter. The `link_correlation_id` is ephemeral and expires in a brief period, after which it can no longer be exchanged for the \'link_token\'.
         * @summary Exchange the Link Correlation Id for a Link Token
         * @param {LinkOAuthCorrelationIdExchangeRequest} linkOAuthCorrelationIdExchangeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkOauthCorrelationIdExchange(linkOAuthCorrelationIdExchangeRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.linkOauthCorrelationIdExchange(linkOAuthCorrelationIdExchangeRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`. For most Plaid products, the `public_token` is saved and exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow. For more details, see the [Link flow overview](https://plaid.com/docs/link/#link-flow-overview).  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the [update mode](https://plaid.com/docs/link/update-mode) flow for tokens with expired credentials, or the Identity Verification flow.
         * @summary Create Link Token
         * @param {LinkTokenCreateRequest} linkTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkTokenCreate(linkTokenCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.linkTokenCreate(linkTokenCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/link/token/get` endpoint gets information about a Link session, including all callbacks fired during the session along with their metadata, including the public token. This endpoint is used with Link flows that don\'t provide a public token via frontend callbacks, such as the [Hosted Link flow](https://plaid.com/docs/link/hosted-link/) and the [Multi-Item Link flow](https://plaid.com/docs/link/multi-item-link/). It also can be useful for debugging purposes.
         * @summary Get Link Token
         * @param {LinkTokenGetRequest} linkTokenGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkTokenGet(linkTokenGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.linkTokenGet(linkTokenGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * This endpoint allows you to retrieve the Network Insights from a list of `access_tokens`.
         * @summary Retrieve network insights for the provided `access_tokens`
         * @param {NetworkInsightsReportGetRequest} networkInsightsReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkInsightsReportGet(networkInsightsReportGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.networkInsightsReportGet(networkInsightsReportGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/network/status/get` endpoint can be used to check whether Plaid has a matching profile for the user. This is useful for determining if a user is eligible for a streamlined experience, such as Layer.  Note: it is strongly recommended to check for Layer eligibility in the frontend. `/network/status/get` should only be used for checking Layer eligibility if a frontend check is not possible for your use case. For instructions on performing a frontend eligibility check, see the [Layer documentation](https://plaid.com/docs/layer/#integration-overview).
         * @summary Check a user\'s Plaid Network status
         * @param {NetworkStatusGetRequest} networkStatusGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkStatusGet(networkStatusGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.networkStatusGet(networkStatusGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/partner/customer/create` endpoint is used by reseller partners to create end customers. To create end customers, it should be called in the Production environment only, even when creating Sandbox API keys. If called in the Sandbox environment, it will return a sample response, but no customer will be created and the API keys will not be valid.
         * @summary Creates a new end customer for a Plaid reseller.
         * @param {PartnerCustomerCreateRequest} partnerCustomerCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerCreate(partnerCustomerCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.partnerCustomerCreate(partnerCustomerCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/partner/customer/enable` endpoint is used by reseller partners to enable an end customer in the full Production environment.
         * @summary Enables a Plaid reseller\'s end customer in the Production environment.
         * @param {PartnerCustomerEnableRequest} partnerCustomerEnableRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerEnable(partnerCustomerEnableRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.partnerCustomerEnable(partnerCustomerEnableRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/partner/customer/get` endpoint is used by reseller partners to retrieve data about a single end customer.
         * @summary Returns a Plaid reseller\'s end customer.
         * @param {PartnerCustomerGetRequest} partnerCustomerGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerGet(partnerCustomerGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.partnerCustomerGet(partnerCustomerGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/partner/customer/oauth_institutions/get` endpoint is used by reseller partners to retrieve OAuth-institution registration information about a single end customer. To learn how to set up a webhook to listen to status update events, visit the [reseller documentation](https://plaid.com/docs/account/resellers/#enabling-end-customers).
         * @summary Returns OAuth-institution registration information for a given end customer.
         * @param {PartnerCustomerOAuthInstitutionsGetRequest} partnerCustomerOAuthInstitutionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerOauthInstitutionsGet(partnerCustomerOAuthInstitutionsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.partnerCustomerOauthInstitutionsGet(partnerCustomerOAuthInstitutionsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/partner/customer/remove` endpoint is used by reseller partners to remove an end customer. Removing an end customer will remove it from view in the Plaid Dashboard and deactivate its API keys. This endpoint can only be used to remove an end customer that has not yet been enabled in full Production.
         * @summary Removes a Plaid reseller\'s end customer.
         * @param {PartnerCustomerRemoveRequest} partnerCustomerRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerRemove(partnerCustomerRemoveRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.partnerCustomerRemove(partnerCustomerRemoveRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/payment_initiation/consent/create` endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with `UNAUTHORISED` status by default and must be authorised by the user before payments can be initiated.  Consents can be limited in time and scope, and have constraints that describe limitations for payments.
         * @summary Create payment consent
         * @param {PaymentInitiationConsentCreateRequest} paymentInitiationConsentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentCreate(paymentInitiationConsentCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationConsentCreate(paymentInitiationConsentCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/payment_initiation/consent/get` endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints.
         * @summary Get payment consent
         * @param {PaymentInitiationConsentGetRequest} paymentInitiationConsentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentGet(paymentInitiationConsentGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationConsentGet(paymentInitiationConsentGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/payment_initiation/consent/payment/execute` endpoint can be used to execute payments using payment consent.
         * @summary Execute a single payment using consent
         * @param {PaymentInitiationConsentPaymentExecuteRequest} paymentInitiationConsentPaymentExecuteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentPaymentExecute(paymentInitiationConsentPaymentExecuteRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationConsentPaymentExecute(paymentInitiationConsentPaymentExecuteRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/payment_initiation/consent/revoke` endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it.
         * @summary Revoke payment consent
         * @param {PaymentInitiationConsentRevokeRequest} paymentInitiationConsentRevokeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentRevoke(paymentInitiationConsentRevokeRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationConsentRevoke(paymentInitiationConsentRevokeRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR, GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency).  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer, GBP-denominated payments will be sent via the Faster Payments network and for non-Eurozone markets typically via the local payment scheme, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer or other local payment schemes will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In Limited Production, payments must be below 5 GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency), and standing orders, variable recurring payments, and Virtual Accounts are not supported.
         * @summary Create a payment
         * @param {PaymentInitiationPaymentCreateRequest} paymentInitiationPaymentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
         * @summary Get payment details
         * @param {PaymentInitiationPaymentGetRequest} paymentInitiationPaymentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.
         * @summary List payments
         * @param {PaymentInitiationPaymentListRequest} paymentInitiationPaymentListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentList(paymentInitiationPaymentListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationPaymentList(paymentInitiationPaymentListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Reverse a settled payment from a Plaid virtual account.  The original payment must be in a settled state to be refunded. To refund partially, specify the amount as part of the request. If the amount is not specified, the refund amount will be equal to all of the remaining payment amount that has not been refunded yet.  The refund will go back to the source account that initiated the payment. The original payment must have been initiated to a Plaid virtual account so that this account can be used to initiate the refund.  Providing counterparty information such as date of birth and address increases  the likelihood of refund being successful without human intervention.
         * @summary Reverse an existing payment
         * @param {PaymentInitiationPaymentReverseRequest} paymentInitiationPaymentReverseRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA) or a non-Eurozone country [supported](https://plaid.com/global) by Plaid. For a standing order (recurring) payment, the recipient must be in the UK.  It is recommended to use `bacs` in the UK and `iban` in EU.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`.
         * @summary Create payment recipient
         * @param {PaymentInitiationRecipientCreateRequest} paymentInitiationRecipientCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Get details about a payment recipient you have previously created.
         * @summary Get payment recipient
         * @param {PaymentInitiationRecipientGetRequest} paymentInitiationRecipientGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.
         * @summary List payment recipients
         * @param {PaymentInitiationRecipientListRequest} paymentInitiationRecipientListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientList(paymentInitiationRecipientListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentInitiationRecipientList(paymentInitiationRecipientListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use `/payment_profile/create` endpoint to create a new payment profile. To initiate the account linking experience, call `/link/token/create` and provide the `payment_profile_token` in the `transfer.payment_profile_token` field. You can then use the `payment_profile_token` when creating transfers using `/transfer/authorization/create` and `/transfer/create`.
         * @summary Create payment profile
         * @param {PaymentProfileCreateRequest} paymentProfileCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentProfileCreate(paymentProfileCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentProfileCreate(paymentProfileCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use `/payment_profile/get` endpoint to get the status of a given Payment Profile.
         * @summary Get payment profile
         * @param {PaymentProfileGetRequest} paymentProfileGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentProfileGet(paymentProfileGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentProfileGet(paymentProfileGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/payment_profile/remove` endpoint to remove a given Payment Profile. Once it’s removed, it can no longer be used to create transfers.
         * @summary Remove payment profile
         * @param {PaymentProfileRemoveRequest} paymentProfileRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentProfileRemove(paymentProfileRemoveRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.paymentProfileRemove(paymentProfileRemoveRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * This endpoint returns the account associated with a given processor token.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, the account balance returned may not be up-to-date; for realtime balance information, use `/processor/balance/get` instead. Note that some information is nullable.
         * @summary Retrieve the account associated with a processor token
         * @param {ProcessorAccountGetRequest} processorAccountGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorAccountGet(processorAccountGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorAccountGet(processorAccountGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
         * @summary Create Apex bank account token
         * @param {ProcessorApexProcessorTokenCreateRequest} processorApexProcessorTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking, savings, or cash management account that\'\'s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.  Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14).
         * @summary Retrieve Auth data
         * @param {ProcessorAuthGetRequest} processorAuthGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorAuthGet(processorAuthGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorAuthGet(processorAuthGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/processor/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached.
         * @summary Retrieve Balance data
         * @param {ProcessorBalanceGetRequest} processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorBalanceGet(processorBalanceGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorBalanceGet(processorBalanceGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor
         * @summary Create a bank transfer as a processor
         * @param {ProcessorBankTransferCreateRequest} processorBankTransferCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorBankTransferCreate(processorBankTransferCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorBankTransferCreate(processorBankTransferCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
         * @summary Retrieve Identity data
         * @param {ProcessorIdentityGetRequest} processorIdentityGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorIdentityGet(processorIdentityGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorIdentityGet(processorIdentityGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/processor/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder\'s financial institution.  Fields within the `balances` object will always be null when retrieved by `/identity/match`. Instead, use the free `/accounts/get` endpoint to request balance cached data, or `/accounts/balance/get` for real-time data.
         * @summary Retrieve identity match score
         * @param {ProcessorIdentityMatchRequest} processorIdentityMatchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorIdentityMatch(processorIdentityMatchRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorIdentityMatch(processorIdentityMatchRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * This endpoint returns the stock position data of the account associated with a given processor token.
         * @summary Retrieve Investment Holdings
         * @param {ProcessorInvestmentsHoldingsGetRequest} processorInvestmentsHoldingsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorInvestmentsHoldingsGet(processorInvestmentsHoldingsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorInvestmentsHoldingsGet(processorInvestmentsHoldingsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/processor/investments/transactions/get` endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for the investment account associated with the processor token.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with the account, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.  Note that Investments does not have a webhook to indicate when initial transaction data has loaded (unless you use the `async_update` option). Instead, if transactions data is not ready when `/processor/investments/transactions/get` is first called, Plaid will wait for the data. For this reason, calling `/processor/investments/transactions/get` immediately after Link may take up to one to two minutes to return.  Data returned by the asynchronous investments extraction flow (when `async_update` is set to true) may not be immediately available to `/processor/investments/transactions/get`. To be alerted when the data is ready to be fetched, listen for the `HISTORICAL_UPDATE` webhook. If no investments history is ready when `/processor/investments/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.  To receive Investments Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
         * @summary Get investment transactions data
         * @param {ProcessorInvestmentsTransactionsGetRequest} processorInvestmentsTransactionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorInvestmentsTransactionsGet(processorInvestmentsTransactionsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorInvestmentsTransactionsGet(processorInvestmentsTransactionsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/processor/liabilities/get` endpoint returns various details about a loan or credit account. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`.  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/processor/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the processor token. This is because Plaid must communicate directly with the institution to retrieve the additional data.
         * @summary Retrieve Liabilities data
         * @param {ProcessorLiabilitiesGetRequest} processorLiabilitiesGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorLiabilitiesGet(processorLiabilitiesGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorLiabilitiesGet(processorLiabilitiesGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * After calling `/processor/signal/evaluate`, call `/processor/signal/decision/report` to report whether the transaction was initiated.  If you are using the [Plaid Transfer product](https://www.plaid.com/docs/transfer) to create transfers, it is not necessary to use this endpoint, as Plaid already knows whether the transfer was initiated.
         * @summary Report whether you initiated an ACH transaction
         * @param {ProcessorSignalDecisionReportRequest} processorSignalDecisionReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorSignalDecisionReport(processorSignalDecisionReportRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorSignalDecisionReport(processorSignalDecisionReportRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use `/processor/signal/evaluate` to evaluate a planned ACH transaction as a processor to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/processor/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to our error documentation on [item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time. To reduce this latency, you can call `/signal/prepare` on the Item before you need to request Signal data.
         * @summary Evaluate a planned ACH transaction
         * @param {ProcessorSignalEvaluateRequest} processorSignalEvaluateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorSignalEvaluate(processorSignalEvaluateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorSignalEvaluate(processorSignalEvaluateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * When a processor token is not initialized with Signal, call `/processor/signal/prepare` to opt-in that processor token to the Signal data collection process, which will improve the accuracy of the Signal score.  If this endpoint is called with a processor token that is already initialized with Signal, it will return a 200 response and will not modify the processor token.
         * @summary Opt-in a processor token to Signal
         * @param {ProcessorSignalPrepareRequest} processorSignalPrepareRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorSignalPrepare(processorSignalPrepareRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorSignalPrepare(processorSignalPrepareRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Call the `/processor/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/processor/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.  If you are using the [Plaid Transfer product](https://www.plaid.com/docs/transfer) to create transfers, it is not necessary to use this endpoint, as Plaid already knows whether the transfer was returned.
         * @summary Report a return for an ACH transaction
         * @param {ProcessorSignalReturnReportRequest} processorSignalReturnReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorSignalReturnReport(processorSignalReturnReportRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorSignalReturnReport(processorSignalReturnReportRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         *  Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).  Note that the Stripe bank account token is a one-time use token. To store bank account information for later use, you can use a Stripe customer object and create an associated bank account from the token, or you can use a Stripe Custom account and create an associated external bank account from the token. This bank account information should work indefinitely, unless the user\'s bank account information changes or they revoke Plaid\'s permissions to access their account. Stripe bank account information cannot be modified once the bank account token has been created. If you ever need to change the bank account details used by Stripe for a specific customer, have the user go through Link again and create a new bank account token from the new `access_token`.  To revoke a bank account token, the entire underlying access token must be revoked using `/item/remove`.
         * @summary Create Stripe bank account token
         * @param {ProcessorStripeBankAccountTokenCreateRequest} processorStripeBankAccountTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Used to create a token suitable for sending to one of Plaid\'s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations. If using multiple processors, multiple different processor tokens can be created for a single access token. Once created, a processor token for a given Item cannot be modified or updated. To revoke the processor\'s access, the entire Item must be deleted by calling `/item/remove`.
         * @summary Create processor token
         * @param {ProcessorTokenCreateRequest} processorTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenCreate(processorTokenCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorTokenCreate(processorTokenCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Used to get a processor token\'s product permissions. The `products` field will be an empty list if the processor can access all available products.
         * @summary Get a processor token\'s product permissions
         * @param {ProcessorTokenPermissionsGetRequest} processorTokenPermissionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenPermissionsGet(processorTokenPermissionsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorTokenPermissionsGet(processorTokenPermissionsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Used to control a processor\'s access to products on the given processor token. By default, a processor will have access to all available products on the corresponding item. To restrict access to a particular set of products, call this endpoint with the desired products. To restore access to all available products, call this endpoint with an empty list. This endpoint can be called multiple times as your needs and your processor\'s needs change.
         * @summary Control a processor\'s access to products
         * @param {ProcessorTokenPermissionsSetRequest} processorTokenPermissionsSetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenPermissionsSet(processorTokenPermissionsSetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorTokenPermissionsSet(processorTokenPermissionsSetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * This endpoint allows you, the processor, to update the webhook URL associated with a processor token. This request triggers a `WEBHOOK_UPDATE_ACKNOWLEDGED` webhook to the newly specified webhook URL.
         * @summary Update a processor token\'s webhook URL
         * @param {ProcessorTokenWebhookUpdateRequest} processorTokenWebhookUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenWebhookUpdate(processorTokenWebhookUpdateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorTokenWebhookUpdate(processorTokenWebhookUpdateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/processor/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/processor/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with a processor token, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/processor/transactions/get` will be the data available for the processor token as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To force Plaid to check for new transactions, you can use the `/processor/transactions/refresh` endpoint.  Note that data may not be immediately available to `/processor/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/processor/transactions/get`, if it wasn\'t. If no transaction history is ready when `/processor/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
         * @summary Get transaction data
         * @param {ProcessorTransactionsGetRequest} processorTransactionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsGet(processorTransactionsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorTransactionsGet(processorTransactionsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/processor/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on a processor token that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/processor/transactions/get` or `/processor/transactions/sync`). Once all historical transactions have been fetched, call `/processor/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/processor/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/processor/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/processor/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
         * @summary Fetch recurring transaction streams
         * @param {ProcessorTransactionsRecurringGetRequest} processorTransactionsRecurringGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsRecurringGet(processorTransactionsRecurringGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorTransactionsRecurringGet(processorTransactionsRecurringGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/processor/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for a processor token. This on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Transactions-enabled processor token. If changes to transactions are discovered after calling `/processor/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/processor/transactions/sync` and `/processor/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/processor/transactions/get` or `/processor/transactions/sync`. Note that the `/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) non-depository accounts and will result in a `PRODUCTS_NOT_SUPPORTED` error if called on an Item that contains only non-depository accounts from that institution.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/processor/transactions/refresh` is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh transaction data
         * @param {ProcessorTransactionsRefreshRequest} processorTransactionsRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsRefresh(processorTransactionsRefreshRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorTransactionsRefresh(processorTransactionsRefreshRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         *  The `/processor/transactions/sync` endpoint retrieves transactions associated with an Item and can fetch updates using a cursor to track which updates have already been seen.  For important instructions on integrating with `/processor/transactions/sync`, see the [Transactions integration overview](https://plaid.com/docs/transactions/#integration-overview). If you are migrating from an existing integration using `/processor/transactions/get`, see the [Transactions Sync migration guide](https://plaid.com/docs/transactions/sync-migration/).  This endpoint supports `credit`, `depository`, and some `loan`-type accounts (only those with account subtype `student`). For `investments` accounts, use `/investments/transactions/get` instead.  When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/processor/transactions/sync` fails when retrieving a paginated update (e.g due to the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error), the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  If transactions data is not yet available for the Item, which can happen if the Item was not initialized with transactions during the `/link/token/create` call or if `/processor/transactions/sync` was called within a few seconds of Item creation, `/processor/transactions/sync` will return empty transactions arrays.   Plaid typically checks for new transactions data between one and four times per day, depending on the institution. To find out when transactions were last updated for an Item, use the [Item Debugger](https://plaid.com/docs/account/activity/#troubleshooting-with-item-debugger) or call `/item/get`; the `item.status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/processor/transactions/refresh` endpoint.  To be alerted when new transactions are available, listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
         * @summary Get incremental transaction updates on a processor token
         * @param {ProcessorTransactionsSyncRequest} processorTransactionsSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsSync(processorTransactionsSyncRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.processorTransactionsSync(processorTransactionsSyncRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/profile/network_status/get` endpoint can be used to check whether Plaid has a matching profile for the user.
         * @summary Check a user\'s Plaid Network status
         * @param {ProfileNetworkStatusGetRequest} profileNetworkStatusGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileNetworkStatusGet(profileNetworkStatusGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.profileNetworkStatusGet(profileNetworkStatusGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/sandbox/bank_income/fire_webhook` endpoint to manually trigger a Bank Income webhook in the Sandbox environment.
         * @summary Manually fire a bank income webhook in sandbox
         * @param {SandboxBankIncomeFireWebhookRequest} sandboxBankIncomeFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxBankIncomeFireWebhook(sandboxBankIncomeFireWebhookRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxBankIncomeFireWebhook(sandboxBankIncomeFireWebhookRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
         * @summary Manually fire a Bank Transfer webhook
         * @param {SandboxBankTransferFireWebhookRequest} sandboxBankTransferFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
         * @summary Simulate a bank transfer event in Sandbox
         * @param {SandboxBankTransferSimulateRequest} sandboxBankTransferSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/sandbox/cra/cashflow_updates/update` endpoint to manually trigger an update for cashflow updates (Monitoring) in the Sandbox environment.
         * @summary Trigger an update for Cashflow Updates
         * @param {SandboxCraCashflowUpdatesUpdateRequest} sandboxCraCashflowUpdatesUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxCraCashflowUpdatesUpdate(sandboxCraCashflowUpdatesUpdateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxCraCashflowUpdatesUpdate(sandboxCraCashflowUpdatesUpdateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/sandbox/income/fire_webhook` endpoint to manually trigger a Payroll or Document Income webhook in the Sandbox environment.
         * @summary Manually fire an Income webhook
         * @param {SandboxIncomeFireWebhookRequest} sandboxIncomeFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks:  `DEFAULT_UPDATE`: Webhook to be fired for a given Sandbox Item simulating a default update event for the respective product as specified with the `webhook_type` in the request body. Valid Sandbox `DEFAULT_UPDATE` webhook types include: `AUTH`, `IDENTITY`, `TRANSACTIONS`, `INVESTMENTS_TRANSACTIONS`, `LIABILITIES`, `HOLDINGS`. If the Item does not support the product, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `NEW_ACCOUNTS_AVAILABLE`: Fired to indicate that a new account is available on the Item and you can launch update mode to request access to it.  `SMS_MICRODEPOSITS_VERIFICATION`: Fired when a given same day micro-deposit item is verified via SMS verification.  `LOGIN_REPAIRED`: Fired when an Item recovers from the `ITEM_LOGIN_REQUIRED` without the user going through update mode in your app.  `PENDING_DISCONNECT`: Fired when an Item will stop working in the near future (e.g. due to a planned bank migration) and must be sent through update mode to continue working.   `RECURRING_TRANSACTIONS_UPDATE`: Recurring Transactions webhook to be fired for a given Sandbox Item. If the Item does not support Recurring Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `SYNC_UPDATES_AVAILABLE`: Transactions webhook to be fired for a given Sandbox Item.  If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `PRODUCT_READY`: Assets webhook to be fired when a given asset report has been successfully generated. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `ERROR`: Assets webhook to be fired when asset report generation has failed. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `USER_PERMISSION_REVOKED`: Indicates an end user has revoked the permission that they previously granted to access an Item. May not always fire upon revocation, as some institutions’ consent portals do not trigger this webhook. Upon receiving this webhook, it is recommended to delete any stored data from Plaid associated with the account or Item.  `USER_ACCOUNT_REVOKED`: Fired when an end user has revoked access to their account on the Data Provider\'s portal. This webhook is currently sent only for Chase and PNC Items, but may be sent in the future for other financial institutions. Upon receiving this webhook, it is recommended to delete any stored data from Plaid associated with the account or Item.  Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production (except for webhooks of type `TRANSFER`).
         * @summary Fire a test webhook
         * @param {SandboxItemFireWebhookRequest} sandboxItemFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemFireWebhook(sandboxItemFireWebhookRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxItemFireWebhook(sandboxItemFireWebhookRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
         * @summary Force a Sandbox Item into an error state
         * @param {SandboxItemResetLoginRequest} sandboxItemResetLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemResetLogin(sandboxItemResetLoginRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxItemResetLogin(sandboxItemResetLoginRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
         * @summary Set verification status for Sandbox account
         * @param {SandboxItemSetVerificationStatusRequest} sandboxItemSetVerificationStatusRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Save the selected accounts when connecting to the Platypus Oauth institution
         * @summary Save the selected accounts when connecting to the Platypus Oauth institution
         * @param {SandboxOauthSelectAccountsRequest} sandboxOauthSelectAccountsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/sandbox/payment_profile/reset_login/` forces a Payment Profile into a state where the login is no longer valid. This makes it easy to test update mode for Payment Profile in the Sandbox environment.   After calling `/sandbox/payment_profile/reset_login`, calls to the `/transfer/authorization/create` with the Payment Profile will result in a `decision_rationale` `PAYMENT_PROFILE_LOGIN_REQUIRED`. You can then use update mode for Payment Profile to restore it into a good state.   In order to invoke this endpoint, you must first [create a Payment Profile](https://plaid.com/docs/transfer/add-to-app/#create-a-payment-profile-optional) and [go through the Link flow](https://plaid.com/docs/transfer/add-to-app/#create-a-link-token).
         * @summary Reset the login of a Payment Profile
         * @param {SandboxPaymentProfileResetLoginRequest} sandboxPaymentProfileResetLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxPaymentProfileResetLogin(sandboxPaymentProfileResetLoginRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxPaymentProfileResetLogin(sandboxPaymentProfileResetLoginRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/sandbox/payment/simulate` endpoint to simulate various payment events in the Sandbox environment. This endpoint will trigger the corresponding payment status webhook.
         * @summary Simulate a payment event in Sandbox
         * @param {SandboxPaymentSimulateRequest} sandboxPaymentSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxPaymentSimulate(sandboxPaymentSimulateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxPaymentSimulate(sandboxPaymentSimulateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
         * @summary Create a test Item and processor token
         * @param {SandboxProcessorTokenCreateRequest} sandboxProcessorTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data, or with Plaid\'s [pre-populated Sandbox test accounts](https://plaid.com/docs/sandbox/test-credentials/).
         * @summary Create a test Item
         * @param {SandboxPublicTokenCreateRequest} sandboxPublicTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/sandbox/transfer/fire_webhook` endpoint to manually trigger a `TRANSFER_EVENTS_UPDATE` webhook in the Sandbox environment.
         * @summary Manually fire a Transfer webhook
         * @param {SandboxTransferFireWebhookRequest} sandboxTransferFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferFireWebhook(sandboxTransferFireWebhookRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxTransferFireWebhook(sandboxTransferFireWebhookRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/sandbox/transfer/ledger/deposit/simulate` endpoint to simulate a ledger deposit event in the Sandbox environment.
         * @summary Simulate a ledger deposit event in Sandbox
         * @param {SandboxTransferLedgerDepositSimulateRequest} sandboxTransferLedgerDepositSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferLedgerDepositSimulate(sandboxTransferLedgerDepositSimulateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxTransferLedgerDepositSimulate(sandboxTransferLedgerDepositSimulateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/sandbox/transfer/ledger/simulate_available` endpoint to simulate converting pending balance to available balance for all originators in the Sandbox environment.
         * @summary Simulate converting pending balance to available balance
         * @param {SandboxTransferLedgerSimulateAvailableRequest} sandboxTransferLedgerSimulateAvailableRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferLedgerSimulateAvailable(sandboxTransferLedgerSimulateAvailableRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxTransferLedgerSimulateAvailable(sandboxTransferLedgerSimulateAvailableRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/sandbox/transfer/ledger/withdraw/simulate` endpoint to simulate a ledger withdraw event in the Sandbox environment.
         * @summary Simulate a ledger withdraw event in Sandbox
         * @param {SandboxTransferLedgerWithdrawSimulateRequest} sandboxTransferLedgerWithdrawSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferLedgerWithdrawSimulate(sandboxTransferLedgerWithdrawSimulateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxTransferLedgerWithdrawSimulate(sandboxTransferLedgerWithdrawSimulateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/sandbox/transfer/refund/simulate` endpoint to simulate a refund event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
         * @summary Simulate a refund event in Sandbox
         * @param {SandboxTransferRefundSimulateRequest} sandboxTransferRefundSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferRefundSimulate(sandboxTransferRefundSimulateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxTransferRefundSimulate(sandboxTransferRefundSimulateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
         * @summary Trigger the creation of a repayment
         * @param {SandboxTransferRepaymentSimulateRequest} sandboxTransferRepaymentSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
         * @summary Simulate a transfer event in Sandbox
         * @param {SandboxTransferSimulateRequest} sandboxTransferSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferSimulate(sandboxTransferSimulateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxTransferSimulate(sandboxTransferSimulateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all transfers with a sweep status of `swept` will become `swept_settled`, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `returned` transfers with a sweep status of `swept` will become `return_swept`.
         * @summary Simulate creating a sweep
         * @param {SandboxTransferSweepSimulateRequest} sandboxTransferSweepSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/sandbox/transfer/test_clock/advance` endpoint to advance a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. A test clock can be advanced by incrementing `virtual_time`, but may never go back to a lower `virtual_time`.  If a test clock is advanced, we will simulate the changes that ought to occur during the time that elapsed.  For example, a client creates a weekly recurring transfer with a test clock set at t. When the client advances the test clock by setting `virtual_time` = t + 15 days, 2 new originations should be created, along with the webhook events.  The advancement of the test clock from its current `virtual_time` should be limited such that there are no more than 20 originations resulting from the advance operation on each `recurring_transfer` associated with the `test_clock`.  For example, if the recurring transfer associated with this test clock originates once every 4 weeks, you can advance the `virtual_time` up to 80 weeks on each API call.
         * @summary Advance a test clock
         * @param {SandboxTransferTestClockAdvanceRequest} sandboxTransferTestClockAdvanceRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockAdvance(sandboxTransferTestClockAdvanceRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxTransferTestClockAdvance(sandboxTransferTestClockAdvanceRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/sandbox/transfer/test_clock/create` endpoint to create a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. Test clocks are used for testing recurring transfers in Sandbox.  A test clock can be associated with up to 5 recurring transfers.
         * @summary Create a test clock
         * @param {SandboxTransferTestClockCreateRequest} sandboxTransferTestClockCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockCreate(sandboxTransferTestClockCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxTransferTestClockCreate(sandboxTransferTestClockCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/sandbox/transfer/test_clock/get` endpoint to get a `test_clock` in the Sandbox environment.
         * @summary Get a test clock
         * @param {SandboxTransferTestClockGetRequest} sandboxTransferTestClockGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockGet(sandboxTransferTestClockGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxTransferTestClockGet(sandboxTransferTestClockGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/sandbox/transfer/test_clock/list` endpoint to see a list of all your test clocks in the Sandbox environment, by ascending `virtual_time`. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired test clocks.
         * @summary List test clocks
         * @param {SandboxTransferTestClockListRequest} sandboxTransferTestClockListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockList(sandboxTransferTestClockListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxTransferTestClockList(sandboxTransferTestClockListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/sandbox/user/reset_login/` functions the same as `/sandbox/item/reset_login`, but will modify Items related to a User. This endpoint forces each Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/user/reset_login`, You can then use Plaid Link update mode to restore Items associated with the User to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
         * @summary Force item(s) for a Sandbox User into an error state
         * @param {SandboxUserResetLoginRequest} sandboxUserResetLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxUserResetLogin(sandboxUserResetLoginRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sandboxUserResetLogin(sandboxUserResetLoginRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Any Plaid experience a user sees such as connecting a bank account, verifying identity, or sharing a credit report is considered a session. Today, most sessions happen through Link and the token to start these Link session is a link token created and configured via `link/token/create`. Sessions are a higher level abstraction where configuration primarily happens in Plaid Dashboard.  Depending on the template id provided, the session may a Link session, specified by a Link token, or may be another experience in the future. A primary benefit is that configuration changes can be done in Dashboard with no code changes required.  Currently, this endpoint is only supported for Layer templates and Link but is reserved in the future to initialize other end-user Plaid experiences. The returned Link token is used as an parameter when initializing the Link SDK. For more details, see the [Link flow overview](https://plaid.com/docs/link/#link-flow-overview).
         * @summary Create a Session Token
         * @param {SessionTokenCreateRequest} sessionTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionTokenCreate(sessionTokenCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.sessionTokenCreate(sessionTokenCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated.
         * @summary Report whether you initiated an ACH transaction
         * @param {SignalDecisionReportRequest} signalDecisionReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalDecisionReport(signalDecisionReportRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.signalDecisionReport(signalDecisionReportRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to the error documentation on [Item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time.
         * @summary Evaluate a planned ACH transaction
         * @param {SignalEvaluateRequest} signalEvaluateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalEvaluate(signalEvaluateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.signalEvaluate(signalEvaluateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * When an Item is not initialized with Signal, call `/signal/prepare` to opt-in that Item to the Signal data collection process, developing a Signal score. This should be done on Items where Signal was added in the `additional_consented_products` array but not in the `products`, `optional_products`, or `required_if_supported_products` array. If `/signal/prepare` is skipped on an Item that is not initialized with Signal, the initial call to `/signal/evaluate` on that Item will be less accurate, because Signal will have access to less data for computing the Signal score.  If run on an Item that is already initialized with Signal, this endpoint will return a 200 response and will not modify the Item.
         * @summary Opt-in an Item to Signal
         * @param {SignalPrepareRequest} signalPrepareRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalPrepare(signalPrepareRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.signalPrepare(signalPrepareRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
         * @summary Report a return for an ACH transaction
         * @param {SignalReturnReportRequest} signalReturnReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalReturnReport(signalReturnReportRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.signalReturnReport(signalReturnReportRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use `/signal/schedule` to schedule a planned ACH transaction.
         * @summary Schedule a planned ACH transaction
         * @param {SignalScheduleRequest} signalScheduleRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalSchedule(signalScheduleRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.signalSchedule(signalScheduleRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/statements/download` endpoint retrieves a single statement PDF in binary format.  The response will contain a `Plaid-Content-Hash` header containing a SHA 256 checksum of the statement. This can be used to verify that the file being sent by Plaid is the same file that was downloaded to your system.
         * @summary Retrieve a single statement.
         * @param {StatementsDownloadRequest} statementsDownloadRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statementsDownload(statementsDownloadRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.statementsDownload(statementsDownloadRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/statements/list` endpoint retrieves a list of all statements associated with an item.
         * @summary Retrieve a list of all statements associated with an item.
         * @param {StatementsListRequest} statementsListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statementsList(statementsListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.statementsList(statementsListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/statements/refresh` initiates an on-demand extraction to fetch the statements for the provided dates.
         * @summary Refresh statements data.
         * @param {StatementsRefreshRequest} statementsRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statementsRefresh(statementsRefreshRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.statementsRefresh(statementsRefreshRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/beta/transactions/v1/enhance` endpoint enriches raw transaction data provided directly by clients.  The product is currently in beta.
         * @summary enhance locally-held transaction data
         * @param {TransactionsEnhanceGetRequest} transactionsEnhanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsEnhance(transactionsEnhanceGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsEnhance(transactionsEnhanceGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/transactions/enrich` endpoint enriches raw transaction data generated by your own banking products or retrieved from other non-Plaid sources.
         * @summary Enrich locally-held transaction data
         * @param {TransactionsEnrichRequest} transactionsEnrichRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsEnrich(transactionsEnrichRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsEnrich(transactionsEnrichRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Note: All new implementations are encouraged to use `/transactions/sync` rather than `/transactions/get`. `/transactions/sync` provides the same functionality as `/transactions/get` and improves developer ease-of-use for handling transactions updates.  The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To find out when the Item was last updated, use the [Item Debugger](https://plaid.com/docs/account/activity/#troubleshooting-with-item-debugger) or call `/item/get`; the `item.status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn\'t. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
         * @summary Get transaction data
         * @param {TransactionsGetRequest} transactionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsGet(transactionsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsGet(transactionsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on an Item that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/transactions/get` or `/transactions/sync`).   When using Recurring Transactions, for best results, make sure to use the [`days_requested`](https://plaid.com/docs/api/link/#link-token-create-request-transactions-days-requested) parameter to request at least 180 days of history when initializing Items with Transactions. Once all historical transactions have been fetched, call `/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.
         * @summary Fetch recurring transaction streams
         * @param {TransactionsRecurringGetRequest} transactionsRecurringGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRecurringGet(transactionsRecurringGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsRecurringGet(transactionsRecurringGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/transactions/refresh` is an optional endpoint that initiates an on-demand extraction to fetch the newest transactions for an Item. The on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Transactions-enabled Item. The Item must already have Transactions added as a product in order to call `/transactions/refresh`.  If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/transactions/sync` and `/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get` or `/transactions/sync`.  Note that the `/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) non-depository accounts and will result in a `PRODUCTS_NOT_SUPPORTED` error if called on an Item that contains only non-depository accounts from that institution.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/transactions/refresh` is offered as an optional add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh transaction data
         * @param {TransactionsRefreshRequest} transactionsRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRefresh(transactionsRefreshRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsRefresh(transactionsRefreshRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/transactions/rules/v1/create` endpoint creates transaction categorization rules.  Rules will be applied on the Item\'s transactions returned in `/transactions/get` response.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
         * @summary Create transaction category rule
         * @param {TransactionsRulesCreateRequest} transactionsRulesCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesCreate(transactionsRulesCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsRulesCreate(transactionsRulesCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/transactions/rules/v1/list` returns a list of transaction rules created for the Item associated with the access token.
         * @summary Return a list of rules created for the Item associated with the access token.
         * @param {TransactionsRulesListRequest} transactionsRulesListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesList(transactionsRulesListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsRulesList(transactionsRulesListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/transactions/rules/v1/remove` endpoint is used to remove a transaction rule.
         * @summary Remove transaction rule
         * @param {TransactionsRulesRemoveRequest} transactionsRulesRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesRemove(transactionsRulesRemoveRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsRulesRemove(transactionsRulesRemoveRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/transactions/sync` endpoint retrieves transactions associated with an Item and can fetch updates using a cursor to track which updates have already been seen.  For important instructions on integrating with `/transactions/sync`, see the [Transactions integration overview](https://plaid.com/docs/transactions/#integration-overview). If you are migrating from an existing integration using `/transactions/get`, see the [Transactions Sync migration guide](https://plaid.com/docs/transactions/sync-migration/).  This endpoint supports `credit`, `depository`, and some `loan`-type accounts (only those with account subtype `student`). For `investments` accounts, use `/investments/transactions/get` instead.   When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/transactions/sync` fails when retrieving a paginated update (e.g due to the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error), the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  If transactions data is not yet available for the Item, which can happen if the Item was not initialized with transactions during the `/link/token/create` call or if `/transactions/sync` was called within a few seconds of Item creation, `/transactions/sync` will return empty transactions arrays.   Plaid typically checks for new transactions data between one and four times per day, depending on the institution. To find out when transactions were last updated for an Item, use the [Item Debugger](https://plaid.com/docs/account/activity/#troubleshooting-with-item-debugger) or call `/item/get`; the `item.status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/transactions/refresh` endpoint.  To be alerted when new transactions are available, listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.
         * @summary Get incremental transaction updates on an Item
         * @param {TransactionsSyncRequest} transactionsSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsSync(transactionsSyncRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsSync(transactionsSyncRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/beta/transactions/user_insights/v1/get` gets user insights for clients who have enriched data with `/transactions/enrich`.  The product is currently in beta.
         * @summary Obtain user insights based on transactions sent through /transactions/enrich
         * @param {TransactionsUserInsightsGetRequest} transactionsUserInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsUserInsightsGet(transactionsUserInsightsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transactionsUserInsightsGet(transactionsUserInsightsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/transfer/authorization/cancel` endpoint to cancel a transfer authorization. A transfer authorization is eligible for cancellation if it has not yet been used to create a transfer.
         * @summary Cancel a transfer authorization
         * @param {TransferAuthorizationCancelRequest} transferAuthorizationCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferAuthorizationCancel(transferAuthorizationCancelRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferAuthorizationCancel(transferAuthorizationCancelRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/transfer/authorization/create` endpoint to authorize a transfer. This endpoint must be called prior to calling `/transfer/create`. The transfer authorization will expire if not used after one hour. (You can contact your account manager to change the default authorization lifetime.)   There are four possible outcomes to calling this endpoint:     - If the `authorization.decision` in the response is `declined`, the proposed transfer has failed the risk check and you cannot proceed with the transfer.     - If the `authorization.decision` is `user_action_required`, additional user input is needed, usually to fix a broken bank connection, before Plaid can properly assess the risk. You need to launch Link in update mode to complete the required user action. When calling `/link/token/create` to get a new Link token, instead of providing `access_token` in the request, you should set [`transfer.authorization_id`](https://plaid.com/docs/api/link/#link-token-create-request-transfer-authorization-id) as the `authorization.id`. After the Link flow is completed, you may re-attempt the authorization.    - If the `authorization.decision` is `approved`, and the `authorization.rationale_code` is `null`, the transfer has passed the risk check and you can proceed to call `/transfer/create`.      - If the `authorization.decision` is `approved` and the `authorization.rationale_code` is non-`null`, the risk check could not be run: you may proceed with the transfer, but should perform your own risk evaluation. For more details, see the response schema.  In Plaid\'s Sandbox environment the decisions will be returned as follows:    - To approve a transfer with `null` rationale code, make an authorization request with an `amount` less than the available balance in the account.    - To approve a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To get an authorization decision of `user_action_required`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).    - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.
         * @summary Create a transfer authorization
         * @param {TransferAuthorizationCreateRequest} transferAuthorizationCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferAuthorizationCreate(transferAuthorizationCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferAuthorizationCreate(transferAuthorizationCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * (Deprecated) Use the `/transfer/balance/get` endpoint to view a balance held with Plaid.
         * @summary (Deprecated) Retrieve a balance held with Plaid
         * @param {TransferBalanceGetRequest} transferBalanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferBalanceGet(transferBalanceGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferBalanceGet(transferBalanceGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancellation if the `cancellable` property returned by `/transfer/get` is `true`.
         * @summary Cancel a transfer
         * @param {TransferCancelRequest} transferCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCancel(transferCancelRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferCancel(transferCancelRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/transfer/capabilities/get` endpoint to determine the RTP eligibility information of an account to be used with Transfer. This endpoint works on all Transfer-capable Items, including those created by `/transfer/migrate_account`. To simulate RTP eligibility in Sandbox, log in using the username `user_good` and password `pass_good` and use the first two checking and savings accounts in the \"First Platypus Bank\" institution (ending in 0000 or 1111), which will return `true`. Any other account will return `false`.
         * @summary Get RTP eligibility information of a transfer
         * @param {TransferCapabilitiesGetRequest} transferCapabilitiesGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCapabilitiesGet(transferCapabilitiesGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferCapabilitiesGet(transferCapabilitiesGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/transfer/configuration/get` endpoint to view your transfer product configurations.
         * @summary Get transfer product configuration
         * @param {TransferConfigurationGetRequest} transferConfigurationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferConfigurationGet(transferConfigurationGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferConfigurationGet(transferConfigurationGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/transfer/create` endpoint to initiate a new transfer. This endpoint is retryable and idempotent; if a transfer with the provided `transfer_id` has already been created, it will return the transfer details without creating a new transfer. A transfer may still be created if a 500 error is returned; to detect this scenario, use [Transfer events](https://plaid.com/docs/transfer/reconciling-transfers/).
         * @summary Create a transfer
         * @param {TransferCreateRequest} transferCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCreate(transferCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferCreate(transferCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Third-party sender customers can use `/transfer/diligence/document/upload` endpoint to upload a document on behalf of its end customer (i.e. originator) to Plaid. You’ll need to send a request of type multipart/form-data. You must provide the `client_id` in the `PLAID-CLIENT-ID` header and `secret` in the `PLAID-SECRET` header.
         * @summary Upload transfer diligence document on behalf of the originator
         * @param {TransferDiligenceDocumentUploadRequest} transferDiligenceDocumentUploadRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferDiligenceDocumentUpload(transferDiligenceDocumentUploadRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferDiligenceDocumentUpload(transferDiligenceDocumentUploadRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/transfer/diligence/submit` endpoint to submit transfer diligence on behalf of the originator (i.e., the end customer).
         * @summary Submit transfer diligence on behalf of the originator
         * @param {TransferDiligenceSubmitRequest} transferDiligenceSubmitRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferDiligenceSubmit(transferDiligenceSubmitRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferDiligenceSubmit(transferDiligenceSubmitRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.
         * @summary List transfer events
         * @param {TransferEventListRequest} transferEventListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferEventList(transferEventListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferEventList(transferEventListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.
         * @summary Sync transfer events
         * @param {TransferEventSyncRequest} transferEventSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferEventSync(transferEventSyncRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferEventSync(transferEventSyncRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/transfer/get` endpoint fetches information about the transfer corresponding to the given `transfer_id` or `authorization_id`. One of `transfer_id` or `authorization_id` must be populated but not both.
         * @summary Retrieve a transfer
         * @param {TransferGetRequest} transferGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferGet(transferGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferGet(transferGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.
         * @summary Create a transfer intent object to invoke the Transfer UI
         * @param {TransferIntentCreateRequest} transferIntentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferIntentCreate(transferIntentCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferIntentCreate(transferIntentCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.
         * @summary Retrieve more information about a transfer intent
         * @param {TransferIntentGetRequest} transferIntentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferIntentGet(transferIntentGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferIntentGet(transferIntentGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/transfer/ledger/deposit` endpoint to deposit funds into Plaid Ledger.
         * @summary Deposit funds into a Plaid Ledger balance
         * @param {TransferLedgerDepositRequest} transferLedgerDepositRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferLedgerDeposit(transferLedgerDepositRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferLedgerDeposit(transferLedgerDepositRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/transfer/ledger/distribute` endpoint to move available balance between the ledgers of the platform and one of its originators.
         * @summary Move available balance between the ledgers of the platform and one of its originators
         * @param {TransferLedgerDistributeRequest} transferLedgerDistributeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferLedgerDistribute(transferLedgerDistributeRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferLedgerDistribute(transferLedgerDistributeRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/transfer/ledger/get` endpoint to view a balance on the ledger held with Plaid.
         * @summary Retrieve Plaid Ledger balance
         * @param {TransferLedgerGetRequest} transferLedgerGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferLedgerGet(transferLedgerGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferLedgerGet(transferLedgerGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/transfer/ledger/withdraw` endpoint to withdraw funds from a Plaid Ledger balance.
         * @summary Withdraw funds from a Plaid Ledger balance
         * @param {TransferLedgerWithdrawRequest} transferLedgerWithdrawRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferLedgerWithdraw(transferLedgerWithdrawRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferLedgerWithdraw(transferLedgerWithdrawRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers.
         * @summary List transfers
         * @param {TransferListRequest} transferListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferList(transferListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferList(transferListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/transfer/metrics/get` endpoint to view your transfer product usage metrics.
         * @summary Get transfer product usage metrics
         * @param {TransferMetricsGetRequest} transferMetricsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferMetricsGet(transferMetricsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferMetricsGet(transferMetricsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * As an alternative to adding Items via Link, you can also use the `/transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items. This endpoint is also required when adding an Item for use with wire transfers; if you intend to create wire transfers on this account, you must provide `wire_routing_number`. Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
         * @summary Migrate account into Transfers
         * @param {TransferMigrateAccountRequest} transferMigrateAccountRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferMigrateAccount(transferMigrateAccountRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferMigrateAccount(transferMigrateAccountRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/transfer/originator/create` endpoint to create a new originator and return an `originator_client_id`.
         * @summary Create a new originator
         * @param {TransferOriginatorCreateRequest} transferOriginatorCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOriginatorCreate(transferOriginatorCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferOriginatorCreate(transferOriginatorCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/transfer/originator/funding_account/update` endpoint to update the funding account associated with the originator.
         * @summary Update the funding account associated with the originator
         * @param {TransferOriginatorFundingAccountUpdateRequest} transferOriginatorFundingAccountUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOriginatorFundingAccountUpdate(transferOriginatorFundingAccountUpdateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferOriginatorFundingAccountUpdate(transferOriginatorFundingAccountUpdateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/transfer/originator/get` endpoint gets status updates for an originator\'s onboarding process. This information is also available via the Transfer page on the Plaid dashboard.
         * @summary Get status of an originator\'s onboarding
         * @param {TransferOriginatorGetRequest} transferOriginatorGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOriginatorGet(transferOriginatorGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferOriginatorGet(transferOriginatorGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/transfer/originator/list` endpoint gets status updates for all of your originators\' onboarding. This information is also available via the Plaid dashboard.
         * @summary Get status of all originators\' onboarding
         * @param {TransferOriginatorListRequest} transferOriginatorListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOriginatorList(transferOriginatorListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferOriginatorList(transferOriginatorListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/transfer/platform/originator/create` endpoint allows gathering information about the originator specific to the Scaled Platform Transfer offering, including the originator\'s agreement to legal terms required before accepting any further information related to the originator.
         * @summary Create an originator for scaled platform customers
         * @param {TransferPlatformOriginatorCreateRequest} transferPlatformOriginatorCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferPlatformOriginatorCreate(transferPlatformOriginatorCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferPlatformOriginatorCreate(transferPlatformOriginatorCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/transfer/platform/person/create` endpoint to create a person record associated with an originator and optionally submit person-specific requirements.
         * @summary Create a person associated with an originator
         * @param {TransferPlatformPersonCreateRequest} transferPlatformPersonCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferPlatformPersonCreate(transferPlatformPersonCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferPlatformPersonCreate(transferPlatformPersonCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/transfer/platform/requirement/submit` endpoint allows platforms to submit onboarding requirements for an originator as part of the Scaled Platform Transfer offering.
         * @summary Submit onboarding requirements for Scaled Platform originators
         * @param {TransferPlatformRequirementSubmitRequest} transferPlatformRequirementSubmitRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferPlatformRequirementSubmit(transferPlatformRequirementSubmitRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferPlatformRequirementSubmit(transferPlatformRequirementSubmitRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/transfer/questionnaire/create` endpoint generates a Plaid-hosted onboarding UI URL. Redirect the originator to this URL to provide their due diligence information and agree to Plaid’s terms for ACH money movement.
         * @summary Generate a Plaid-hosted onboarding UI URL.
         * @param {TransferQuestionnaireCreateRequest} transferQuestionnaireCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferQuestionnaireCreate(transferQuestionnaireCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferQuestionnaireCreate(transferQuestionnaireCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/transfer/recurring/cancel` endpoint to cancel a recurring transfer.  Scheduled transfer that hasn\'t been submitted to bank will be cancelled.
         * @summary Cancel a recurring transfer.
         * @param {TransferRecurringCancelRequest} transferRecurringCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringCancel(transferRecurringCancelRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferRecurringCancel(transferRecurringCancelRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/transfer/recurring/create` endpoint to initiate a new recurring transfer. This capability is not currently supported for Transfer UI or Platform Payments (beta) customers.
         * @summary Create a recurring transfer
         * @param {TransferRecurringCreateRequest} transferRecurringCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringCreate(transferRecurringCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferRecurringCreate(transferRecurringCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/transfer/recurring/get` fetches information about the recurring transfer corresponding to the given `recurring_transfer_id`.
         * @summary Retrieve a recurring transfer
         * @param {TransferRecurringGetRequest} transferRecurringGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringGet(transferRecurringGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferRecurringGet(transferRecurringGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/transfer/recurring/list` endpoint to see a list of all your recurring transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired recurring transfers.
         * @summary List recurring transfers
         * @param {TransferRecurringListRequest} transferRecurringListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringList(transferRecurringListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferRecurringList(transferRecurringListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/transfer/refund/cancel` endpoint to cancel a refund.  A refund is eligible for cancellation if it has not yet been submitted to the payment network.
         * @summary Cancel a refund
         * @param {TransferRefundCancelRequest} transferRefundCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRefundCancel(transferRefundCancelRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferRefundCancel(transferRefundCancelRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Use the `/transfer/refund/create` endpoint to create a refund for a transfer. A transfer can be refunded if the transfer was initiated in the past 180 days.  Refunds come out of the available balance of the ledger used for the original debit transfer. If there are not enough funds in the available balance to cover the refund amount, the refund will be rejected. You can create a refund at any time. Plaid does not impose any hold time on refunds.
         * @summary Create a refund
         * @param {TransferRefundCreateRequest} transferRefundCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRefundCreate(transferRefundCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferRefundCreate(transferRefundCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/transfer/refund/get` endpoint fetches information about the refund corresponding to the given `refund_id`.
         * @summary Retrieve a refund
         * @param {TransferRefundGetRequest} transferRefundGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRefundGet(transferRefundGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferRefundGet(transferRefundGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.
         * @summary Lists historical repayments
         * @param {TransferRepaymentListRequest} transferRepaymentListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRepaymentList(transferRepaymentListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferRepaymentList(transferRepaymentListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
         * @summary List the returns included in a repayment
         * @param {TransferRepaymentReturnListRequest} transferRepaymentReturnListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRepaymentReturnList(transferRepaymentReturnListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferRepaymentReturnList(transferRepaymentReturnListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.
         * @summary Retrieve a sweep
         * @param {TransferSweepGetRequest} transferSweepGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferSweepGet(transferSweepGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferSweepGet(transferSweepGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.
         * @summary List sweeps
         * @param {TransferSweepListRequest} transferSweepListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferSweepList(transferSweepListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.transferSweepList(transferSweepListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Returns user permissioned account data including identity and Item access tokens.
         * @summary Retrieve User Account
         * @param {UserAccountSessionGetRequest} userAccountSessionGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userAccountSessionGet(userAccountSessionGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.userAccountSessionGet(userAccountSessionGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * This endpoint should be called for each of your end users before they begin a Plaid Check or Income flow, or a Multi-Item Link flow. This provides you a single token to access all data associated with the user. You should only create one per end user.  The `consumer_report_user_identity` object must be present in order to create a Plaid Check Consumer Report for a user. If it is not provided during the `/user/create` call, it can be added later by calling `/user/update`. Plaid Check Consumer Reports can only be created for US-based users; the user\'s address country must be `US`.  If you call the endpoint multiple times with the same `client_user_id`, the first creation call will succeed and the rest will fail with an error message indicating that the user has been created for the given `client_user_id`.  Ensure that you store the `user_token` along with your user\'s identifier in your database, as it is not possible to retrieve a previously created `user_token`.
         * @summary Create user
         * @param {UserCreateRequest} userCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCreate(userCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.userCreate(userCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Returns Items associated with a User along with their corresponding statuses.
         * @summary Get Items associated with a User
         * @param {UserItemsGetRequest} userItemsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userItemsGet(userItemsGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.userItemsGet(userItemsGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * `/user/remove` deletes a user token and and associated information, including any Items associated with the token.  Any subsequent calls to retrieve information using the same user token will result in an error stating the user does not exist.
         * @summary Remove user
         * @param {UserRemoveRequest} userRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRemove(userRemoveRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.userRemove(userRemoveRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * This endpoint is used to create a third-party user token. This token can be shared with and used by a specified third-party client to access data associated with the user through supported endpoints.  Ensure you store the `third_party_user_token` along with the `user_token` and `third_party_client_id`, as it is not possible to retrieve a previously created `third_party_user_token`.
         * @summary Create a third-party user token
         * @param {UserThirdPartyTokenCreateRequest} userThirdPartyTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userThirdPartyTokenCreate(userThirdPartyTokenCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.userThirdPartyTokenCreate(userThirdPartyTokenCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * This endpoint is used to delete a third-party user token. Once removed, the token can longer be used to access data associated with the user.   Any subsequent calls to retrieve information using the same third-party user token will result in an error stating the third-party user token does not exist.
         * @summary Remove a third-party user token
         * @param {UserThirdPartyTokenRemoveRequest} userThirdPartyTokenRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userThirdPartyTokenRemove(userThirdPartyTokenRemoveRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.userThirdPartyTokenRemove(userThirdPartyTokenRemoveRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * This endpoint is used to update user information associated with an existing `user_token`. It can also be used to enable an existing `user_token` for use with Consumer Reports by Plaid Check, by adding a `consumer_report_user_identity` object to the user. Plaid Check Consumer Reports can only be created for US-based users; the user\'s address country must be `US`.
         * @summary Update user information
         * @param {UserUpdateRequest} userUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUpdate(userUpdateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.userUpdate(userUpdateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Create an e-wallet. The response is the newly created e-wallet object.
         * @summary Create an e-wallet
         * @param {WalletCreateRequest} walletCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreate(walletCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.walletCreate(walletCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Fetch an e-wallet. The response includes the current balance.
         * @summary Fetch an e-wallet
         * @param {WalletGetRequest} walletGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGet(walletGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.walletGet(walletGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * This endpoint lists all e-wallets in descending order of creation.
         * @summary Fetch a list of e-wallets
         * @param {WalletListRequest} walletListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletList(walletListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.walletList(walletListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate transactions, the amount and reference for the transaction. Transactions will settle in seconds to several days, depending on the underlying payment rail.
         * @summary Execute a transaction using an e-wallet
         * @param {WalletTransactionExecuteRequest} walletTransactionExecuteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionExecute(walletTransactionExecuteRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.walletTransactionExecute(walletTransactionExecuteRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Fetch a specific e-wallet transaction
         * @summary Fetch an e-wallet transaction
         * @param {WalletTransactionGetRequest} walletTransactionGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionGet(walletTransactionGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.walletTransactionGet(walletTransactionGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time.
         * @summary List e-wallet transactions
         * @param {WalletTransactionListRequest} walletTransactionListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionList(walletTransactionListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.walletTransactionList(walletTransactionListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Create a new entity watchlist screening to check your customer against watchlists defined in the associated entity watchlist program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
         * @summary Create a watchlist screening for an entity
         * @param {WatchlistScreeningEntityCreateRequest} watchlistScreeningEntityCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityCreate(watchlistScreeningEntityCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningEntityCreate(watchlistScreeningEntityCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Retrieve an entity watchlist screening.
         * @summary Get an entity screening
         * @param {WatchlistScreeningEntityGetRequest} watchlistScreeningEntityGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityGet(watchlistScreeningEntityGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningEntityGet(watchlistScreeningEntityGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * List all changes to the entity watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
         * @summary List history for entity watchlist screenings
         * @param {WatchlistScreeningEntityHistoryListRequest} watchlistScreeningEntityHistoryListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityHistoryList(watchlistScreeningEntityHistoryListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningEntityHistoryList(watchlistScreeningEntityHistoryListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * List all hits for the entity watchlist screening.
         * @summary List hits for entity watchlist screenings
         * @param {WatchlistScreeningEntityHitListRequest} watchlistScreeningEntityHitListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityHitList(watchlistScreeningEntityHitListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningEntityHitList(watchlistScreeningEntityHitListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * List all entity screenings.
         * @summary List entity watchlist screenings
         * @param {WatchlistScreeningEntityListRequest} watchlistScreeningEntityListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityList(watchlistScreeningEntityListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningEntityList(watchlistScreeningEntityListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Get an entity watchlist screening program
         * @summary Get entity watchlist screening program
         * @param {WatchlistScreeningEntityProgramGetRequest} watchlistScreeningEntityProgramGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityProgramGet(watchlistScreeningEntityProgramGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningEntityProgramGet(watchlistScreeningEntityProgramGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * List all entity watchlist screening programs
         * @summary List entity watchlist screening programs
         * @param {WatchlistScreeningEntityProgramListRequest} watchlistScreeningEntityProgramListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityProgramList(watchlistScreeningEntityProgramListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningEntityProgramList(watchlistScreeningEntityProgramListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Create a review for an entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
         * @summary Create a review for an entity watchlist screening
         * @param {WatchlistScreeningEntityReviewCreateRequest} watchlistScreeningEntityReviewCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityReviewCreate(watchlistScreeningEntityReviewCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningEntityReviewCreate(watchlistScreeningEntityReviewCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * List all reviews for a particular entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
         * @summary List reviews for entity watchlist screenings
         * @param {WatchlistScreeningEntityReviewListRequest} watchlistScreeningEntityReviewListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityReviewList(watchlistScreeningEntityReviewListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningEntityReviewList(watchlistScreeningEntityReviewListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Update an entity watchlist screening.
         * @summary Update an entity screening
         * @param {WatchlistScreeningEntityUpdateRequest} watchlistScreeningEntityUpdateRequest The entity screening was successfully updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityUpdate(watchlistScreeningEntityUpdateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningEntityUpdate(watchlistScreeningEntityUpdateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Create a new Watchlist Screening to check your customer against watchlists defined in the associated Watchlist Program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
         * @summary Create a watchlist screening for a person
         * @param {WatchlistScreeningIndividualCreateRequest} watchlistScreeningIndividualCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualCreate(watchlistScreeningIndividualCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningIndividualCreate(watchlistScreeningIndividualCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Retrieve a previously created individual watchlist screening
         * @summary Retrieve an individual watchlist screening
         * @param {WatchlistScreeningIndividualGetRequest} watchlistScreeningIndividualGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualGet(watchlistScreeningIndividualGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningIndividualGet(watchlistScreeningIndividualGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * List all changes to the individual watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
         * @summary List history for individual watchlist screenings
         * @param {WatchlistScreeningIndividualHistoryListRequest} watchlistScreeningIndividualHistoryListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualHistoryList(watchlistScreeningIndividualHistoryListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningIndividualHistoryList(watchlistScreeningIndividualHistoryListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * List all hits found by Plaid for a particular individual watchlist screening.
         * @summary List hits for individual watchlist screening
         * @param {WatchlistScreeningIndividualHitListRequest} watchlistScreeningIndividualHitListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualHitList(watchlistScreeningIndividualHitListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningIndividualHitList(watchlistScreeningIndividualHitListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * List previously created watchlist screenings for individuals
         * @summary List Individual Watchlist Screenings
         * @param {WatchlistScreeningIndividualListRequest} watchlistScreeningIndividualListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualList(watchlistScreeningIndividualListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningIndividualList(watchlistScreeningIndividualListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Get an individual watchlist screening program
         * @summary Get individual watchlist screening program
         * @param {WatchlistScreeningIndividualProgramGetRequest} watchlistScreeningIndividualProgramGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualProgramGet(watchlistScreeningIndividualProgramGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningIndividualProgramGet(watchlistScreeningIndividualProgramGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * List all individual watchlist screening programs
         * @summary List individual watchlist screening programs
         * @param {WatchlistScreeningIndividualProgramListRequest} watchlistScreeningIndividualProgramListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualProgramList(watchlistScreeningIndividualProgramListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningIndividualProgramList(watchlistScreeningIndividualProgramListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Create a review for the individual watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
         * @summary Create a review for an individual watchlist screening
         * @param {WatchlistScreeningIndividualReviewCreateRequest} watchlistScreeningIndividualReviewCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualReviewCreate(watchlistScreeningIndividualReviewCreateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningIndividualReviewCreate(watchlistScreeningIndividualReviewCreateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * List all reviews for the individual watchlist screening.
         * @summary List reviews for individual watchlist screenings
         * @param {WatchlistScreeningIndividualReviewListRequest} watchlistScreeningIndividualReviewListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualReviewList(watchlistScreeningIndividualReviewListRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningIndividualReviewList(watchlistScreeningIndividualReviewListRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Update a specific individual watchlist screening. This endpoint can be used to add additional customer information, correct outdated information, add a reference id, assign the individual to a reviewer, and update which program it is associated with. Please note that you may not update `search_terms` and `status` at the same time since editing `search_terms` may trigger an automatic `status` change.
         * @summary Update individual watchlist screening
         * @param {WatchlistScreeningIndividualUpdateRequest} watchlistScreeningIndividualUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualUpdate(watchlistScreeningIndividualUpdateRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.watchlistScreeningIndividualUpdate(watchlistScreeningIndividualUpdateRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        },
        /**
         * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
         * @summary Get webhook verification key
         * @param {WebhookVerificationKeyGetRequest} webhookVerificationKeyGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookVerificationKeyGet(webhookVerificationKeyGetRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.webhookVerificationKeyGet(webhookVerificationKeyGetRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration2);
          });
        }
      };
    };
    exports.PlaidApiFp = PlaidApiFp;
    var PlaidApiFactory = function(configuration2, basePath, axios) {
      const localVarFp = exports.PlaidApiFp(configuration2);
      return {
        /**
         * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints, such as `/accounts/get`, return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link. As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.
         * @summary Retrieve real-time balance data
         * @param {AccountsBalanceGetRequest} accountsBalanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsBalanceGet(accountsBalanceGetRequest, options) {
          return localVarFp.accountsBalanceGet(accountsBalanceGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance. To return new accounts that were created after the user linked their Item, you can listen for the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link\'s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  `/accounts/get` is free to use and retrieves cached information, rather than extracting fresh information from the institution. The balance returned will reflect the balance at the time of the last successful Item update. If the Item is enabled for a regularly updating product, such as Transactions, Investments, or Liabilities, the balance will typically update about once a day, as long as the Item is healthy. If the Item is enabled only for products that do not frequently update, such as Auth or Identity, balance data may be much older.  For realtime balance information, use the paid endpoint `/accounts/balance/get` instead.
         * @summary Retrieve accounts
         * @param {AccountsGetRequest} accountsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsGet(accountsGetRequest, options) {
          return localVarFp.accountsGet(accountsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
         * @summary Retrieve information about a Plaid application
         * @param {ApplicationGetRequest} applicationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationGet(applicationGetRequest, options) {
          return localVarFp.applicationGet(applicationGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
         * @summary Create Asset Report Audit Copy
         * @param {AssetReportAuditCopyCreateRequest} assetReportAuditCopyCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest, options) {
          return localVarFp.assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.
         * @summary Retrieve an Asset Report Audit Copy
         * @param {AssetReportAuditCopyGetRequest} assetReportAuditCopyGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyGet(assetReportAuditCopyGetRequest, options) {
          return localVarFp.assetReportAuditCopyGet(assetReportAuditCopyGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
         * @summary Remove Asset Report Audit Copy
         * @param {AssetReportAuditCopyRemoveRequest} assetReportAuditCopyRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest, options) {
          return localVarFp.assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. The exact amount of time to create the report will vary depending on how many days of history are requested and will typically range from a few seconds to about one minute. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.
         * @summary Create an Asset Report
         * @param {AssetReportCreateRequest} assetReportCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportCreate(assetReportCreateRequest, options) {
          return localVarFp.assetReportCreate(assetReportCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report\'s data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
         * @summary Filter Asset Report
         * @param {AssetReportFilterRequest} assetReportFilterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportFilter(assetReportFilterRequest, options) {
          return localVarFp.assetReportFilter(assetReportFilterRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report. To retrieve an Asset Report with Insights, call `/asset_report/get` endpoint with `include_insights` set to `true`.  For latency-sensitive applications, you can optionally call `/asset_report/create` with `options.add_ons` set to `[\"fast_assets\"]`. This will cause Plaid to create two versions of the Asset Report: one with only current and available balance and identity information, and then later on the complete Asset Report. You will receive separate webhooks for each version of the Asset Report.
         * @summary Retrieve an Asset Report
         * @param {AssetReportGetRequest} assetReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportGet(assetReportGetRequest, options) {
          return localVarFp.assetReportGet(assetReportGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
         * @summary Retrieve a PDF Asset Report
         * @param {AssetReportPDFGetRequest} assetReportPDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportPdfGet(assetReportPDFGetRequest, options) {
          return localVarFp.assetReportPdfGet(assetReportPDFGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * An Asset Report is an immutable snapshot of a user\'s assets. In order to \"refresh\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\"\") for any previously-populated fields you would like set as empty.
         * @summary Refresh an Asset Report
         * @param {AssetReportRefreshRequest} assetReportRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRefresh(assetReportRefreshRequest, options) {
          return localVarFp.assetReportRefresh(assetReportRefreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove access to an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.
         * @summary Delete an Asset Report
         * @param {AssetReportRemoveRequest} assetReportRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assetReportRemove(assetReportRemoveRequest, options) {
          return localVarFp.assetReportRemove(assetReportRemoveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item\'s checking, savings, and cash management accounts, along with high-level account data and balances when available.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
         * @summary Retrieve auth data
         * @param {AuthGetRequest} authGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGet(authGetRequest, options) {
          return localVarFp.authGet(authGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
         * @summary Get balance of your Bank Transfer account
         * @param {BankTransferBalanceGetRequest} bankTransferBalanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferBalanceGet(bankTransferBalanceGetRequest, options) {
          return localVarFp.bankTransferBalanceGet(bankTransferBalanceGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.
         * @summary Cancel a bank transfer
         * @param {BankTransferCancelRequest} bankTransferCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferCancel(bankTransferCancelRequest, options) {
          return localVarFp.bankTransferCancel(bankTransferCancelRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.
         * @summary Create a bank transfer
         * @param {BankTransferCreateRequest} bankTransferCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferCreate(bankTransferCreateRequest, options) {
          return localVarFp.bankTransferCreate(bankTransferCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/bank_transfer/event/list` endpoint to get a list of Plaid-initiated ACH or bank transfer events based on specified filter criteria. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://plaid.com/docs/auth/coverage/microdeposit-events/).
         * @summary List bank transfer events
         * @param {BankTransferEventListRequest} bankTransferEventListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferEventList(bankTransferEventListRequest, options) {
          return localVarFp.bankTransferEventList(bankTransferEventListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/bank_transfer/event/sync` allows you to request up to the next 25 Plaid-initiated bank transfer events that happened after a specific `event_id`. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://www.plaid.com/docs/auth/coverage/microdeposit-events/).
         * @summary Sync bank transfer events
         * @param {BankTransferEventSyncRequest} bankTransferEventSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferEventSync(bankTransferEventSyncRequest, options) {
          return localVarFp.bankTransferEventSync(bankTransferEventSyncRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.
         * @summary Retrieve a bank transfer
         * @param {BankTransferGetRequest} bankTransferGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferGet(bankTransferGetRequest, options) {
          return localVarFp.bankTransferGet(bankTransferGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers.
         * @summary List bank transfers
         * @param {BankTransferListRequest} bankTransferListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferList(bankTransferListRequest, options) {
          return localVarFp.bankTransferList(bankTransferListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
         * @summary Migrate account into Bank Transfers
         * @param {BankTransferMigrateAccountRequest} bankTransferMigrateAccountRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferMigrateAccount(bankTransferMigrateAccountRequest, options) {
          return localVarFp.bankTransferMigrateAccount(bankTransferMigrateAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.
         * @summary Retrieve a sweep
         * @param {BankTransferSweepGetRequest} bankTransferSweepGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferSweepGet(bankTransferSweepGetRequest, options) {
          return localVarFp.bankTransferSweepGet(bankTransferSweepGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.
         * @summary List sweeps
         * @param {BankTransferSweepListRequest} bankTransferSweepListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankTransferSweepList(bankTransferSweepListRequest, options) {
          return localVarFp.bankTransferSweepList(bankTransferSweepListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use `/beacon/account_risk/v1/evaluate` to get risk insights for a linked account.
         * @summary Evaluate risk of a bank account
         * @param {BeaconAccountRiskEvaluateRequest} beaconAccountRiskEvaluateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconAccountRiskEvaluate(beaconAccountRiskEvaluateRequest, options) {
          return localVarFp.beaconAccountRiskEvaluate(beaconAccountRiskEvaluateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a Beacon Duplicate for a given Beacon Duplicate id.  A Beacon Duplicate represents a pair of similar Beacon Users within your organization.  Two Beacon User revisions are returned for each Duplicate record in either the `beacon_user1` or `beacon_user2` response fields.  The `analysis` field in the response indicates which fields matched between `beacon_user1` and `beacon_user2`.
         * @summary Get a Beacon Duplicate
         * @param {BeaconDuplicateGetRequest} beaconDuplicateGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconDuplicateGet(beaconDuplicateGetRequest, options) {
          return localVarFp.beaconDuplicateGet(beaconDuplicateGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a fraud report for a given Beacon User.
         * @summary Create a Beacon Report
         * @param {BeaconReportCreateRequest} beaconReportCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconReportCreate(beaconReportCreateRequest, options) {
          return localVarFp.beaconReportCreate(beaconReportCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a Beacon report for a given Beacon report id.
         * @summary Get a Beacon Report
         * @param {BeaconReportGetRequest} beaconReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconReportGet(beaconReportGetRequest, options) {
          return localVarFp.beaconReportGet(beaconReportGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/beacon/report/list` endpoint to view all Beacon Reports you created for a specific Beacon User. The reports returned by this endpoint are exclusively reports you created for a specific user. A Beacon User can only have one active report at a time, but a new report can be created if a previous report has been deleted. The results from this endpoint are paginated; the `next_cursor` field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the `next_cursor` value as the `cursor` parameter in the next request.
         * @summary List Beacon Reports for a Beacon User
         * @param {BeaconReportListRequest} beaconReportListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconReportList(beaconReportListRequest, options) {
          return localVarFp.beaconReportList(beaconReportListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a Beacon Report Syndication for a given Beacon Report Syndication id.
         * @summary Get a Beacon Report Syndication
         * @param {BeaconReportSyndicationGetRequest} beaconReportSyndicationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconReportSyndicationGet(beaconReportSyndicationGetRequest, options) {
          return localVarFp.beaconReportSyndicationGet(beaconReportSyndicationGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/beacon/report_syndication/list` endpoint to view all Beacon Reports that have been syndicated to a specific Beacon User. This endpoint returns Beacon Report Syndications which are references to Beacon Reports created either by you, or another Beacon customer, that matched the specified Beacon User. A Beacon User can have multiple active Beacon Report Syndications at once. The results from this endpoint are paginated; the `next_cursor` field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the `next_cursor` value as the `cursor` parameter in the next request.
         * @summary List Beacon Report Syndications for a Beacon User
         * @param {BeaconReportSyndicationListRequest} beaconReportSyndicationListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconReportSyndicationList(beaconReportSyndicationListRequest, options) {
          return localVarFp.beaconReportSyndicationList(beaconReportSyndicationListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Account Insights for all Accounts linked to this Beacon User. The insights for each account are computed based on the information that was last retrieved from the financial institution.
         * @summary Get Account Insights for a Beacon User
         * @param {BeaconUserAccountInsightsGetRequest} beaconUserAccountInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserAccountInsightsGet(beaconUserAccountInsightsGetRequest, options) {
          return localVarFp.beaconUserAccountInsightsGet(beaconUserAccountInsightsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and scan a Beacon User against your Beacon Program, according to your program\'s settings.  When you submit a new user to `/beacon/user/create`, several checks are performed immediately:    - The user\'s PII (provided within the `user` object) is searched against all other users within the Beacon Program you specified. If a match is found that violates your program\'s \"Duplicate Information Filtering\" settings, the user will be returned with a status of `pending_review`.    - The user\'s PII is also searched against all fraud reports created by your organization across all of your Beacon Programs. If the user\'s data matches a fraud report that your team created, the user will be returned with a status of `rejected`.    - Finally, the user\'s PII is searched against all fraud report shared with the Beacon Network by other companies. If a matching fraud report is found, the user will be returned with a `pending_review` status if your program has enabled automatic flagging based on network fraud.
         * @summary Create a Beacon User
         * @param {BeaconUserCreateRequest} beaconUserCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserCreate(beaconUserCreateRequest, options) {
          return localVarFp.beaconUserCreate(beaconUserCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a Beacon User.  The Beacon User is returned with all of their associated information and a `status` based on the Beacon Network duplicate record and fraud checks.
         * @summary Get a Beacon User
         * @param {BeaconUserGetRequest} beaconUserGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserGet(beaconUserGetRequest, options) {
          return localVarFp.beaconUserGet(beaconUserGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List all changes to the Beacon User in reverse-chronological order.
         * @summary List a Beacon User\'s history
         * @param {BeaconUserHistoryListRequest} beaconUserHistoryListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserHistoryList(beaconUserHistoryListRequest, options) {
          return localVarFp.beaconUserHistoryList(beaconUserHistoryListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the status of a Beacon User.  When updating a Beacon User\'s status via this endpoint, Plaid validates that the status change is consistent with the related state for this Beacon User. Specifically, we will check:  1. Whether there are any associated Beacon Reports connected to the Beacon User, and 2. Whether there are any confirmed Beacon Report Syndications connected to the Beacon User.  When updating a Beacon User\'s status to \"rejected\", we enforce that either a Beacon Report has been created for the Beacon User or a Beacon Report Syndication has been confirmed. When updating a Beacon User\'s status to \"cleared\", we enforce that there are no active Beacon Reports or confirmed Beacon Report Syndications associated with the user. If you previously created a Beacon Report for this user, you must delete it before updating the Beacon User\'s status to \"cleared\". There are no restrictions on updating a Beacon User\'s status to \"pending_review\".  If these conditions are not met, the request will be rejected with an error explaining the issue.
         * @summary Review a Beacon User
         * @param {BeaconUserReviewRequest} beaconUserReviewRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserReview(beaconUserReviewRequest, options) {
          return localVarFp.beaconUserReview(beaconUserReviewRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the identity data for a Beacon User in your Beacon Program or add new accounts to the Beacon User.  Similar to `/beacon/user/create`, several checks are performed immediately when you submit an identity data change to `/beacon/user/update`:    - The user\'s updated PII is searched against all other users within the Beacon Program you specified. If a match is found that violates your program\'s \"Duplicate Information Filtering\" settings, the user will be returned with a status of `pending_review`.    - The user\'s updated PII is also searched against all fraud reports created by your organization across all of your Beacon Programs. If the user\'s data matches a fraud report that your team created, the user will be returned with a status of `rejected`.    - Finally, the user\'s PII is searched against all fraud report shared with the Beacon Network by other companies. If a matching fraud report is found, the user will be returned with a `pending_review` status if your program has enabled automatic flagging based on network fraud.  Plaid maintains a version history for each Beacon User, so the Beacon User\'s identity data before and after the update is retained as separate versions.
         * @summary Update the identity data of a Beacon User
         * @param {BeaconUserUpdateRequest} beaconUserUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        beaconUserUpdate(beaconUserUpdateRequest, options) {
          return localVarFp.beaconUserUpdate(beaconUserUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/cashflow_report/get` endpoint retrieves transactions data associated with an item. Transactions data is standardized across financial institutions.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift. Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions). Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `cursor` parameters in conjunction with the `has_more` response body field to fetch all available transactions. Note that data isn\'t likely to be immediately available to `/cashflow_report/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with cashflow_report, or if it wasn\'t, upon the first call to /cashflow_report/refresh. To be alerted when transaction data is ready to be fetched, listen for the `CASHFLOW_REPORT_READY` webhook.
         * @summary Gets transaction data in cashflow_report
         * @param {CashflowReportGetRequest} cashflowReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cashflowReportGet(cashflowReportGetRequest, options) {
          return localVarFp.cashflowReportGet(cashflowReportGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/cashflow_report/refresh` is an endpoint that initiates an on-demand extraction to fetch the newest transactions for an item (given an `item_id`). The item must already have Cashflow Report added as a product in order to call `/cashflow_report/refresh`.  After calling `/cashflow_report/refresh`, Plaid will fire a webhook `CASHFLOW_REPORT_READY` alerting clients that new transactions data can then be ingested via `/cashflow_report/get` or the webhook will contain an error code informing there was an error in refreshing transactions data.   Note that the `/cashflow_report/refresh` endpoint is not supported for Capital One (`ins_128026`) non-depository accounts and will result in a `PRODUCTS_NOT_SUPPORTED` error if called on an Item that contains only non-depository accounts from that institution.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but up to 30 seconds or more). If you encounter errors, you may find it necessary to adjust your timeout period for requests.
         * @summary Refresh transaction data in cashflow_report
         * @param {CashflowReportRefreshRequest} cashflowReportRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cashflowReportRefresh(cashflowReportRefreshRequest, options) {
          return localVarFp.cashflowReportRefresh(cashflowReportRefreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.  All implementations are recommended to use the newer `personal_finance_category` taxonomy instead of the older `category` taxonomy supported by this endpoint. The [`personal_finance_category taxonomy` CSV file](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) is available for download and is not accessible via API.
         * @summary Get categories
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesGet(body, options) {
          return localVarFp.categoriesGet(body, options).then((request) => request(axios, basePath));
        },
        /**
         * List a historical log of Item consent events. Consent logs are only available for events occurring on or after November 7, 2024. Up to three years of consent logs will be available via the endpoint.
         * @summary List a historical log of item consent events
         * @param {ConsentEventsGetRequest} consentEventsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consentEventsGet(consentEventsGetRequest, options) {
          return localVarFp.consentEventsGet(consentEventsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all existing CRB Bank Income and Base reports for the consumer in PDF format.  Response is PDF binary data. The `request_id` is returned in the `Plaid-Request-ID` header.
         * @summary Retrieve a PDF Reports
         * @param {ConsumerReportPDFGetRequest} consumerReportPDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consumerReportPdfGet(consumerReportPDFGetRequest, options) {
          return localVarFp.consumerReportPdfGet(consumerReportPDFGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/cra/bank_income/create` creates a CRA report for income verification
         * @summary Create a CRA report for income verification
         * @param {CraBankIncomeCreateRequest} craBankIncomeCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craBankIncomeCreate(craBankIncomeCreateRequest, options) {
          return localVarFp.craBankIncomeCreate(craBankIncomeCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/cra/bank_income/get` returns the bank income report(s) for a specified user.
         * @summary Retrieve information from the bank accounts used for income verification
         * @param {CraBankIncomeGetRequest} craBankIncomeGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craBankIncomeGet(craBankIncomeGetRequest, options) {
          return localVarFp.craBankIncomeGet(craBankIncomeGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to retrieve the Base Report for your user, allowing you to receive comprehensive bank account and cash flow data. You should call this endpoint after you\'ve received a `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn\'t have sufficient data to generate the base report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.
         * @summary Retrieve a Base Report
         * @param {CraCheckReportBaseReportGetRequest} craCheckReportBaseReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportBaseReportGet(craCheckReportBaseReportGetRequest, options) {
          return localVarFp.craCheckReportBaseReportGet(craCheckReportBaseReportGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to retrieve the Cashflow Insights report for your user. You should call this endpoint after you\'ve received the `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn’t have sufficient data to generate the insights, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.  If you did not initialize Link with the `cra_cashflow_insights` product or have generated a report using `/cra/check_report/create`, we will generate the insights when you call this endpoint. In this case, you may optionally provide parameters under `options` to configure which insights you want to receive.
         * @summary Retrieve cash flow insights from your user\'s banking data
         * @param {CraCheckReportCashflowInsightsGetRequest} craCheckReportCashflowInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportCashflowInsightsGet(craCheckReportCashflowInsightsGetRequest, options) {
          return localVarFp.craCheckReportCashflowInsightsGet(craCheckReportCashflowInsightsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/cra/check_report/create` creates a Consumer Report powered by Plaid Check. You can call this endpoint to create a new report if `consumer_report_permissible_purpose` was omitted during Link token creation. If you did provide a `consumer_report_permissible_purpose` during Link token creation, then Plaid Check will automatically begin creating a Consumer Report once the user completes the Link process, and it is not necessary to call `/cra/check_report/create` before retrieving the report.   `/cra/check_report/create` can also be used to refresh data in an existing report. A Consumer Report will last for 24 hours before expiring; you should call any `/get` endpoints on the report before it expires. If a report expires, you can call `/cra/check_report/create` again to re-generate it. Note that refreshing or regenerating a report is a billable event.
         * @summary Create a Consumer Report
         * @param {CraCheckReportCreateRequest} craCheckReportCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportCreate(craCheckReportCreateRequest, options) {
          return localVarFp.craCheckReportCreate(craCheckReportCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to retrieve the Income Insights report for your user.  You should call this endpoint after you\'ve received a `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn’t have sufficient data to generate the base report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.
         * @summary Retrieve cash flow information from your user\'s banks
         * @param {CraCheckReportIncomeInsightsGetRequest} craCheckReportIncomeInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportIncomeInsightsGet(craCheckReportIncomeInsightsGetRequest, options) {
          return localVarFp.craCheckReportIncomeInsightsGet(craCheckReportIncomeInsightsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to retrieve the Network Insights product for your user. You should call this endpoint after you\'ve received the `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn’t have sufficient data to generate the report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.  If you did not initialize Link with the `cra_network_attributes` product or have generated a report using `/cra/check_report/create`, we will generate the attributes when you call this endpoint.
         * @summary Retrieve network attributes for the user
         * @param {CraCheckReportNetworkInsightsGetRequest} craCheckReportNetworkInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportNetworkInsightsGet(craCheckReportNetworkInsightsGetRequest, options) {
          return localVarFp.craCheckReportNetworkInsightsGet(craCheckReportNetworkInsightsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to retrieve the Partner Insights report for your user. You should call this endpoint after you\'ve received the `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn’t have sufficient data to generate the base report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.  If you did not initialize Link with the `credit_partner_insights` product or have generated a report using `/cra/check_report/create`, we will call our partners to generate the insights when you call this endpoint. In this case, you may optionally provide parameters under `options` to configure which insights you want to receive.
         * @summary Retrieve cash flow insights from partners
         * @param {CraCheckReportPartnerInsightsGetRequest} craCheckReportPartnerInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportPartnerInsightsGet(craCheckReportPartnerInsightsGetRequest, options) {
          return localVarFp.craCheckReportPartnerInsightsGet(craCheckReportPartnerInsightsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/cra/check_report/pdf/get` retrieves the most recent Consumer Report in PDF format. By default, the most recent Base Report (if it exists) for the user will be returned. To request that the most recent Income Insights report be included in the PDF as well, use the `add-ons` field.
         * @summary Retrieve Consumer Reports as a PDF
         * @param {CraCheckReportPDFGetRequest} craCheckReportPDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craCheckReportPdfGet(craCheckReportPDFGetRequest, options) {
          return localVarFp.craCheckReportPdfGet(craCheckReportPDFGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/cra/loans/applications/register` registers loan applications and decisions.
         * @summary Register loan applications and decisions.
         * @param {CraLoansApplicationsRegisterRequest} craLoansApplicationsRegisterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craLoansApplicationsRegister(craLoansApplicationsRegisterRequest, options) {
          return localVarFp.craLoansApplicationsRegister(craLoansApplicationsRegisterRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/cra/loans/register` registers a list of loans to their applicants.
         * @summary Register a list of loans to their applicants.
         * @param {CRALoansRegisterRequest} cRALoansRegisterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craLoansRegister(cRALoansRegisterRequest, options) {
          return localVarFp.craLoansRegister(cRALoansRegisterRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/cra/loans/unregister` indicates the loans have reached a final status and no further updates are expected.
         * @summary Unregister a list of loans.
         * @param {CraLoansUnregisterRequest} craLoansUnregisterRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craLoansUnregister(craLoansUnregisterRequest, options) {
          return localVarFp.craLoansUnregister(craLoansUnregisterRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/cra/loans/update` updates loan information such as the status and payment history.
         * @summary Updates loan data.
         * @param {CraLoansUpdateRequest} craLoansUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craLoansUpdate(craLoansUpdateRequest, options) {
          return localVarFp.craLoansUpdate(craLoansUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to retrieve a Monitoring Insights report by passing in the `user_token` referred to in the webhook you received.
         * @summary Retrieve a Monitoring Insights Report
         * @param {CraMonitoringInsightsGetRequest} craMonitoringInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craMonitoringInsightsGet(craMonitoringInsightsGetRequest, options) {
          return localVarFp.craMonitoringInsightsGet(craMonitoringInsightsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to subscribe to insights for a user\'s linked CRA items, which are updated every day (best-effort).
         * @summary Subscribe to Monitoring Insights
         * @param {CraMonitoringInsightsSubscribeRequest} craMonitoringInsightsSubscribeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craMonitoringInsightsSubscribe(craMonitoringInsightsSubscribeRequest, options) {
          return localVarFp.craMonitoringInsightsSubscribe(craMonitoringInsightsSubscribeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to unsubscribe from previously subscribed Monitoring Insights.
         * @summary Unsubscribe from Monitoring Insights
         * @param {CraMonitoringInsightsUnsubscribeRequest} craMonitoringInsightsUnsubscribeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craMonitoringInsightsUnsubscribe(craMonitoringInsightsUnsubscribeRequest, options) {
          return localVarFp.craMonitoringInsightsUnsubscribe(craMonitoringInsightsUnsubscribeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/cra/partner_insights/get` returns cash flow insights for a specified user.
         * @summary Retrieve cash flow insights from the bank accounts used for income verification
         * @param {CraPartnerInsightsGetRequest} craPartnerInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craPartnerInsightsGet(craPartnerInsightsGetRequest, options) {
          return localVarFp.craPartnerInsightsGet(craPartnerInsightsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
         * @summary Create payment token
         * @param {PaymentInitiationPaymentTokenCreateRequest} paymentInitiationPaymentTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPaymentToken(paymentInitiationPaymentTokenCreateRequest, options) {
          return localVarFp.createPaymentToken(paymentInitiationPaymentTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Asset Report in Freddie Mac\'s JSON format.
         * @summary Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint.
         * @param {{ [key: string]: object; }} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditAssetReportFreddieMacGet(requestBody, options) {
          return localVarFp.creditAssetReportFreddieMacGet(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Plaid can create an Audit Copy token of an Asset Report and/or Income Report to share with participating Government Sponsored Entity (GSE). If you participate in the Day 1 Certainty™ program, Plaid can supply an Audit Copy token directly to Fannie Mae on your behalf. An Audit Copy token contains the same underlying data as the Asset Report and/or Income Report (result of /credit/payroll_income/get).  Use the `/credit/audit_copy_token/create` endpoint to create an `audit_copy_token` and then pass that token to the GSE who needs access.
         * @summary Create Asset or Income Report Audit Copy Token
         * @param {CreditAuditCopyTokenCreateRequest} creditAuditCopyTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditAuditCopyTokenCreate(creditAuditCopyTokenCreateRequest, options) {
          return localVarFp.creditAuditCopyTokenCreate(creditAuditCopyTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/credit/audit_copy_token/update` endpoint updates an existing  Audit Copy Token by adding the report tokens in the `report_tokens` field to the `audit_copy_token`. If the Audit Copy Token already contains a report of a certain type, it will be replaced with the token provided in the `report_tokens` field.
         * @summary Update an Audit Copy Token
         * @param {CreditAuditCopyTokenUpdateRequest} creditAuditCopyTokenUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditAuditCopyTokenUpdate(creditAuditCopyTokenUpdateRequest, options) {
          return localVarFp.creditAuditCopyTokenUpdate(creditAuditCopyTokenUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/credit/bank_employment/get` returns the employment report(s) derived from bank transaction data for a specified user.
         * @summary Retrieve information from the bank accounts used for employment verification
         * @param {CreditBankEmploymentGetRequest} creditBankEmploymentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankEmploymentGet(creditBankEmploymentGetRequest, options) {
          return localVarFp.creditBankEmploymentGet(creditBankEmploymentGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/credit/bank_income/get` returns the bank income report(s) for a specified user. A single report corresponds to all institutions linked in a single Link session. To include multiple institutions in a single report, use [Multi-Item Link](https://plaid.com/docs/link/multi-item-link). To return older reports, use the `options.count` field.
         * @summary Retrieve information from the bank accounts used for income verification
         * @param {CreditBankIncomeGetRequest} creditBankIncomeGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomeGet(creditBankIncomeGetRequest, options) {
          return localVarFp.creditBankIncomeGet(creditBankIncomeGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/credit/bank_income/pdf/get` returns the most recent bank income report for a specified user in PDF format.  A single report corresponds to all institutions linked in a single Link session. To include multiple institutions in a single report, use [Multi-Item Link](https://plaid.com/docs/link/multi-item-link).
         * @summary Retrieve information from the bank accounts used for income verification in PDF format
         * @param {CreditBankIncomePDFGetRequest} creditBankIncomePDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomePdfGet(creditBankIncomePDFGetRequest, options) {
          return localVarFp.creditBankIncomePdfGet(creditBankIncomePDFGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/credit/bank_income/refresh` refreshes the most recent bank income report data for a specific user. If the most recent bank income report is no longer valid (i.e. deleted), the endpoint will refresh the most recent valid report instead.
         * @summary Refresh a user\'s bank income information
         * @param {CreditBankIncomeRefreshRequest} creditBankIncomeRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomeRefresh(creditBankIncomeRefreshRequest, options) {
          return localVarFp.creditBankIncomeRefresh(creditBankIncomeRefreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/credit/bank_income/webhook/update` allows you to subscribe or unsubscribe a user for income webhook notifications. By default, all users start out unsubscribed.  If a user is subscribed, on significant changes to the user\'s income profile, you will receive a `BANK_INCOME_REFRESH_UPDATE` webhook, prompting you to refresh bank income data for the user.
         * @summary Subscribe and unsubscribe to proactive notifications for a user\'s income profile
         * @param {CreditBankIncomeWebhookUpdateRequest} creditBankIncomeWebhookUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankIncomeWebhookUpdate(creditBankIncomeWebhookUpdateRequest, options) {
          return localVarFp.creditBankIncomeWebhookUpdate(creditBankIncomeWebhookUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/credit/bank_statements/uploads/get` returns parsed data from bank statements uploaded by users as part of the Document Income flow. If your account is not enabled for Document Parsing, contact your account manager to request access.
         * @summary Retrieve data for a user\'s uploaded bank statements
         * @param {CreditBankStatementsUploadsGetRequest} creditBankStatementsUploadsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditBankStatementsUploadsGet(creditBankStatementsUploadsGetRequest, options) {
          return localVarFp.creditBankStatementsUploadsGet(creditBankStatementsUploadsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/credit/employment/get` returns a list of items with employment information from a user\'s payroll provider that was verified by an end user.
         * @summary Retrieve a summary of an individual\'s employment information
         * @param {CreditEmploymentGetRequest} creditEmploymentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditEmploymentGet(creditEmploymentGetRequest, options) {
          return localVarFp.creditEmploymentGet(creditEmploymentGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Verification of Assets and Verification of Employment reports.
         * @summary Retrieve an Asset Report with Freddie Mac format (aka VOA - Verification Of Assets), and a Verification Of Employment (VOE) report if this one is available. Only Freddie Mac can use this endpoint.
         * @param {CreditFreddieMacReportsGetRequest} creditFreddieMacReportsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditFreddieMacReportsGet(creditFreddieMacReportsGetRequest, options) {
          return localVarFp.creditFreddieMacReportsGet(creditFreddieMacReportsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document.
         * @summary Retrieve a user\'s payroll information
         * @param {CreditPayrollIncomeGetRequest} creditPayrollIncomeGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeGet(creditPayrollIncomeGetRequest, options) {
          return localVarFp.creditPayrollIncomeGet(creditPayrollIncomeGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/credit/payroll_income/parsing_config/update` updates the parsing configuration for a document income verification.
         * @summary Update the parsing configuration for a document income verification
         * @param {{ [key: string]: object; }} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeParsingConfigUpdate(requestBody, options) {
          return localVarFp.creditPayrollIncomeParsingConfigUpdate(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * `/credit/payroll_income/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing `employer` data will increase the chance of receiving a useful result.  When testing in Sandbox, you can control the results by providing special test values in the `employer` and `access_tokens` fields. `employer_good` and `employer_bad` will result in `HIGH` and `LOW` confidence values, respectively. `employer_multi` will result in a `HIGH` confidence with multiple payroll options. Likewise, `access_good` and `access_bad` will result in `HIGH` and `LOW` confidence values, respectively. Any other value for `employer` and `access_tokens` in Sandbox will result in `UNKNOWN` confidence.
         * @summary Check income verification eligibility and optimize conversion
         * @param {CreditPayrollIncomePrecheckRequest} creditPayrollIncomePrecheckRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomePrecheck(creditPayrollIncomePrecheckRequest, options) {
          return localVarFp.creditPayrollIncomePrecheck(creditPayrollIncomePrecheckRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/credit/payroll_income/refresh` refreshes a given digital payroll income verification.
         * @summary Refresh a digital payroll income verification
         * @param {CreditPayrollIncomeRefreshRequest} creditPayrollIncomeRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeRefresh(creditPayrollIncomeRefreshRequest, options) {
          return localVarFp.creditPayrollIncomeRefresh(creditPayrollIncomeRefreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/credit/payroll_income/risk_signals/get` can be used as part of the Document Income flow to assess a user-uploaded document for signs of potential fraud or tampering. It returns a risk score for each uploaded document that indicates the likelihood of the document being fraudulent, in addition to details on the individual risk signals contributing to the score.  To trigger risk signal generation for an Item, call `/link/token/create` with `parsing_config` set to include `risk_signals`, or call `/credit/payroll_income/parsing_config/update`. Once risk signal generation has been triggered, `/credit/payroll_income/risk_signals/get` can be called at any time after the `INCOME_VERIFICATION_RISK_SIGNALS` webhook has been fired.  `/credit/payroll_income/risk_signals/get` is offered as an add-on to Document Income and is billed separately. To request access to this endpoint, submit a product access request or contact your Plaid account manager.
         * @summary Retrieve fraud insights for a user\'s manually uploaded document(s).
         * @param {CreditPayrollIncomeRiskSignalsGetRequest} creditPayrollIncomeRiskSignalsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditPayrollIncomeRiskSignalsGet(creditPayrollIncomeRiskSignalsGetRequest, options) {
          return localVarFp.creditPayrollIncomeRiskSignalsGet(creditPayrollIncomeRiskSignalsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in `/asset_report/create`.  To grant a third party access to an Asset Report, use the `/credit/relay/create` endpoint to create a `relay_token` and then pass that token to your third party. Each third party has its own `secondary_client_id`; for example, `ce5bd328dcd34123456`. You\'ll need to create a separate `relay_token` for each third party that needs access to the report on your behalf.
         * @summary Create a relay token to share an Asset Report with a partner client
         * @param {CreditRelayCreateRequest} creditRelayCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayCreate(creditRelayCreateRequest, options) {
          return localVarFp.creditRelayCreate(creditRelayCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/credit/relay/get` allows third parties to receive a report that was shared with them, using a `relay_token` that was created by the report owner.
         * @summary Retrieve the reports associated with a relay token that was shared with you
         * @param {CreditRelayGetRequest} creditRelayGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayGet(creditRelayGetRequest, options) {
          return localVarFp.creditRelayGet(creditRelayGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/credit/relay/pdf/get` allows third parties to receive a pdf report that was shared with them, using a `relay_token` that was created by the report owner.  The `/credit/relay/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/credit/relay/pdf/get`, you must first create the Asset Report using `/credit/relay/create` and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/credit/relay/pdf/get` is the PDF binary data. The `request_id` is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
         * @summary Retrieve the pdf reports associated with a relay token that was shared with you (beta)
         * @param {CreditRelayPDFGetRequest} creditRelayPDFGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayPdfGet(creditRelayPDFGetRequest, options) {
          return localVarFp.creditRelayPdfGet(creditRelayPDFGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/credit/relay/refresh` endpoint allows third parties to refresh a report that was relayed to them, using a `relay_token` that was created by the report owner. A new report will be created with the original report parameters, but with the most recent data available based on the `days_requested` value of the original report.
         * @summary Refresh a report of a relay token
         * @param {CreditRelayRefreshRequest} creditRelayRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayRefresh(creditRelayRefreshRequest, options) {
          return localVarFp.creditRelayRefresh(creditRelayRefreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/credit/relay/remove` endpoint allows you to invalidate a `relay_token`. The third party holding the token will no longer be able to access or refresh the reports which the `relay_token` gives access to. The original report, associated Items, and other relay tokens that provide access to the same report are not affected and will remain accessible after removing the given `relay_token`.
         * @summary Remove relay token
         * @param {CreditRelayRemoveRequest} creditRelayRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditRelayRemove(creditRelayRemoveRequest, options) {
          return localVarFp.creditRelayRemove(creditRelayRemoveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/credit/audit_copy_token/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Report data and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
         * @summary Remove an Audit Copy token
         * @param {CreditAuditCopyTokenRemoveRequest} creditAuditCopyTokenRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditReportAuditCopyRemove(creditAuditCopyTokenRemoveRequest, options) {
          return localVarFp.creditReportAuditCopyRemove(creditAuditCopyTokenRemoveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint can be used for your end users after they complete the Link flow. This endpoint returns a list of Link sessions that your user completed, where each session includes the results from the Link flow.  These results include details about the Item that was created and some product related metadata (showing, for example, whether the user finished the bank income verification step).
         * @summary Retrieve Link sessions for your user
         * @param {CreditSessionsGetRequest} creditSessionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creditSessionsGet(creditSessionsGetRequest, options) {
          return localVarFp.creditSessionsGet(creditSessionsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/dashboard_user/get` endpoint provides details (such as email address) about a specific Dashboard user based on the `dashboard_user_id` field, which is returned in the `audit_trail` object of certain Monitor and Beacon endpoints. This can be used to identify the specific reviewer who performed a Dashboard action.
         * @summary Retrieve a dashboard user
         * @param {DashboardUserGetRequest} dashboardUserGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardUserGet(dashboardUserGetRequest, options) {
          return localVarFp.dashboardUserGet(dashboardUserGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/dashboard_user/list` endpoint provides details (such as email address) all Dashboard users associated with your account. This can use used to audit or track the list of reviewers for Monitor, Beacon, and Identity Verification products.
         * @summary List dashboard users
         * @param {DashboardUserListRequest} dashboardUserListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dashboardUserList(dashboardUserListRequest, options) {
          return localVarFp.dashboardUserList(dashboardUserListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
         * @summary (Deprecated) Create a deposit switch without using Plaid Exchange
         * @param {DepositSwitchAltCreateRequest} depositSwitchAltCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchAltCreate(depositSwitchAltCreateRequest, options) {
          return localVarFp.depositSwitchAltCreate(depositSwitchAltCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
         * @summary (Deprecated) Create a deposit switch
         * @param {DepositSwitchCreateRequest} depositSwitchCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchCreate(depositSwitchCreateRequest, options) {
          return localVarFp.depositSwitchCreate(depositSwitchCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user\'s direct deposit allocation preferences.
         * @summary (Deprecated) Retrieve a deposit switch
         * @param {DepositSwitchGetRequest} depositSwitchGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchGet(depositSwitchGetRequest, options) {
          return localVarFp.depositSwitchGet(depositSwitchGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes.
         * @summary (Deprecated) Create a deposit switch token
         * @param {DepositSwitchTokenCreateRequest} depositSwitchTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositSwitchTokenCreate(depositSwitchTokenCreateRequest, options) {
          return localVarFp.depositSwitchTokenCreate(depositSwitchTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/employers/search` allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user\'s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
         * @summary Search employer database
         * @param {EmployersSearchRequest} employersSearchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employersSearch(employersSearchRequest, options) {
          return localVarFp.employersSearch(employersSearchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.  This endpoint has been deprecated; new integrations should use `/credit/employment/get` instead.
         * @summary (Deprecated) Retrieve a summary of an individual\'s employment information
         * @param {EmploymentVerificationGetRequest} employmentVerificationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employmentVerificationGet(employmentVerificationGetRequest, options) {
          return localVarFp.employmentVerificationGet(employmentVerificationGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * A generic webhook receiver endpoint for FDX Event Notifications
         * @summary Webhook receiver for fdx notifications
         * @param {FDXNotification} fDXNotification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fdxNotifications(fDXNotification, options) {
          return localVarFp.fdxNotifications(fDXNotification, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific recipient
         * @summary Get Recipient
         * @param {string} recipientId Recipient Identifier. Uniquely identifies the recipient
         * @param {string} [oAUTHSTATEID] The value that is passed into the OAuth URI \&#39;state\&#39; query parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipient(recipientId, oAUTHSTATEID, options) {
          return localVarFp.getRecipient(recipientId, oAUTHSTATEID, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of Recipients
         * @summary Get Recipients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipients(options) {
          return localVarFp.getRecipients(options).then((request) => request(axios, basePath));
        },
        /**
         * Use `/identity/documents/uploads/get` to retrieve identity details when using [Identity Document Upload](https://plaid.com/docs/identity/identity-document-upload/).
         * @summary Returns uploaded document identity
         * @param {IdentityDocumentsUploadsGetRequest} identityDocumentsUploadsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityDocumentsUploadsGet(identityDocumentsUploadsGetRequest, options) {
          return localVarFp.identityDocumentsUploadsGet(identityDocumentsUploadsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  Note: In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
         * @summary Retrieve identity data
         * @param {IdentityGetRequest} identityGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityGet(identityGetRequest, options) {
          return localVarFp.identityGet(identityGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder\'s financial institution.  Fields within the `balances` object will always be null when retrieved by `/identity/match`. Instead, use the free `/accounts/get` endpoint to request balance cached data, or `/accounts/balance/get` for real-time data.
         * @summary Retrieve identity match score
         * @param {IdentityMatchRequest} identityMatchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityMatch(identityMatchRequest, options) {
          return localVarFp.identityMatch(identityMatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/identity/refresh` is an optional endpoint for users of the Identity product. It initiates an on-demand extraction to fetch the most up to date Identity information from the Financial Institution. This on-demand extraction takes place in addition to the periodic extractions that automatically occur for any Identity-enabled Item. If changes to Identity are discovered after calling `/identity/refresh`, Plaid will fire a webhook [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/identity/#default_update).  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/identity/refresh` is offered as an add-on to Identity and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh identity data
         * @param {IdentityRefreshRequest} identityRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityRefresh(identityRefreshRequest, options) {
          return localVarFp.identityRefresh(identityRefreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Try to autofill an Identity Verification based of the provided phone number, date of birth and country of residence.
         * @summary Create autofill for an Identity Verification
         * @param {IdentityVerificationAutofillCreateRequest} identityVerificationAutofillCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationAutofillCreate(identityVerificationAutofillCreateRequest, options) {
          return localVarFp.identityVerificationAutofillCreate(identityVerificationAutofillCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Identity Verification for the user specified by the `client_user_id` field. The requirements and behavior of the verification are determined by the `template_id` provided. If you don\'t know whether the associated user already has an active Identity Verification, you can specify `\"is_idempotent\": true` in the request body. With idempotency enabled, a new Identity Verification will only be created if one does not already exist for the associated `client_user_id` and `template_id`. If an Identity Verification is found, it will be returned unmodified with an `200 OK` HTTP status code.  You can also use this endpoint to supply information you already have collected about the user; if any of these fields are specified, the screens prompting the user to enter them will be skipped during the Link flow.
         * @summary Create a new Identity Verification
         * @param {IdentityVerificationCreateRequest} identityVerificationCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationCreate(identityVerificationCreateRequest, options) {
          return localVarFp.identityVerificationCreate(identityVerificationCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a previously created Identity Verification.
         * @summary Retrieve Identity Verification
         * @param {IdentityVerificationGetRequest} identityVerificationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationGet(identityVerificationGetRequest, options) {
          return localVarFp.identityVerificationGet(identityVerificationGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Filter and list Identity Verifications created by your account
         * @summary List Identity Verifications
         * @param {IdentityVerificationListRequest} identityVerificationListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationList(identityVerificationListRequest, options) {
          return localVarFp.identityVerificationList(identityVerificationListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Allow a customer to retry their Identity Verification
         * @summary Retry an Identity Verification
         * @param {IdentityVerificationRetryRequest} identityVerificationRetryRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        identityVerificationRetry(identityVerificationRetryRequest, options) {
          return localVarFp.identityVerificationRetry(identityVerificationRetryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing.
         * @summary (Deprecated) Create an income verification instance
         * @param {IncomeVerificationCreateRequest} incomeVerificationCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationCreate(incomeVerificationCreateRequest, options) {
          return localVarFp.incomeVerificationCreate(incomeVerificationCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The `request_id` is returned in the `Plaid-Request-ID` header.
         * @summary (Deprecated) Download the original documents used for income verification
         * @param {IncomeVerificationDocumentsDownloadRequest} incomeVerificationDocumentsDownloadRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest, options) {
          return localVarFp.incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
         * @summary (Deprecated) Retrieve information from the paystubs used for income verification
         * @param {IncomeVerificationPaystubsGetRequest} incomeVerificationPaystubsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest, options) {
          return localVarFp.incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/precheck` instead.
         * @summary (Deprecated) Check digital income verification eligibility and optimize conversion
         * @param {IncomeVerificationPrecheckRequest} incomeVerificationPrecheckRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationPrecheck(incomeVerificationPrecheckRequest, options) {
          return localVarFp.incomeVerificationPrecheck(incomeVerificationPrecheckRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user\'\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
         * @summary (Deprecated) Retrieve information from the tax documents used for income verification
         * @param {IncomeVerificationTaxformsGetRequest} incomeVerificationTaxformsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeVerificationTaxformsGet(incomeVerificationTaxformsGetRequest, options) {
          return localVarFp.incomeVerificationTaxformsGet(incomeVerificationTaxformsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
         * @summary Get details of all supported institutions
         * @param {InstitutionsGetRequest} institutionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsGet(institutionsGetRequest, options) {
          return localVarFp.institutionsGet(institutionsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
         * @summary Get details of an institution
         * @param {InstitutionsGetByIdRequest} institutionsGetByIdRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsGetById(institutionsGetByIdRequest, options) {
          return localVarFp.institutionsGetById(institutionsGetByIdRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
         * @summary Search institutions
         * @param {InstitutionsSearchRequest} institutionsSearchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionsSearch(institutionsSearchRequest, options) {
          return localVarFp.institutionsSearch(institutionsSearchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/investments/auth/get` endpoint allows developers to receive user-authorized data to facilitate the transfer of holdings
         * @summary Get data needed to authorize an investments transfer
         * @param {InvestmentsAuthGetRequest} investmentsAuthGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsAuthGet(investmentsAuthGetRequest, options) {
          return localVarFp.investmentsAuthGet(investmentsAuthGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.
         * @summary Get Investment holdings
         * @param {InvestmentsHoldingsGetRequest} investmentsHoldingsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsHoldingsGet(investmentsHoldingsGetRequest, options) {
          return localVarFp.investmentsHoldingsGet(investmentsHoldingsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/investments/refresh` is an optional endpoint for users of the Investments product. It initiates an on-demand extraction to fetch the newest investment holdings and transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Investments-enabled Item. If changes to investments are discovered after calling `/investments/refresh`, Plaid will fire webhooks: [`HOLDINGS: DEFAULT_UPDATE`](https://plaid.com/docs/api/products/investments/#holdings-default_update) if any new holdings are detected, and [`INVESTMENTS_TRANSACTIONS: DEFAULT_UPDATE`](https://plaid.com/docs/api/products/investments/#investments_transactions-default_update) if any new investment transactions are detected. This webhook will typically not fire in the Sandbox environment, due to the lack of dynamic investment transactions and holdings data. To test this webhook in Sandbox, call `/sandbox/item/fire_webhook`. Updated holdings and investment transactions can be fetched by calling `/investments/holdings/get` and `/investments/transactions/get`. Note that the `/investments/refresh` endpoint is not supported by all institutions. If called on an Item from an institution that does not support this functionality, it will return a `PRODUCT_NOT_SUPPORTED` error.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/investments/refresh` is offered as an add-on to Investments and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh investment data
         * @param {InvestmentsRefreshRequest} investmentsRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsRefresh(investmentsRefreshRequest, options) {
          return localVarFp.investmentsRefresh(investmentsRefreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/investments/transactions/get` endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.  Note that Investments does not have a webhook to indicate when initial transaction data has loaded (unless you use the `async_update` option). Instead, if transactions data is not ready when `/investments/transactions/get` is first called, Plaid will wait for the data. For this reason, calling `/investments/transactions/get` immediately after Link may take up to one to two minutes to return.  Data returned by the asynchronous investments extraction flow (when `async_update` is set to true) may not be immediately available to `/investments/transactions/get`. To be alerted when the data is ready to be fetched, listen for the `HISTORICAL_UPDATE` webhook. If no investments history is ready when `/investments/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
         * @summary Get investment transactions
         * @param {InvestmentsTransactionsGetRequest} investmentsTransactionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentsTransactionsGet(investmentsTransactionsGetRequest, options) {
          return localVarFp.investmentsTransactionsGet(investmentsTransactionsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve detailed information about a specific `Issue`. This endpoint returns a single `Issue` object.
         * @summary Get an Issue
         * @param {IssuesGetRequest} issuesGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesGet(issuesGetRequest, options) {
          return localVarFp.issuesGet(issuesGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for an issue associated with one of the following identifiers:  `item_id`, `link_session_id` or Link session `request_id`.  This endpoint returns a list of `Issue` objects, with an empty list indicating that no issues are associated with the provided identifier. At least one of the identifiers must be provided to perform the search.
         * @summary Search for an Issue
         * @param {IssuesSearchRequest} issuesSearchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesSearch(issuesSearchRequest, options) {
          return localVarFp.issuesSearch(issuesSearchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows a user to subscribe to updates on a specific `Issue` using a POST method. Subscribers will receive webhook notifications when the issue status changes, particularly when resolved.
         * @summary Subscribe to an Issue
         * @param {IssuesSubscribeRequest} issuesSubscribeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesSubscribe(issuesSubscribeRequest, options) {
          return localVarFp.issuesSubscribe(issuesSubscribeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`.
         * @summary Invalidate access_token
         * @param {ItemAccessTokenInvalidateRequest} itemAccessTokenInvalidateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest, options) {
          return localVarFp.itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List a historical log of user consent events
         * @summary List a historical log of user consent events
         * @param {ItemActivityListRequest} itemActivityListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemActivityList(itemActivityListRequest, options) {
          return localVarFp.itemActivityList(itemActivityListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List a user’s connected applications
         * @summary List a user’s connected applications
         * @param {ItemApplicationListRequest} itemApplicationListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemApplicationList(itemApplicationListRequest, options) {
          return localVarFp.itemApplicationList(itemApplicationListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable consumers to update product access on selected accounts for an application.
         * @summary Update the scopes of access for a particular application
         * @param {ItemApplicationScopesUpdateRequest} itemApplicationScopesUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest, options) {
          return localVarFp.itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Unlink a user’s connected application. On an unlink request, Plaid will immediately revoke the Application’s access to the User’s data.  The User will have to redo the OAuth authentication process in order to restore functionality.  This endpoint only removes ongoing data access permissions, therefore the User will need to reach out to the Application itself in order to disable and delete their account and delete any data that the Application already received (if the Application does not do so by default).  This endpoint should be called in real time as the User is unlinking an Application, and should not be batched in order to ensure that the change is reflected as soon as possible.
         * @summary Unlink a user’s connected application
         * @param {ItemApplicationUnlinkRequest} itemApplicationUnlinkRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemApplicationUnlink(itemApplicationUnlinkRequest, options) {
          return localVarFp.itemApplicationUnlink(itemApplicationUnlinkRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
         * @summary Create public token
         * @param {ItemPublicTokenCreateRequest} itemPublicTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemCreatePublicToken(itemPublicTokenCreateRequest, options) {
          return localVarFp.itemCreatePublicToken(itemPublicTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about the status of an Item.
         * @summary Retrieve an Item
         * @param {ItemGetRequest} itemGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemGet(itemGetRequest, options) {
          return localVarFp.itemGet(itemGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated.
         * @summary Import Item
         * @param {ItemImportRequest} itemImportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemImport(itemImportRequest, options) {
          return localVarFp.itemImport(itemImportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes. An `access_token` does not expire, but can be revoked by calling `/item/remove`.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
         * @summary Exchange public token for an access token
         * @param {ItemPublicTokenExchangeRequest} itemPublicTokenExchangeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemPublicTokenExchange(itemPublicTokenExchangeRequest, options) {
          return localVarFp.itemPublicTokenExchange(itemPublicTokenExchangeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/item/remove` endpoint allows you to remove an Item. Once removed, the `access_token`, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.   Calling `/item/remove` is a recommended best practice when offboarding users or if a user chooses to disconnect an account linked via Plaid. For subscription products, such as Transactions, Liabilities, and Investments, calling `/item/remove` is required to end subscription billing for the Item. For money movement products such as Auth and Transfer, if the Item is at an institution that uses Tokenized Account Numbers (TANs), such as Chase or PNC, calling `/item/remove` will invalidate the TAN, and subsequent ACH transfer attempts using that TAN will be returned.  In Limited Production, calling `/item/remove` does not impact the number of remaining Limited Production Items you have available.  Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove access to them specifically using the `/asset_report/remove` endpoint.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution\'s OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.
         * @summary Remove an Item
         * @param {ItemRemoveRequest} itemRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemRemove(itemRemoveRequest, options) {
          return localVarFp.itemRemove(itemRemoveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL.
         * @summary Update Webhook URL
         * @param {ItemWebhookUpdateRequest} itemWebhookUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemWebhookUpdate(itemWebhookUpdateRequest, options) {
          return localVarFp.itemWebhookUpdate(itemWebhookUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/link/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.
         * @summary Retrieve Liabilities data
         * @param {LiabilitiesGetRequest} liabilitiesGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        liabilitiesGet(liabilitiesGetRequest, options) {
          return localVarFp.liabilitiesGet(liabilitiesGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/link_delivery/create` endpoint to create a Hosted Link session.
         * @summary Create Hosted Link session
         * @param {LinkDeliveryCreateRequest} linkDeliveryCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkDeliveryCreate(linkDeliveryCreateRequest, options) {
          return localVarFp.linkDeliveryCreate(linkDeliveryCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/link_delivery/get` endpoint to get the status of a Hosted Link session.
         * @summary Get Hosted Link session
         * @param {LinkDeliveryGetRequest} linkDeliveryGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkDeliveryGet(linkDeliveryGetRequest, options) {
          return localVarFp.linkDeliveryGet(linkDeliveryGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Exchange an OAuth `link_correlation_id` for the corresponding `link_token`. The `link_correlation_id` is only available for \'payment_initiation\' products and is provided to the client via the OAuth `redirect_uri` as a query parameter. The `link_correlation_id` is ephemeral and expires in a brief period, after which it can no longer be exchanged for the \'link_token\'.
         * @summary Exchange the Link Correlation Id for a Link Token
         * @param {LinkOAuthCorrelationIdExchangeRequest} linkOAuthCorrelationIdExchangeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkOauthCorrelationIdExchange(linkOAuthCorrelationIdExchangeRequest, options) {
          return localVarFp.linkOauthCorrelationIdExchange(linkOAuthCorrelationIdExchangeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`. For most Plaid products, the `public_token` is saved and exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow. For more details, see the [Link flow overview](https://plaid.com/docs/link/#link-flow-overview).  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the [update mode](https://plaid.com/docs/link/update-mode) flow for tokens with expired credentials, or the Identity Verification flow.
         * @summary Create Link Token
         * @param {LinkTokenCreateRequest} linkTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkTokenCreate(linkTokenCreateRequest, options) {
          return localVarFp.linkTokenCreate(linkTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/link/token/get` endpoint gets information about a Link session, including all callbacks fired during the session along with their metadata, including the public token. This endpoint is used with Link flows that don\'t provide a public token via frontend callbacks, such as the [Hosted Link flow](https://plaid.com/docs/link/hosted-link/) and the [Multi-Item Link flow](https://plaid.com/docs/link/multi-item-link/). It also can be useful for debugging purposes.
         * @summary Get Link Token
         * @param {LinkTokenGetRequest} linkTokenGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkTokenGet(linkTokenGetRequest, options) {
          return localVarFp.linkTokenGet(linkTokenGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to retrieve the Network Insights from a list of `access_tokens`.
         * @summary Retrieve network insights for the provided `access_tokens`
         * @param {NetworkInsightsReportGetRequest} networkInsightsReportGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkInsightsReportGet(networkInsightsReportGetRequest, options) {
          return localVarFp.networkInsightsReportGet(networkInsightsReportGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/network/status/get` endpoint can be used to check whether Plaid has a matching profile for the user. This is useful for determining if a user is eligible for a streamlined experience, such as Layer.  Note: it is strongly recommended to check for Layer eligibility in the frontend. `/network/status/get` should only be used for checking Layer eligibility if a frontend check is not possible for your use case. For instructions on performing a frontend eligibility check, see the [Layer documentation](https://plaid.com/docs/layer/#integration-overview).
         * @summary Check a user\'s Plaid Network status
         * @param {NetworkStatusGetRequest} networkStatusGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkStatusGet(networkStatusGetRequest, options) {
          return localVarFp.networkStatusGet(networkStatusGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/partner/customer/create` endpoint is used by reseller partners to create end customers. To create end customers, it should be called in the Production environment only, even when creating Sandbox API keys. If called in the Sandbox environment, it will return a sample response, but no customer will be created and the API keys will not be valid.
         * @summary Creates a new end customer for a Plaid reseller.
         * @param {PartnerCustomerCreateRequest} partnerCustomerCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerCreate(partnerCustomerCreateRequest, options) {
          return localVarFp.partnerCustomerCreate(partnerCustomerCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/partner/customer/enable` endpoint is used by reseller partners to enable an end customer in the full Production environment.
         * @summary Enables a Plaid reseller\'s end customer in the Production environment.
         * @param {PartnerCustomerEnableRequest} partnerCustomerEnableRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerEnable(partnerCustomerEnableRequest, options) {
          return localVarFp.partnerCustomerEnable(partnerCustomerEnableRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/partner/customer/get` endpoint is used by reseller partners to retrieve data about a single end customer.
         * @summary Returns a Plaid reseller\'s end customer.
         * @param {PartnerCustomerGetRequest} partnerCustomerGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerGet(partnerCustomerGetRequest, options) {
          return localVarFp.partnerCustomerGet(partnerCustomerGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/partner/customer/oauth_institutions/get` endpoint is used by reseller partners to retrieve OAuth-institution registration information about a single end customer. To learn how to set up a webhook to listen to status update events, visit the [reseller documentation](https://plaid.com/docs/account/resellers/#enabling-end-customers).
         * @summary Returns OAuth-institution registration information for a given end customer.
         * @param {PartnerCustomerOAuthInstitutionsGetRequest} partnerCustomerOAuthInstitutionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerOauthInstitutionsGet(partnerCustomerOAuthInstitutionsGetRequest, options) {
          return localVarFp.partnerCustomerOauthInstitutionsGet(partnerCustomerOAuthInstitutionsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/partner/customer/remove` endpoint is used by reseller partners to remove an end customer. Removing an end customer will remove it from view in the Plaid Dashboard and deactivate its API keys. This endpoint can only be used to remove an end customer that has not yet been enabled in full Production.
         * @summary Removes a Plaid reseller\'s end customer.
         * @param {PartnerCustomerRemoveRequest} partnerCustomerRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partnerCustomerRemove(partnerCustomerRemoveRequest, options) {
          return localVarFp.partnerCustomerRemove(partnerCustomerRemoveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/payment_initiation/consent/create` endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with `UNAUTHORISED` status by default and must be authorised by the user before payments can be initiated.  Consents can be limited in time and scope, and have constraints that describe limitations for payments.
         * @summary Create payment consent
         * @param {PaymentInitiationConsentCreateRequest} paymentInitiationConsentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentCreate(paymentInitiationConsentCreateRequest, options) {
          return localVarFp.paymentInitiationConsentCreate(paymentInitiationConsentCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/payment_initiation/consent/get` endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints.
         * @summary Get payment consent
         * @param {PaymentInitiationConsentGetRequest} paymentInitiationConsentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentGet(paymentInitiationConsentGetRequest, options) {
          return localVarFp.paymentInitiationConsentGet(paymentInitiationConsentGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/payment_initiation/consent/payment/execute` endpoint can be used to execute payments using payment consent.
         * @summary Execute a single payment using consent
         * @param {PaymentInitiationConsentPaymentExecuteRequest} paymentInitiationConsentPaymentExecuteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentPaymentExecute(paymentInitiationConsentPaymentExecuteRequest, options) {
          return localVarFp.paymentInitiationConsentPaymentExecute(paymentInitiationConsentPaymentExecuteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/payment_initiation/consent/revoke` endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it.
         * @summary Revoke payment consent
         * @param {PaymentInitiationConsentRevokeRequest} paymentInitiationConsentRevokeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationConsentRevoke(paymentInitiationConsentRevokeRequest, options) {
          return localVarFp.paymentInitiationConsentRevoke(paymentInitiationConsentRevokeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR, GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency).  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer, GBP-denominated payments will be sent via the Faster Payments network and for non-Eurozone markets typically via the local payment scheme, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer or other local payment schemes will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In Limited Production, payments must be below 5 GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency), and standing orders, variable recurring payments, and Virtual Accounts are not supported.
         * @summary Create a payment
         * @param {PaymentInitiationPaymentCreateRequest} paymentInitiationPaymentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest, options) {
          return localVarFp.paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
         * @summary Get payment details
         * @param {PaymentInitiationPaymentGetRequest} paymentInitiationPaymentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest, options) {
          return localVarFp.paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.
         * @summary List payments
         * @param {PaymentInitiationPaymentListRequest} paymentInitiationPaymentListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentList(paymentInitiationPaymentListRequest, options) {
          return localVarFp.paymentInitiationPaymentList(paymentInitiationPaymentListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Reverse a settled payment from a Plaid virtual account.  The original payment must be in a settled state to be refunded. To refund partially, specify the amount as part of the request. If the amount is not specified, the refund amount will be equal to all of the remaining payment amount that has not been refunded yet.  The refund will go back to the source account that initiated the payment. The original payment must have been initiated to a Plaid virtual account so that this account can be used to initiate the refund.  Providing counterparty information such as date of birth and address increases  the likelihood of refund being successful without human intervention.
         * @summary Reverse an existing payment
         * @param {PaymentInitiationPaymentReverseRequest} paymentInitiationPaymentReverseRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest, options) {
          return localVarFp.paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA) or a non-Eurozone country [supported](https://plaid.com/global) by Plaid. For a standing order (recurring) payment, the recipient must be in the UK.  It is recommended to use `bacs` in the UK and `iban` in EU.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`.
         * @summary Create payment recipient
         * @param {PaymentInitiationRecipientCreateRequest} paymentInitiationRecipientCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest, options) {
          return localVarFp.paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details about a payment recipient you have previously created.
         * @summary Get payment recipient
         * @param {PaymentInitiationRecipientGetRequest} paymentInitiationRecipientGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest, options) {
          return localVarFp.paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.
         * @summary List payment recipients
         * @param {PaymentInitiationRecipientListRequest} paymentInitiationRecipientListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentInitiationRecipientList(paymentInitiationRecipientListRequest, options) {
          return localVarFp.paymentInitiationRecipientList(paymentInitiationRecipientListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use `/payment_profile/create` endpoint to create a new payment profile. To initiate the account linking experience, call `/link/token/create` and provide the `payment_profile_token` in the `transfer.payment_profile_token` field. You can then use the `payment_profile_token` when creating transfers using `/transfer/authorization/create` and `/transfer/create`.
         * @summary Create payment profile
         * @param {PaymentProfileCreateRequest} paymentProfileCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentProfileCreate(paymentProfileCreateRequest, options) {
          return localVarFp.paymentProfileCreate(paymentProfileCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use `/payment_profile/get` endpoint to get the status of a given Payment Profile.
         * @summary Get payment profile
         * @param {PaymentProfileGetRequest} paymentProfileGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentProfileGet(paymentProfileGetRequest, options) {
          return localVarFp.paymentProfileGet(paymentProfileGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/payment_profile/remove` endpoint to remove a given Payment Profile. Once it’s removed, it can no longer be used to create transfers.
         * @summary Remove payment profile
         * @param {PaymentProfileRemoveRequest} paymentProfileRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentProfileRemove(paymentProfileRemoveRequest, options) {
          return localVarFp.paymentProfileRemove(paymentProfileRemoveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the account associated with a given processor token.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, the account balance returned may not be up-to-date; for realtime balance information, use `/processor/balance/get` instead. Note that some information is nullable.
         * @summary Retrieve the account associated with a processor token
         * @param {ProcessorAccountGetRequest} processorAccountGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorAccountGet(processorAccountGetRequest, options) {
          return localVarFp.processorAccountGet(processorAccountGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
         * @summary Create Apex bank account token
         * @param {ProcessorApexProcessorTokenCreateRequest} processorApexProcessorTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest, options) {
          return localVarFp.processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking, savings, or cash management account that\'\'s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.  Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14).
         * @summary Retrieve Auth data
         * @param {ProcessorAuthGetRequest} processorAuthGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorAuthGet(processorAuthGetRequest, options) {
          return localVarFp.processorAuthGet(processorAuthGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/processor/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached.
         * @summary Retrieve Balance data
         * @param {ProcessorBalanceGetRequest} processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorBalanceGet(processorBalanceGetRequest, options) {
          return localVarFp.processorBalanceGet(processorBalanceGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor
         * @summary Create a bank transfer as a processor
         * @param {ProcessorBankTransferCreateRequest} processorBankTransferCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorBankTransferCreate(processorBankTransferCreateRequest, options) {
          return localVarFp.processorBankTransferCreate(processorBankTransferCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
         * @summary Retrieve Identity data
         * @param {ProcessorIdentityGetRequest} processorIdentityGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorIdentityGet(processorIdentityGetRequest, options) {
          return localVarFp.processorIdentityGet(processorIdentityGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/processor/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder\'s financial institution.  Fields within the `balances` object will always be null when retrieved by `/identity/match`. Instead, use the free `/accounts/get` endpoint to request balance cached data, or `/accounts/balance/get` for real-time data.
         * @summary Retrieve identity match score
         * @param {ProcessorIdentityMatchRequest} processorIdentityMatchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorIdentityMatch(processorIdentityMatchRequest, options) {
          return localVarFp.processorIdentityMatch(processorIdentityMatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the stock position data of the account associated with a given processor token.
         * @summary Retrieve Investment Holdings
         * @param {ProcessorInvestmentsHoldingsGetRequest} processorInvestmentsHoldingsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorInvestmentsHoldingsGet(processorInvestmentsHoldingsGetRequest, options) {
          return localVarFp.processorInvestmentsHoldingsGet(processorInvestmentsHoldingsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/processor/investments/transactions/get` endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for the investment account associated with the processor token.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with the account, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.  Note that Investments does not have a webhook to indicate when initial transaction data has loaded (unless you use the `async_update` option). Instead, if transactions data is not ready when `/processor/investments/transactions/get` is first called, Plaid will wait for the data. For this reason, calling `/processor/investments/transactions/get` immediately after Link may take up to one to two minutes to return.  Data returned by the asynchronous investments extraction flow (when `async_update` is set to true) may not be immediately available to `/processor/investments/transactions/get`. To be alerted when the data is ready to be fetched, listen for the `HISTORICAL_UPDATE` webhook. If no investments history is ready when `/processor/investments/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.  To receive Investments Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
         * @summary Get investment transactions data
         * @param {ProcessorInvestmentsTransactionsGetRequest} processorInvestmentsTransactionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorInvestmentsTransactionsGet(processorInvestmentsTransactionsGetRequest, options) {
          return localVarFp.processorInvestmentsTransactionsGet(processorInvestmentsTransactionsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/processor/liabilities/get` endpoint returns various details about a loan or credit account. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`.  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/processor/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the processor token. This is because Plaid must communicate directly with the institution to retrieve the additional data.
         * @summary Retrieve Liabilities data
         * @param {ProcessorLiabilitiesGetRequest} processorLiabilitiesGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorLiabilitiesGet(processorLiabilitiesGetRequest, options) {
          return localVarFp.processorLiabilitiesGet(processorLiabilitiesGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * After calling `/processor/signal/evaluate`, call `/processor/signal/decision/report` to report whether the transaction was initiated.  If you are using the [Plaid Transfer product](https://www.plaid.com/docs/transfer) to create transfers, it is not necessary to use this endpoint, as Plaid already knows whether the transfer was initiated.
         * @summary Report whether you initiated an ACH transaction
         * @param {ProcessorSignalDecisionReportRequest} processorSignalDecisionReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorSignalDecisionReport(processorSignalDecisionReportRequest, options) {
          return localVarFp.processorSignalDecisionReport(processorSignalDecisionReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use `/processor/signal/evaluate` to evaluate a planned ACH transaction as a processor to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/processor/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to our error documentation on [item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time. To reduce this latency, you can call `/signal/prepare` on the Item before you need to request Signal data.
         * @summary Evaluate a planned ACH transaction
         * @param {ProcessorSignalEvaluateRequest} processorSignalEvaluateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorSignalEvaluate(processorSignalEvaluateRequest, options) {
          return localVarFp.processorSignalEvaluate(processorSignalEvaluateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * When a processor token is not initialized with Signal, call `/processor/signal/prepare` to opt-in that processor token to the Signal data collection process, which will improve the accuracy of the Signal score.  If this endpoint is called with a processor token that is already initialized with Signal, it will return a 200 response and will not modify the processor token.
         * @summary Opt-in a processor token to Signal
         * @param {ProcessorSignalPrepareRequest} processorSignalPrepareRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorSignalPrepare(processorSignalPrepareRequest, options) {
          return localVarFp.processorSignalPrepare(processorSignalPrepareRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Call the `/processor/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/processor/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.  If you are using the [Plaid Transfer product](https://www.plaid.com/docs/transfer) to create transfers, it is not necessary to use this endpoint, as Plaid already knows whether the transfer was returned.
         * @summary Report a return for an ACH transaction
         * @param {ProcessorSignalReturnReportRequest} processorSignalReturnReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorSignalReturnReport(processorSignalReturnReportRequest, options) {
          return localVarFp.processorSignalReturnReport(processorSignalReturnReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *  Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).  Note that the Stripe bank account token is a one-time use token. To store bank account information for later use, you can use a Stripe customer object and create an associated bank account from the token, or you can use a Stripe Custom account and create an associated external bank account from the token. This bank account information should work indefinitely, unless the user\'s bank account information changes or they revoke Plaid\'s permissions to access their account. Stripe bank account information cannot be modified once the bank account token has been created. If you ever need to change the bank account details used by Stripe for a specific customer, have the user go through Link again and create a new bank account token from the new `access_token`.  To revoke a bank account token, the entire underlying access token must be revoked using `/item/remove`.
         * @summary Create Stripe bank account token
         * @param {ProcessorStripeBankAccountTokenCreateRequest} processorStripeBankAccountTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest, options) {
          return localVarFp.processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Used to create a token suitable for sending to one of Plaid\'s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations. If using multiple processors, multiple different processor tokens can be created for a single access token. Once created, a processor token for a given Item cannot be modified or updated. To revoke the processor\'s access, the entire Item must be deleted by calling `/item/remove`.
         * @summary Create processor token
         * @param {ProcessorTokenCreateRequest} processorTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenCreate(processorTokenCreateRequest, options) {
          return localVarFp.processorTokenCreate(processorTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Used to get a processor token\'s product permissions. The `products` field will be an empty list if the processor can access all available products.
         * @summary Get a processor token\'s product permissions
         * @param {ProcessorTokenPermissionsGetRequest} processorTokenPermissionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenPermissionsGet(processorTokenPermissionsGetRequest, options) {
          return localVarFp.processorTokenPermissionsGet(processorTokenPermissionsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Used to control a processor\'s access to products on the given processor token. By default, a processor will have access to all available products on the corresponding item. To restrict access to a particular set of products, call this endpoint with the desired products. To restore access to all available products, call this endpoint with an empty list. This endpoint can be called multiple times as your needs and your processor\'s needs change.
         * @summary Control a processor\'s access to products
         * @param {ProcessorTokenPermissionsSetRequest} processorTokenPermissionsSetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenPermissionsSet(processorTokenPermissionsSetRequest, options) {
          return localVarFp.processorTokenPermissionsSet(processorTokenPermissionsSetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you, the processor, to update the webhook URL associated with a processor token. This request triggers a `WEBHOOK_UPDATE_ACKNOWLEDGED` webhook to the newly specified webhook URL.
         * @summary Update a processor token\'s webhook URL
         * @param {ProcessorTokenWebhookUpdateRequest} processorTokenWebhookUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTokenWebhookUpdate(processorTokenWebhookUpdateRequest, options) {
          return localVarFp.processorTokenWebhookUpdate(processorTokenWebhookUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/processor/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/processor/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with a processor token, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/processor/transactions/get` will be the data available for the processor token as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To force Plaid to check for new transactions, you can use the `/processor/transactions/refresh` endpoint.  Note that data may not be immediately available to `/processor/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/processor/transactions/get`, if it wasn\'t. If no transaction history is ready when `/processor/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
         * @summary Get transaction data
         * @param {ProcessorTransactionsGetRequest} processorTransactionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsGet(processorTransactionsGetRequest, options) {
          return localVarFp.processorTransactionsGet(processorTransactionsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/processor/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on a processor token that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/processor/transactions/get` or `/processor/transactions/sync`). Once all historical transactions have been fetched, call `/processor/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/processor/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/processor/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/processor/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
         * @summary Fetch recurring transaction streams
         * @param {ProcessorTransactionsRecurringGetRequest} processorTransactionsRecurringGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsRecurringGet(processorTransactionsRecurringGetRequest, options) {
          return localVarFp.processorTransactionsRecurringGet(processorTransactionsRecurringGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/processor/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for a processor token. This on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Transactions-enabled processor token. If changes to transactions are discovered after calling `/processor/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/processor/transactions/sync` and `/processor/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/processor/transactions/get` or `/processor/transactions/sync`. Note that the `/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) non-depository accounts and will result in a `PRODUCTS_NOT_SUPPORTED` error if called on an Item that contains only non-depository accounts from that institution.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/processor/transactions/refresh` is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh transaction data
         * @param {ProcessorTransactionsRefreshRequest} processorTransactionsRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsRefresh(processorTransactionsRefreshRequest, options) {
          return localVarFp.processorTransactionsRefresh(processorTransactionsRefreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *  The `/processor/transactions/sync` endpoint retrieves transactions associated with an Item and can fetch updates using a cursor to track which updates have already been seen.  For important instructions on integrating with `/processor/transactions/sync`, see the [Transactions integration overview](https://plaid.com/docs/transactions/#integration-overview). If you are migrating from an existing integration using `/processor/transactions/get`, see the [Transactions Sync migration guide](https://plaid.com/docs/transactions/sync-migration/).  This endpoint supports `credit`, `depository`, and some `loan`-type accounts (only those with account subtype `student`). For `investments` accounts, use `/investments/transactions/get` instead.  When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/processor/transactions/sync` fails when retrieving a paginated update (e.g due to the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error), the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  If transactions data is not yet available for the Item, which can happen if the Item was not initialized with transactions during the `/link/token/create` call or if `/processor/transactions/sync` was called within a few seconds of Item creation, `/processor/transactions/sync` will return empty transactions arrays.   Plaid typically checks for new transactions data between one and four times per day, depending on the institution. To find out when transactions were last updated for an Item, use the [Item Debugger](https://plaid.com/docs/account/activity/#troubleshooting-with-item-debugger) or call `/item/get`; the `item.status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/processor/transactions/refresh` endpoint.  To be alerted when new transactions are available, listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
         * @summary Get incremental transaction updates on a processor token
         * @param {ProcessorTransactionsSyncRequest} processorTransactionsSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processorTransactionsSync(processorTransactionsSyncRequest, options) {
          return localVarFp.processorTransactionsSync(processorTransactionsSyncRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/profile/network_status/get` endpoint can be used to check whether Plaid has a matching profile for the user.
         * @summary Check a user\'s Plaid Network status
         * @param {ProfileNetworkStatusGetRequest} profileNetworkStatusGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileNetworkStatusGet(profileNetworkStatusGetRequest, options) {
          return localVarFp.profileNetworkStatusGet(profileNetworkStatusGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/bank_income/fire_webhook` endpoint to manually trigger a Bank Income webhook in the Sandbox environment.
         * @summary Manually fire a bank income webhook in sandbox
         * @param {SandboxBankIncomeFireWebhookRequest} sandboxBankIncomeFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxBankIncomeFireWebhook(sandboxBankIncomeFireWebhookRequest, options) {
          return localVarFp.sandboxBankIncomeFireWebhook(sandboxBankIncomeFireWebhookRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
         * @summary Manually fire a Bank Transfer webhook
         * @param {SandboxBankTransferFireWebhookRequest} sandboxBankTransferFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest, options) {
          return localVarFp.sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
         * @summary Simulate a bank transfer event in Sandbox
         * @param {SandboxBankTransferSimulateRequest} sandboxBankTransferSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest, options) {
          return localVarFp.sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/cra/cashflow_updates/update` endpoint to manually trigger an update for cashflow updates (Monitoring) in the Sandbox environment.
         * @summary Trigger an update for Cashflow Updates
         * @param {SandboxCraCashflowUpdatesUpdateRequest} sandboxCraCashflowUpdatesUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxCraCashflowUpdatesUpdate(sandboxCraCashflowUpdatesUpdateRequest, options) {
          return localVarFp.sandboxCraCashflowUpdatesUpdate(sandboxCraCashflowUpdatesUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/income/fire_webhook` endpoint to manually trigger a Payroll or Document Income webhook in the Sandbox environment.
         * @summary Manually fire an Income webhook
         * @param {SandboxIncomeFireWebhookRequest} sandboxIncomeFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest, options) {
          return localVarFp.sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks:  `DEFAULT_UPDATE`: Webhook to be fired for a given Sandbox Item simulating a default update event for the respective product as specified with the `webhook_type` in the request body. Valid Sandbox `DEFAULT_UPDATE` webhook types include: `AUTH`, `IDENTITY`, `TRANSACTIONS`, `INVESTMENTS_TRANSACTIONS`, `LIABILITIES`, `HOLDINGS`. If the Item does not support the product, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `NEW_ACCOUNTS_AVAILABLE`: Fired to indicate that a new account is available on the Item and you can launch update mode to request access to it.  `SMS_MICRODEPOSITS_VERIFICATION`: Fired when a given same day micro-deposit item is verified via SMS verification.  `LOGIN_REPAIRED`: Fired when an Item recovers from the `ITEM_LOGIN_REQUIRED` without the user going through update mode in your app.  `PENDING_DISCONNECT`: Fired when an Item will stop working in the near future (e.g. due to a planned bank migration) and must be sent through update mode to continue working.   `RECURRING_TRANSACTIONS_UPDATE`: Recurring Transactions webhook to be fired for a given Sandbox Item. If the Item does not support Recurring Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `SYNC_UPDATES_AVAILABLE`: Transactions webhook to be fired for a given Sandbox Item.  If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `PRODUCT_READY`: Assets webhook to be fired when a given asset report has been successfully generated. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `ERROR`: Assets webhook to be fired when asset report generation has failed. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `USER_PERMISSION_REVOKED`: Indicates an end user has revoked the permission that they previously granted to access an Item. May not always fire upon revocation, as some institutions’ consent portals do not trigger this webhook. Upon receiving this webhook, it is recommended to delete any stored data from Plaid associated with the account or Item.  `USER_ACCOUNT_REVOKED`: Fired when an end user has revoked access to their account on the Data Provider\'s portal. This webhook is currently sent only for Chase and PNC Items, but may be sent in the future for other financial institutions. Upon receiving this webhook, it is recommended to delete any stored data from Plaid associated with the account or Item.  Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production (except for webhooks of type `TRANSFER`).
         * @summary Fire a test webhook
         * @param {SandboxItemFireWebhookRequest} sandboxItemFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemFireWebhook(sandboxItemFireWebhookRequest, options) {
          return localVarFp.sandboxItemFireWebhook(sandboxItemFireWebhookRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
         * @summary Force a Sandbox Item into an error state
         * @param {SandboxItemResetLoginRequest} sandboxItemResetLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemResetLogin(sandboxItemResetLoginRequest, options) {
          return localVarFp.sandboxItemResetLogin(sandboxItemResetLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
         * @summary Set verification status for Sandbox account
         * @param {SandboxItemSetVerificationStatusRequest} sandboxItemSetVerificationStatusRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest, options) {
          return localVarFp.sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Save the selected accounts when connecting to the Platypus Oauth institution
         * @summary Save the selected accounts when connecting to the Platypus Oauth institution
         * @param {SandboxOauthSelectAccountsRequest} sandboxOauthSelectAccountsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest, options) {
          return localVarFp.sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/sandbox/payment_profile/reset_login/` forces a Payment Profile into a state where the login is no longer valid. This makes it easy to test update mode for Payment Profile in the Sandbox environment.   After calling `/sandbox/payment_profile/reset_login`, calls to the `/transfer/authorization/create` with the Payment Profile will result in a `decision_rationale` `PAYMENT_PROFILE_LOGIN_REQUIRED`. You can then use update mode for Payment Profile to restore it into a good state.   In order to invoke this endpoint, you must first [create a Payment Profile](https://plaid.com/docs/transfer/add-to-app/#create-a-payment-profile-optional) and [go through the Link flow](https://plaid.com/docs/transfer/add-to-app/#create-a-link-token).
         * @summary Reset the login of a Payment Profile
         * @param {SandboxPaymentProfileResetLoginRequest} sandboxPaymentProfileResetLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxPaymentProfileResetLogin(sandboxPaymentProfileResetLoginRequest, options) {
          return localVarFp.sandboxPaymentProfileResetLogin(sandboxPaymentProfileResetLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/payment/simulate` endpoint to simulate various payment events in the Sandbox environment. This endpoint will trigger the corresponding payment status webhook.
         * @summary Simulate a payment event in Sandbox
         * @param {SandboxPaymentSimulateRequest} sandboxPaymentSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxPaymentSimulate(sandboxPaymentSimulateRequest, options) {
          return localVarFp.sandboxPaymentSimulate(sandboxPaymentSimulateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
         * @summary Create a test Item and processor token
         * @param {SandboxProcessorTokenCreateRequest} sandboxProcessorTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest, options) {
          return localVarFp.sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data, or with Plaid\'s [pre-populated Sandbox test accounts](https://plaid.com/docs/sandbox/test-credentials/).
         * @summary Create a test Item
         * @param {SandboxPublicTokenCreateRequest} sandboxPublicTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest, options) {
          return localVarFp.sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/transfer/fire_webhook` endpoint to manually trigger a `TRANSFER_EVENTS_UPDATE` webhook in the Sandbox environment.
         * @summary Manually fire a Transfer webhook
         * @param {SandboxTransferFireWebhookRequest} sandboxTransferFireWebhookRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferFireWebhook(sandboxTransferFireWebhookRequest, options) {
          return localVarFp.sandboxTransferFireWebhook(sandboxTransferFireWebhookRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/transfer/ledger/deposit/simulate` endpoint to simulate a ledger deposit event in the Sandbox environment.
         * @summary Simulate a ledger deposit event in Sandbox
         * @param {SandboxTransferLedgerDepositSimulateRequest} sandboxTransferLedgerDepositSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferLedgerDepositSimulate(sandboxTransferLedgerDepositSimulateRequest, options) {
          return localVarFp.sandboxTransferLedgerDepositSimulate(sandboxTransferLedgerDepositSimulateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/transfer/ledger/simulate_available` endpoint to simulate converting pending balance to available balance for all originators in the Sandbox environment.
         * @summary Simulate converting pending balance to available balance
         * @param {SandboxTransferLedgerSimulateAvailableRequest} sandboxTransferLedgerSimulateAvailableRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferLedgerSimulateAvailable(sandboxTransferLedgerSimulateAvailableRequest, options) {
          return localVarFp.sandboxTransferLedgerSimulateAvailable(sandboxTransferLedgerSimulateAvailableRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/transfer/ledger/withdraw/simulate` endpoint to simulate a ledger withdraw event in the Sandbox environment.
         * @summary Simulate a ledger withdraw event in Sandbox
         * @param {SandboxTransferLedgerWithdrawSimulateRequest} sandboxTransferLedgerWithdrawSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferLedgerWithdrawSimulate(sandboxTransferLedgerWithdrawSimulateRequest, options) {
          return localVarFp.sandboxTransferLedgerWithdrawSimulate(sandboxTransferLedgerWithdrawSimulateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/transfer/refund/simulate` endpoint to simulate a refund event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
         * @summary Simulate a refund event in Sandbox
         * @param {SandboxTransferRefundSimulateRequest} sandboxTransferRefundSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferRefundSimulate(sandboxTransferRefundSimulateRequest, options) {
          return localVarFp.sandboxTransferRefundSimulate(sandboxTransferRefundSimulateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
         * @summary Trigger the creation of a repayment
         * @param {SandboxTransferRepaymentSimulateRequest} sandboxTransferRepaymentSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest, options) {
          return localVarFp.sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
         * @summary Simulate a transfer event in Sandbox
         * @param {SandboxTransferSimulateRequest} sandboxTransferSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferSimulate(sandboxTransferSimulateRequest, options) {
          return localVarFp.sandboxTransferSimulate(sandboxTransferSimulateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all transfers with a sweep status of `swept` will become `swept_settled`, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `returned` transfers with a sweep status of `swept` will become `return_swept`.
         * @summary Simulate creating a sweep
         * @param {SandboxTransferSweepSimulateRequest} sandboxTransferSweepSimulateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest, options) {
          return localVarFp.sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/transfer/test_clock/advance` endpoint to advance a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. A test clock can be advanced by incrementing `virtual_time`, but may never go back to a lower `virtual_time`.  If a test clock is advanced, we will simulate the changes that ought to occur during the time that elapsed.  For example, a client creates a weekly recurring transfer with a test clock set at t. When the client advances the test clock by setting `virtual_time` = t + 15 days, 2 new originations should be created, along with the webhook events.  The advancement of the test clock from its current `virtual_time` should be limited such that there are no more than 20 originations resulting from the advance operation on each `recurring_transfer` associated with the `test_clock`.  For example, if the recurring transfer associated with this test clock originates once every 4 weeks, you can advance the `virtual_time` up to 80 weeks on each API call.
         * @summary Advance a test clock
         * @param {SandboxTransferTestClockAdvanceRequest} sandboxTransferTestClockAdvanceRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockAdvance(sandboxTransferTestClockAdvanceRequest, options) {
          return localVarFp.sandboxTransferTestClockAdvance(sandboxTransferTestClockAdvanceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/transfer/test_clock/create` endpoint to create a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. Test clocks are used for testing recurring transfers in Sandbox.  A test clock can be associated with up to 5 recurring transfers.
         * @summary Create a test clock
         * @param {SandboxTransferTestClockCreateRequest} sandboxTransferTestClockCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockCreate(sandboxTransferTestClockCreateRequest, options) {
          return localVarFp.sandboxTransferTestClockCreate(sandboxTransferTestClockCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/transfer/test_clock/get` endpoint to get a `test_clock` in the Sandbox environment.
         * @summary Get a test clock
         * @param {SandboxTransferTestClockGetRequest} sandboxTransferTestClockGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockGet(sandboxTransferTestClockGetRequest, options) {
          return localVarFp.sandboxTransferTestClockGet(sandboxTransferTestClockGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/sandbox/transfer/test_clock/list` endpoint to see a list of all your test clocks in the Sandbox environment, by ascending `virtual_time`. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired test clocks.
         * @summary List test clocks
         * @param {SandboxTransferTestClockListRequest} sandboxTransferTestClockListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxTransferTestClockList(sandboxTransferTestClockListRequest, options) {
          return localVarFp.sandboxTransferTestClockList(sandboxTransferTestClockListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/sandbox/user/reset_login/` functions the same as `/sandbox/item/reset_login`, but will modify Items related to a User. This endpoint forces each Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/user/reset_login`, You can then use Plaid Link update mode to restore Items associated with the User to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
         * @summary Force item(s) for a Sandbox User into an error state
         * @param {SandboxUserResetLoginRequest} sandboxUserResetLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxUserResetLogin(sandboxUserResetLoginRequest, options) {
          return localVarFp.sandboxUserResetLogin(sandboxUserResetLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Any Plaid experience a user sees such as connecting a bank account, verifying identity, or sharing a credit report is considered a session. Today, most sessions happen through Link and the token to start these Link session is a link token created and configured via `link/token/create`. Sessions are a higher level abstraction where configuration primarily happens in Plaid Dashboard.  Depending on the template id provided, the session may a Link session, specified by a Link token, or may be another experience in the future. A primary benefit is that configuration changes can be done in Dashboard with no code changes required.  Currently, this endpoint is only supported for Layer templates and Link but is reserved in the future to initialize other end-user Plaid experiences. The returned Link token is used as an parameter when initializing the Link SDK. For more details, see the [Link flow overview](https://plaid.com/docs/link/#link-flow-overview).
         * @summary Create a Session Token
         * @param {SessionTokenCreateRequest} sessionTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionTokenCreate(sessionTokenCreateRequest, options) {
          return localVarFp.sessionTokenCreate(sessionTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated.
         * @summary Report whether you initiated an ACH transaction
         * @param {SignalDecisionReportRequest} signalDecisionReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalDecisionReport(signalDecisionReportRequest, options) {
          return localVarFp.signalDecisionReport(signalDecisionReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to the error documentation on [Item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time.
         * @summary Evaluate a planned ACH transaction
         * @param {SignalEvaluateRequest} signalEvaluateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalEvaluate(signalEvaluateRequest, options) {
          return localVarFp.signalEvaluate(signalEvaluateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * When an Item is not initialized with Signal, call `/signal/prepare` to opt-in that Item to the Signal data collection process, developing a Signal score. This should be done on Items where Signal was added in the `additional_consented_products` array but not in the `products`, `optional_products`, or `required_if_supported_products` array. If `/signal/prepare` is skipped on an Item that is not initialized with Signal, the initial call to `/signal/evaluate` on that Item will be less accurate, because Signal will have access to less data for computing the Signal score.  If run on an Item that is already initialized with Signal, this endpoint will return a 200 response and will not modify the Item.
         * @summary Opt-in an Item to Signal
         * @param {SignalPrepareRequest} signalPrepareRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalPrepare(signalPrepareRequest, options) {
          return localVarFp.signalPrepare(signalPrepareRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
         * @summary Report a return for an ACH transaction
         * @param {SignalReturnReportRequest} signalReturnReportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalReturnReport(signalReturnReportRequest, options) {
          return localVarFp.signalReturnReport(signalReturnReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use `/signal/schedule` to schedule a planned ACH transaction.
         * @summary Schedule a planned ACH transaction
         * @param {SignalScheduleRequest} signalScheduleRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signalSchedule(signalScheduleRequest, options) {
          return localVarFp.signalSchedule(signalScheduleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/statements/download` endpoint retrieves a single statement PDF in binary format.  The response will contain a `Plaid-Content-Hash` header containing a SHA 256 checksum of the statement. This can be used to verify that the file being sent by Plaid is the same file that was downloaded to your system.
         * @summary Retrieve a single statement.
         * @param {StatementsDownloadRequest} statementsDownloadRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statementsDownload(statementsDownloadRequest, options) {
          return localVarFp.statementsDownload(statementsDownloadRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/statements/list` endpoint retrieves a list of all statements associated with an item.
         * @summary Retrieve a list of all statements associated with an item.
         * @param {StatementsListRequest} statementsListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statementsList(statementsListRequest, options) {
          return localVarFp.statementsList(statementsListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/statements/refresh` initiates an on-demand extraction to fetch the statements for the provided dates.
         * @summary Refresh statements data.
         * @param {StatementsRefreshRequest} statementsRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statementsRefresh(statementsRefreshRequest, options) {
          return localVarFp.statementsRefresh(statementsRefreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/beta/transactions/v1/enhance` endpoint enriches raw transaction data provided directly by clients.  The product is currently in beta.
         * @summary enhance locally-held transaction data
         * @param {TransactionsEnhanceGetRequest} transactionsEnhanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsEnhance(transactionsEnhanceGetRequest, options) {
          return localVarFp.transactionsEnhance(transactionsEnhanceGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transactions/enrich` endpoint enriches raw transaction data generated by your own banking products or retrieved from other non-Plaid sources.
         * @summary Enrich locally-held transaction data
         * @param {TransactionsEnrichRequest} transactionsEnrichRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsEnrich(transactionsEnrichRequest, options) {
          return localVarFp.transactionsEnrich(transactionsEnrichRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Note: All new implementations are encouraged to use `/transactions/sync` rather than `/transactions/get`. `/transactions/sync` provides the same functionality as `/transactions/get` and improves developer ease-of-use for handling transactions updates.  The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To find out when the Item was last updated, use the [Item Debugger](https://plaid.com/docs/account/activity/#troubleshooting-with-item-debugger) or call `/item/get`; the `item.status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn\'t. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
         * @summary Get transaction data
         * @param {TransactionsGetRequest} transactionsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsGet(transactionsGetRequest, options) {
          return localVarFp.transactionsGet(transactionsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on an Item that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/transactions/get` or `/transactions/sync`).   When using Recurring Transactions, for best results, make sure to use the [`days_requested`](https://plaid.com/docs/api/link/#link-token-create-request-transactions-days-requested) parameter to request at least 180 days of history when initializing Items with Transactions. Once all historical transactions have been fetched, call `/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.
         * @summary Fetch recurring transaction streams
         * @param {TransactionsRecurringGetRequest} transactionsRecurringGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRecurringGet(transactionsRecurringGetRequest, options) {
          return localVarFp.transactionsRecurringGet(transactionsRecurringGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/transactions/refresh` is an optional endpoint that initiates an on-demand extraction to fetch the newest transactions for an Item. The on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Transactions-enabled Item. The Item must already have Transactions added as a product in order to call `/transactions/refresh`.  If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/transactions/sync` and `/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get` or `/transactions/sync`.  Note that the `/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) non-depository accounts and will result in a `PRODUCTS_NOT_SUPPORTED` error if called on an Item that contains only non-depository accounts from that institution.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/transactions/refresh` is offered as an optional add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
         * @summary Refresh transaction data
         * @param {TransactionsRefreshRequest} transactionsRefreshRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRefresh(transactionsRefreshRequest, options) {
          return localVarFp.transactionsRefresh(transactionsRefreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transactions/rules/v1/create` endpoint creates transaction categorization rules.  Rules will be applied on the Item\'s transactions returned in `/transactions/get` response.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
         * @summary Create transaction category rule
         * @param {TransactionsRulesCreateRequest} transactionsRulesCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesCreate(transactionsRulesCreateRequest, options) {
          return localVarFp.transactionsRulesCreate(transactionsRulesCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transactions/rules/v1/list` returns a list of transaction rules created for the Item associated with the access token.
         * @summary Return a list of rules created for the Item associated with the access token.
         * @param {TransactionsRulesListRequest} transactionsRulesListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesList(transactionsRulesListRequest, options) {
          return localVarFp.transactionsRulesList(transactionsRulesListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transactions/rules/v1/remove` endpoint is used to remove a transaction rule.
         * @summary Remove transaction rule
         * @param {TransactionsRulesRemoveRequest} transactionsRulesRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsRulesRemove(transactionsRulesRemoveRequest, options) {
          return localVarFp.transactionsRulesRemove(transactionsRulesRemoveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transactions/sync` endpoint retrieves transactions associated with an Item and can fetch updates using a cursor to track which updates have already been seen.  For important instructions on integrating with `/transactions/sync`, see the [Transactions integration overview](https://plaid.com/docs/transactions/#integration-overview). If you are migrating from an existing integration using `/transactions/get`, see the [Transactions Sync migration guide](https://plaid.com/docs/transactions/sync-migration/).  This endpoint supports `credit`, `depository`, and some `loan`-type accounts (only those with account subtype `student`). For `investments` accounts, use `/investments/transactions/get` instead.   When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/transactions/sync` fails when retrieving a paginated update (e.g due to the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error), the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  If transactions data is not yet available for the Item, which can happen if the Item was not initialized with transactions during the `/link/token/create` call or if `/transactions/sync` was called within a few seconds of Item creation, `/transactions/sync` will return empty transactions arrays.   Plaid typically checks for new transactions data between one and four times per day, depending on the institution. To find out when transactions were last updated for an Item, use the [Item Debugger](https://plaid.com/docs/account/activity/#troubleshooting-with-item-debugger) or call `/item/get`; the `item.status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/transactions/refresh` endpoint.  To be alerted when new transactions are available, listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.
         * @summary Get incremental transaction updates on an Item
         * @param {TransactionsSyncRequest} transactionsSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsSync(transactionsSyncRequest, options) {
          return localVarFp.transactionsSync(transactionsSyncRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/beta/transactions/user_insights/v1/get` gets user insights for clients who have enriched data with `/transactions/enrich`.  The product is currently in beta.
         * @summary Obtain user insights based on transactions sent through /transactions/enrich
         * @param {TransactionsUserInsightsGetRequest} transactionsUserInsightsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsUserInsightsGet(transactionsUserInsightsGetRequest, options) {
          return localVarFp.transactionsUserInsightsGet(transactionsUserInsightsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/authorization/cancel` endpoint to cancel a transfer authorization. A transfer authorization is eligible for cancellation if it has not yet been used to create a transfer.
         * @summary Cancel a transfer authorization
         * @param {TransferAuthorizationCancelRequest} transferAuthorizationCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferAuthorizationCancel(transferAuthorizationCancelRequest, options) {
          return localVarFp.transferAuthorizationCancel(transferAuthorizationCancelRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/authorization/create` endpoint to authorize a transfer. This endpoint must be called prior to calling `/transfer/create`. The transfer authorization will expire if not used after one hour. (You can contact your account manager to change the default authorization lifetime.)   There are four possible outcomes to calling this endpoint:     - If the `authorization.decision` in the response is `declined`, the proposed transfer has failed the risk check and you cannot proceed with the transfer.     - If the `authorization.decision` is `user_action_required`, additional user input is needed, usually to fix a broken bank connection, before Plaid can properly assess the risk. You need to launch Link in update mode to complete the required user action. When calling `/link/token/create` to get a new Link token, instead of providing `access_token` in the request, you should set [`transfer.authorization_id`](https://plaid.com/docs/api/link/#link-token-create-request-transfer-authorization-id) as the `authorization.id`. After the Link flow is completed, you may re-attempt the authorization.    - If the `authorization.decision` is `approved`, and the `authorization.rationale_code` is `null`, the transfer has passed the risk check and you can proceed to call `/transfer/create`.      - If the `authorization.decision` is `approved` and the `authorization.rationale_code` is non-`null`, the risk check could not be run: you may proceed with the transfer, but should perform your own risk evaluation. For more details, see the response schema.  In Plaid\'s Sandbox environment the decisions will be returned as follows:    - To approve a transfer with `null` rationale code, make an authorization request with an `amount` less than the available balance in the account.    - To approve a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To get an authorization decision of `user_action_required`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).    - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.
         * @summary Create a transfer authorization
         * @param {TransferAuthorizationCreateRequest} transferAuthorizationCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferAuthorizationCreate(transferAuthorizationCreateRequest, options) {
          return localVarFp.transferAuthorizationCreate(transferAuthorizationCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * (Deprecated) Use the `/transfer/balance/get` endpoint to view a balance held with Plaid.
         * @summary (Deprecated) Retrieve a balance held with Plaid
         * @param {TransferBalanceGetRequest} transferBalanceGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferBalanceGet(transferBalanceGetRequest, options) {
          return localVarFp.transferBalanceGet(transferBalanceGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancellation if the `cancellable` property returned by `/transfer/get` is `true`.
         * @summary Cancel a transfer
         * @param {TransferCancelRequest} transferCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCancel(transferCancelRequest, options) {
          return localVarFp.transferCancel(transferCancelRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/capabilities/get` endpoint to determine the RTP eligibility information of an account to be used with Transfer. This endpoint works on all Transfer-capable Items, including those created by `/transfer/migrate_account`. To simulate RTP eligibility in Sandbox, log in using the username `user_good` and password `pass_good` and use the first two checking and savings accounts in the \"First Platypus Bank\" institution (ending in 0000 or 1111), which will return `true`. Any other account will return `false`.
         * @summary Get RTP eligibility information of a transfer
         * @param {TransferCapabilitiesGetRequest} transferCapabilitiesGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCapabilitiesGet(transferCapabilitiesGetRequest, options) {
          return localVarFp.transferCapabilitiesGet(transferCapabilitiesGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/configuration/get` endpoint to view your transfer product configurations.
         * @summary Get transfer product configuration
         * @param {TransferConfigurationGetRequest} transferConfigurationGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferConfigurationGet(transferConfigurationGetRequest, options) {
          return localVarFp.transferConfigurationGet(transferConfigurationGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/create` endpoint to initiate a new transfer. This endpoint is retryable and idempotent; if a transfer with the provided `transfer_id` has already been created, it will return the transfer details without creating a new transfer. A transfer may still be created if a 500 error is returned; to detect this scenario, use [Transfer events](https://plaid.com/docs/transfer/reconciling-transfers/).
         * @summary Create a transfer
         * @param {TransferCreateRequest} transferCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferCreate(transferCreateRequest, options) {
          return localVarFp.transferCreate(transferCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Third-party sender customers can use `/transfer/diligence/document/upload` endpoint to upload a document on behalf of its end customer (i.e. originator) to Plaid. You’ll need to send a request of type multipart/form-data. You must provide the `client_id` in the `PLAID-CLIENT-ID` header and `secret` in the `PLAID-SECRET` header.
         * @summary Upload transfer diligence document on behalf of the originator
         * @param {TransferDiligenceDocumentUploadRequest} transferDiligenceDocumentUploadRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferDiligenceDocumentUpload(transferDiligenceDocumentUploadRequest, options) {
          return localVarFp.transferDiligenceDocumentUpload(transferDiligenceDocumentUploadRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/diligence/submit` endpoint to submit transfer diligence on behalf of the originator (i.e., the end customer).
         * @summary Submit transfer diligence on behalf of the originator
         * @param {TransferDiligenceSubmitRequest} transferDiligenceSubmitRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferDiligenceSubmit(transferDiligenceSubmitRequest, options) {
          return localVarFp.transferDiligenceSubmit(transferDiligenceSubmitRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.
         * @summary List transfer events
         * @param {TransferEventListRequest} transferEventListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferEventList(transferEventListRequest, options) {
          return localVarFp.transferEventList(transferEventListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.
         * @summary Sync transfer events
         * @param {TransferEventSyncRequest} transferEventSyncRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferEventSync(transferEventSyncRequest, options) {
          return localVarFp.transferEventSync(transferEventSyncRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transfer/get` endpoint fetches information about the transfer corresponding to the given `transfer_id` or `authorization_id`. One of `transfer_id` or `authorization_id` must be populated but not both.
         * @summary Retrieve a transfer
         * @param {TransferGetRequest} transferGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferGet(transferGetRequest, options) {
          return localVarFp.transferGet(transferGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.
         * @summary Create a transfer intent object to invoke the Transfer UI
         * @param {TransferIntentCreateRequest} transferIntentCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferIntentCreate(transferIntentCreateRequest, options) {
          return localVarFp.transferIntentCreate(transferIntentCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.
         * @summary Retrieve more information about a transfer intent
         * @param {TransferIntentGetRequest} transferIntentGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferIntentGet(transferIntentGetRequest, options) {
          return localVarFp.transferIntentGet(transferIntentGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/ledger/deposit` endpoint to deposit funds into Plaid Ledger.
         * @summary Deposit funds into a Plaid Ledger balance
         * @param {TransferLedgerDepositRequest} transferLedgerDepositRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferLedgerDeposit(transferLedgerDepositRequest, options) {
          return localVarFp.transferLedgerDeposit(transferLedgerDepositRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/ledger/distribute` endpoint to move available balance between the ledgers of the platform and one of its originators.
         * @summary Move available balance between the ledgers of the platform and one of its originators
         * @param {TransferLedgerDistributeRequest} transferLedgerDistributeRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferLedgerDistribute(transferLedgerDistributeRequest, options) {
          return localVarFp.transferLedgerDistribute(transferLedgerDistributeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/ledger/get` endpoint to view a balance on the ledger held with Plaid.
         * @summary Retrieve Plaid Ledger balance
         * @param {TransferLedgerGetRequest} transferLedgerGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferLedgerGet(transferLedgerGetRequest, options) {
          return localVarFp.transferLedgerGet(transferLedgerGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/ledger/withdraw` endpoint to withdraw funds from a Plaid Ledger balance.
         * @summary Withdraw funds from a Plaid Ledger balance
         * @param {TransferLedgerWithdrawRequest} transferLedgerWithdrawRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferLedgerWithdraw(transferLedgerWithdrawRequest, options) {
          return localVarFp.transferLedgerWithdraw(transferLedgerWithdrawRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers.
         * @summary List transfers
         * @param {TransferListRequest} transferListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferList(transferListRequest, options) {
          return localVarFp.transferList(transferListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/metrics/get` endpoint to view your transfer product usage metrics.
         * @summary Get transfer product usage metrics
         * @param {TransferMetricsGetRequest} transferMetricsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferMetricsGet(transferMetricsGetRequest, options) {
          return localVarFp.transferMetricsGet(transferMetricsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * As an alternative to adding Items via Link, you can also use the `/transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items. This endpoint is also required when adding an Item for use with wire transfers; if you intend to create wire transfers on this account, you must provide `wire_routing_number`. Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
         * @summary Migrate account into Transfers
         * @param {TransferMigrateAccountRequest} transferMigrateAccountRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferMigrateAccount(transferMigrateAccountRequest, options) {
          return localVarFp.transferMigrateAccount(transferMigrateAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/originator/create` endpoint to create a new originator and return an `originator_client_id`.
         * @summary Create a new originator
         * @param {TransferOriginatorCreateRequest} transferOriginatorCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOriginatorCreate(transferOriginatorCreateRequest, options) {
          return localVarFp.transferOriginatorCreate(transferOriginatorCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/originator/funding_account/update` endpoint to update the funding account associated with the originator.
         * @summary Update the funding account associated with the originator
         * @param {TransferOriginatorFundingAccountUpdateRequest} transferOriginatorFundingAccountUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOriginatorFundingAccountUpdate(transferOriginatorFundingAccountUpdateRequest, options) {
          return localVarFp.transferOriginatorFundingAccountUpdate(transferOriginatorFundingAccountUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transfer/originator/get` endpoint gets status updates for an originator\'s onboarding process. This information is also available via the Transfer page on the Plaid dashboard.
         * @summary Get status of an originator\'s onboarding
         * @param {TransferOriginatorGetRequest} transferOriginatorGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOriginatorGet(transferOriginatorGetRequest, options) {
          return localVarFp.transferOriginatorGet(transferOriginatorGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transfer/originator/list` endpoint gets status updates for all of your originators\' onboarding. This information is also available via the Plaid dashboard.
         * @summary Get status of all originators\' onboarding
         * @param {TransferOriginatorListRequest} transferOriginatorListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferOriginatorList(transferOriginatorListRequest, options) {
          return localVarFp.transferOriginatorList(transferOriginatorListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transfer/platform/originator/create` endpoint allows gathering information about the originator specific to the Scaled Platform Transfer offering, including the originator\'s agreement to legal terms required before accepting any further information related to the originator.
         * @summary Create an originator for scaled platform customers
         * @param {TransferPlatformOriginatorCreateRequest} transferPlatformOriginatorCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferPlatformOriginatorCreate(transferPlatformOriginatorCreateRequest, options) {
          return localVarFp.transferPlatformOriginatorCreate(transferPlatformOriginatorCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/platform/person/create` endpoint to create a person record associated with an originator and optionally submit person-specific requirements.
         * @summary Create a person associated with an originator
         * @param {TransferPlatformPersonCreateRequest} transferPlatformPersonCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferPlatformPersonCreate(transferPlatformPersonCreateRequest, options) {
          return localVarFp.transferPlatformPersonCreate(transferPlatformPersonCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transfer/platform/requirement/submit` endpoint allows platforms to submit onboarding requirements for an originator as part of the Scaled Platform Transfer offering.
         * @summary Submit onboarding requirements for Scaled Platform originators
         * @param {TransferPlatformRequirementSubmitRequest} transferPlatformRequirementSubmitRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferPlatformRequirementSubmit(transferPlatformRequirementSubmitRequest, options) {
          return localVarFp.transferPlatformRequirementSubmit(transferPlatformRequirementSubmitRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transfer/questionnaire/create` endpoint generates a Plaid-hosted onboarding UI URL. Redirect the originator to this URL to provide their due diligence information and agree to Plaid’s terms for ACH money movement.
         * @summary Generate a Plaid-hosted onboarding UI URL.
         * @param {TransferQuestionnaireCreateRequest} transferQuestionnaireCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferQuestionnaireCreate(transferQuestionnaireCreateRequest, options) {
          return localVarFp.transferQuestionnaireCreate(transferQuestionnaireCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/recurring/cancel` endpoint to cancel a recurring transfer.  Scheduled transfer that hasn\'t been submitted to bank will be cancelled.
         * @summary Cancel a recurring transfer.
         * @param {TransferRecurringCancelRequest} transferRecurringCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringCancel(transferRecurringCancelRequest, options) {
          return localVarFp.transferRecurringCancel(transferRecurringCancelRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/recurring/create` endpoint to initiate a new recurring transfer. This capability is not currently supported for Transfer UI or Platform Payments (beta) customers.
         * @summary Create a recurring transfer
         * @param {TransferRecurringCreateRequest} transferRecurringCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringCreate(transferRecurringCreateRequest, options) {
          return localVarFp.transferRecurringCreate(transferRecurringCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transfer/recurring/get` fetches information about the recurring transfer corresponding to the given `recurring_transfer_id`.
         * @summary Retrieve a recurring transfer
         * @param {TransferRecurringGetRequest} transferRecurringGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringGet(transferRecurringGetRequest, options) {
          return localVarFp.transferRecurringGet(transferRecurringGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/recurring/list` endpoint to see a list of all your recurring transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired recurring transfers.
         * @summary List recurring transfers
         * @param {TransferRecurringListRequest} transferRecurringListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRecurringList(transferRecurringListRequest, options) {
          return localVarFp.transferRecurringList(transferRecurringListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/refund/cancel` endpoint to cancel a refund.  A refund is eligible for cancellation if it has not yet been submitted to the payment network.
         * @summary Cancel a refund
         * @param {TransferRefundCancelRequest} transferRefundCancelRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRefundCancel(transferRefundCancelRequest, options) {
          return localVarFp.transferRefundCancel(transferRefundCancelRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Use the `/transfer/refund/create` endpoint to create a refund for a transfer. A transfer can be refunded if the transfer was initiated in the past 180 days.  Refunds come out of the available balance of the ledger used for the original debit transfer. If there are not enough funds in the available balance to cover the refund amount, the refund will be rejected. You can create a refund at any time. Plaid does not impose any hold time on refunds.
         * @summary Create a refund
         * @param {TransferRefundCreateRequest} transferRefundCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRefundCreate(transferRefundCreateRequest, options) {
          return localVarFp.transferRefundCreate(transferRefundCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transfer/refund/get` endpoint fetches information about the refund corresponding to the given `refund_id`.
         * @summary Retrieve a refund
         * @param {TransferRefundGetRequest} transferRefundGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRefundGet(transferRefundGetRequest, options) {
          return localVarFp.transferRefundGet(transferRefundGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.
         * @summary Lists historical repayments
         * @param {TransferRepaymentListRequest} transferRepaymentListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRepaymentList(transferRepaymentListRequest, options) {
          return localVarFp.transferRepaymentList(transferRepaymentListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
         * @summary List the returns included in a repayment
         * @param {TransferRepaymentReturnListRequest} transferRepaymentReturnListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferRepaymentReturnList(transferRepaymentReturnListRequest, options) {
          return localVarFp.transferRepaymentReturnList(transferRepaymentReturnListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.
         * @summary Retrieve a sweep
         * @param {TransferSweepGetRequest} transferSweepGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferSweepGet(transferSweepGetRequest, options) {
          return localVarFp.transferSweepGet(transferSweepGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.
         * @summary List sweeps
         * @param {TransferSweepListRequest} transferSweepListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferSweepList(transferSweepListRequest, options) {
          return localVarFp.transferSweepList(transferSweepListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns user permissioned account data including identity and Item access tokens.
         * @summary Retrieve User Account
         * @param {UserAccountSessionGetRequest} userAccountSessionGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userAccountSessionGet(userAccountSessionGetRequest, options) {
          return localVarFp.userAccountSessionGet(userAccountSessionGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint should be called for each of your end users before they begin a Plaid Check or Income flow, or a Multi-Item Link flow. This provides you a single token to access all data associated with the user. You should only create one per end user.  The `consumer_report_user_identity` object must be present in order to create a Plaid Check Consumer Report for a user. If it is not provided during the `/user/create` call, it can be added later by calling `/user/update`. Plaid Check Consumer Reports can only be created for US-based users; the user\'s address country must be `US`.  If you call the endpoint multiple times with the same `client_user_id`, the first creation call will succeed and the rest will fail with an error message indicating that the user has been created for the given `client_user_id`.  Ensure that you store the `user_token` along with your user\'s identifier in your database, as it is not possible to retrieve a previously created `user_token`.
         * @summary Create user
         * @param {UserCreateRequest} userCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCreate(userCreateRequest, options) {
          return localVarFp.userCreate(userCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns Items associated with a User along with their corresponding statuses.
         * @summary Get Items associated with a User
         * @param {UserItemsGetRequest} userItemsGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userItemsGet(userItemsGetRequest, options) {
          return localVarFp.userItemsGet(userItemsGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * `/user/remove` deletes a user token and and associated information, including any Items associated with the token.  Any subsequent calls to retrieve information using the same user token will result in an error stating the user does not exist.
         * @summary Remove user
         * @param {UserRemoveRequest} userRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRemove(userRemoveRequest, options) {
          return localVarFp.userRemove(userRemoveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint is used to create a third-party user token. This token can be shared with and used by a specified third-party client to access data associated with the user through supported endpoints.  Ensure you store the `third_party_user_token` along with the `user_token` and `third_party_client_id`, as it is not possible to retrieve a previously created `third_party_user_token`.
         * @summary Create a third-party user token
         * @param {UserThirdPartyTokenCreateRequest} userThirdPartyTokenCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userThirdPartyTokenCreate(userThirdPartyTokenCreateRequest, options) {
          return localVarFp.userThirdPartyTokenCreate(userThirdPartyTokenCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint is used to delete a third-party user token. Once removed, the token can longer be used to access data associated with the user.   Any subsequent calls to retrieve information using the same third-party user token will result in an error stating the third-party user token does not exist.
         * @summary Remove a third-party user token
         * @param {UserThirdPartyTokenRemoveRequest} userThirdPartyTokenRemoveRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userThirdPartyTokenRemove(userThirdPartyTokenRemoveRequest, options) {
          return localVarFp.userThirdPartyTokenRemove(userThirdPartyTokenRemoveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint is used to update user information associated with an existing `user_token`. It can also be used to enable an existing `user_token` for use with Consumer Reports by Plaid Check, by adding a `consumer_report_user_identity` object to the user. Plaid Check Consumer Reports can only be created for US-based users; the user\'s address country must be `US`.
         * @summary Update user information
         * @param {UserUpdateRequest} userUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUpdate(userUpdateRequest, options) {
          return localVarFp.userUpdate(userUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an e-wallet. The response is the newly created e-wallet object.
         * @summary Create an e-wallet
         * @param {WalletCreateRequest} walletCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCreate(walletCreateRequest, options) {
          return localVarFp.walletCreate(walletCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch an e-wallet. The response includes the current balance.
         * @summary Fetch an e-wallet
         * @param {WalletGetRequest} walletGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletGet(walletGetRequest, options) {
          return localVarFp.walletGet(walletGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists all e-wallets in descending order of creation.
         * @summary Fetch a list of e-wallets
         * @param {WalletListRequest} walletListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletList(walletListRequest, options) {
          return localVarFp.walletList(walletListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate transactions, the amount and reference for the transaction. Transactions will settle in seconds to several days, depending on the underlying payment rail.
         * @summary Execute a transaction using an e-wallet
         * @param {WalletTransactionExecuteRequest} walletTransactionExecuteRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionExecute(walletTransactionExecuteRequest, options) {
          return localVarFp.walletTransactionExecute(walletTransactionExecuteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a specific e-wallet transaction
         * @summary Fetch an e-wallet transaction
         * @param {WalletTransactionGetRequest} walletTransactionGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionGet(walletTransactionGetRequest, options) {
          return localVarFp.walletTransactionGet(walletTransactionGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time.
         * @summary List e-wallet transactions
         * @param {WalletTransactionListRequest} walletTransactionListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletTransactionList(walletTransactionListRequest, options) {
          return localVarFp.walletTransactionList(walletTransactionListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new entity watchlist screening to check your customer against watchlists defined in the associated entity watchlist program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
         * @summary Create a watchlist screening for an entity
         * @param {WatchlistScreeningEntityCreateRequest} watchlistScreeningEntityCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityCreate(watchlistScreeningEntityCreateRequest, options) {
          return localVarFp.watchlistScreeningEntityCreate(watchlistScreeningEntityCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an entity watchlist screening.
         * @summary Get an entity screening
         * @param {WatchlistScreeningEntityGetRequest} watchlistScreeningEntityGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityGet(watchlistScreeningEntityGetRequest, options) {
          return localVarFp.watchlistScreeningEntityGet(watchlistScreeningEntityGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List all changes to the entity watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
         * @summary List history for entity watchlist screenings
         * @param {WatchlistScreeningEntityHistoryListRequest} watchlistScreeningEntityHistoryListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityHistoryList(watchlistScreeningEntityHistoryListRequest, options) {
          return localVarFp.watchlistScreeningEntityHistoryList(watchlistScreeningEntityHistoryListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List all hits for the entity watchlist screening.
         * @summary List hits for entity watchlist screenings
         * @param {WatchlistScreeningEntityHitListRequest} watchlistScreeningEntityHitListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityHitList(watchlistScreeningEntityHitListRequest, options) {
          return localVarFp.watchlistScreeningEntityHitList(watchlistScreeningEntityHitListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List all entity screenings.
         * @summary List entity watchlist screenings
         * @param {WatchlistScreeningEntityListRequest} watchlistScreeningEntityListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityList(watchlistScreeningEntityListRequest, options) {
          return localVarFp.watchlistScreeningEntityList(watchlistScreeningEntityListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an entity watchlist screening program
         * @summary Get entity watchlist screening program
         * @param {WatchlistScreeningEntityProgramGetRequest} watchlistScreeningEntityProgramGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityProgramGet(watchlistScreeningEntityProgramGetRequest, options) {
          return localVarFp.watchlistScreeningEntityProgramGet(watchlistScreeningEntityProgramGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List all entity watchlist screening programs
         * @summary List entity watchlist screening programs
         * @param {WatchlistScreeningEntityProgramListRequest} watchlistScreeningEntityProgramListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityProgramList(watchlistScreeningEntityProgramListRequest, options) {
          return localVarFp.watchlistScreeningEntityProgramList(watchlistScreeningEntityProgramListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a review for an entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
         * @summary Create a review for an entity watchlist screening
         * @param {WatchlistScreeningEntityReviewCreateRequest} watchlistScreeningEntityReviewCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityReviewCreate(watchlistScreeningEntityReviewCreateRequest, options) {
          return localVarFp.watchlistScreeningEntityReviewCreate(watchlistScreeningEntityReviewCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List all reviews for a particular entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
         * @summary List reviews for entity watchlist screenings
         * @param {WatchlistScreeningEntityReviewListRequest} watchlistScreeningEntityReviewListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityReviewList(watchlistScreeningEntityReviewListRequest, options) {
          return localVarFp.watchlistScreeningEntityReviewList(watchlistScreeningEntityReviewListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an entity watchlist screening.
         * @summary Update an entity screening
         * @param {WatchlistScreeningEntityUpdateRequest} watchlistScreeningEntityUpdateRequest The entity screening was successfully updated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningEntityUpdate(watchlistScreeningEntityUpdateRequest, options) {
          return localVarFp.watchlistScreeningEntityUpdate(watchlistScreeningEntityUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Watchlist Screening to check your customer against watchlists defined in the associated Watchlist Program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
         * @summary Create a watchlist screening for a person
         * @param {WatchlistScreeningIndividualCreateRequest} watchlistScreeningIndividualCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualCreate(watchlistScreeningIndividualCreateRequest, options) {
          return localVarFp.watchlistScreeningIndividualCreate(watchlistScreeningIndividualCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a previously created individual watchlist screening
         * @summary Retrieve an individual watchlist screening
         * @param {WatchlistScreeningIndividualGetRequest} watchlistScreeningIndividualGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualGet(watchlistScreeningIndividualGetRequest, options) {
          return localVarFp.watchlistScreeningIndividualGet(watchlistScreeningIndividualGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List all changes to the individual watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
         * @summary List history for individual watchlist screenings
         * @param {WatchlistScreeningIndividualHistoryListRequest} watchlistScreeningIndividualHistoryListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualHistoryList(watchlistScreeningIndividualHistoryListRequest, options) {
          return localVarFp.watchlistScreeningIndividualHistoryList(watchlistScreeningIndividualHistoryListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List all hits found by Plaid for a particular individual watchlist screening.
         * @summary List hits for individual watchlist screening
         * @param {WatchlistScreeningIndividualHitListRequest} watchlistScreeningIndividualHitListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualHitList(watchlistScreeningIndividualHitListRequest, options) {
          return localVarFp.watchlistScreeningIndividualHitList(watchlistScreeningIndividualHitListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List previously created watchlist screenings for individuals
         * @summary List Individual Watchlist Screenings
         * @param {WatchlistScreeningIndividualListRequest} watchlistScreeningIndividualListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualList(watchlistScreeningIndividualListRequest, options) {
          return localVarFp.watchlistScreeningIndividualList(watchlistScreeningIndividualListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an individual watchlist screening program
         * @summary Get individual watchlist screening program
         * @param {WatchlistScreeningIndividualProgramGetRequest} watchlistScreeningIndividualProgramGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualProgramGet(watchlistScreeningIndividualProgramGetRequest, options) {
          return localVarFp.watchlistScreeningIndividualProgramGet(watchlistScreeningIndividualProgramGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List all individual watchlist screening programs
         * @summary List individual watchlist screening programs
         * @param {WatchlistScreeningIndividualProgramListRequest} watchlistScreeningIndividualProgramListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualProgramList(watchlistScreeningIndividualProgramListRequest, options) {
          return localVarFp.watchlistScreeningIndividualProgramList(watchlistScreeningIndividualProgramListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a review for the individual watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
         * @summary Create a review for an individual watchlist screening
         * @param {WatchlistScreeningIndividualReviewCreateRequest} watchlistScreeningIndividualReviewCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualReviewCreate(watchlistScreeningIndividualReviewCreateRequest, options) {
          return localVarFp.watchlistScreeningIndividualReviewCreate(watchlistScreeningIndividualReviewCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List all reviews for the individual watchlist screening.
         * @summary List reviews for individual watchlist screenings
         * @param {WatchlistScreeningIndividualReviewListRequest} watchlistScreeningIndividualReviewListRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualReviewList(watchlistScreeningIndividualReviewListRequest, options) {
          return localVarFp.watchlistScreeningIndividualReviewList(watchlistScreeningIndividualReviewListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific individual watchlist screening. This endpoint can be used to add additional customer information, correct outdated information, add a reference id, assign the individual to a reviewer, and update which program it is associated with. Please note that you may not update `search_terms` and `status` at the same time since editing `search_terms` may trigger an automatic `status` change.
         * @summary Update individual watchlist screening
         * @param {WatchlistScreeningIndividualUpdateRequest} watchlistScreeningIndividualUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        watchlistScreeningIndividualUpdate(watchlistScreeningIndividualUpdateRequest, options) {
          return localVarFp.watchlistScreeningIndividualUpdate(watchlistScreeningIndividualUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
         * @summary Get webhook verification key
         * @param {WebhookVerificationKeyGetRequest} webhookVerificationKeyGetRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookVerificationKeyGet(webhookVerificationKeyGetRequest, options) {
          return localVarFp.webhookVerificationKeyGet(webhookVerificationKeyGetRequest, options).then((request) => request(axios, basePath));
        }
      };
    };
    exports.PlaidApiFactory = PlaidApiFactory;
    var PlaidApi2 = class extends base_1.BaseAPI {
      /**
       * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints, such as `/accounts/get`, return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link. As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.
       * @summary Retrieve real-time balance data
       * @param {AccountsBalanceGetRequest} accountsBalanceGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      accountsBalanceGet(accountsBalanceGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).accountsBalanceGet(accountsBalanceGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance. To return new accounts that were created after the user linked their Item, you can listen for the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link\'s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  `/accounts/get` is free to use and retrieves cached information, rather than extracting fresh information from the institution. The balance returned will reflect the balance at the time of the last successful Item update. If the Item is enabled for a regularly updating product, such as Transactions, Investments, or Liabilities, the balance will typically update about once a day, as long as the Item is healthy. If the Item is enabled only for products that do not frequently update, such as Auth or Identity, balance data may be much older.  For realtime balance information, use the paid endpoint `/accounts/balance/get` instead.
       * @summary Retrieve accounts
       * @param {AccountsGetRequest} accountsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      accountsGet(accountsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).accountsGet(accountsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
       * @summary Retrieve information about a Plaid application
       * @param {ApplicationGetRequest} applicationGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      applicationGet(applicationGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).applicationGet(applicationGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
       * @summary Create Asset Report Audit Copy
       * @param {AssetReportAuditCopyCreateRequest} assetReportAuditCopyCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.
       * @summary Retrieve an Asset Report Audit Copy
       * @param {AssetReportAuditCopyGetRequest} assetReportAuditCopyGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      assetReportAuditCopyGet(assetReportAuditCopyGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).assetReportAuditCopyGet(assetReportAuditCopyGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
       * @summary Remove Asset Report Audit Copy
       * @param {AssetReportAuditCopyRemoveRequest} assetReportAuditCopyRemoveRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest, options) {
        return exports.PlaidApiFp(this.configuration).assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. The exact amount of time to create the report will vary depending on how many days of history are requested and will typically range from a few seconds to about one minute. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.
       * @summary Create an Asset Report
       * @param {AssetReportCreateRequest} assetReportCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      assetReportCreate(assetReportCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).assetReportCreate(assetReportCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report\'s data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
       * @summary Filter Asset Report
       * @param {AssetReportFilterRequest} assetReportFilterRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      assetReportFilter(assetReportFilterRequest, options) {
        return exports.PlaidApiFp(this.configuration).assetReportFilter(assetReportFilterRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report. To retrieve an Asset Report with Insights, call `/asset_report/get` endpoint with `include_insights` set to `true`.  For latency-sensitive applications, you can optionally call `/asset_report/create` with `options.add_ons` set to `[\"fast_assets\"]`. This will cause Plaid to create two versions of the Asset Report: one with only current and available balance and identity information, and then later on the complete Asset Report. You will receive separate webhooks for each version of the Asset Report.
       * @summary Retrieve an Asset Report
       * @param {AssetReportGetRequest} assetReportGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      assetReportGet(assetReportGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).assetReportGet(assetReportGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
       * @summary Retrieve a PDF Asset Report
       * @param {AssetReportPDFGetRequest} assetReportPDFGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      assetReportPdfGet(assetReportPDFGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).assetReportPdfGet(assetReportPDFGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * An Asset Report is an immutable snapshot of a user\'s assets. In order to \"refresh\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\"\") for any previously-populated fields you would like set as empty.
       * @summary Refresh an Asset Report
       * @param {AssetReportRefreshRequest} assetReportRefreshRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      assetReportRefresh(assetReportRefreshRequest, options) {
        return exports.PlaidApiFp(this.configuration).assetReportRefresh(assetReportRefreshRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove access to an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.
       * @summary Delete an Asset Report
       * @param {AssetReportRemoveRequest} assetReportRemoveRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      assetReportRemove(assetReportRemoveRequest, options) {
        return exports.PlaidApiFp(this.configuration).assetReportRemove(assetReportRemoveRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item\'s checking, savings, and cash management accounts, along with high-level account data and balances when available.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
       * @summary Retrieve auth data
       * @param {AuthGetRequest} authGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      authGet(authGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).authGet(authGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
       * @summary Get balance of your Bank Transfer account
       * @param {BankTransferBalanceGetRequest} bankTransferBalanceGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      bankTransferBalanceGet(bankTransferBalanceGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).bankTransferBalanceGet(bankTransferBalanceGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.
       * @summary Cancel a bank transfer
       * @param {BankTransferCancelRequest} bankTransferCancelRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      bankTransferCancel(bankTransferCancelRequest, options) {
        return exports.PlaidApiFp(this.configuration).bankTransferCancel(bankTransferCancelRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.
       * @summary Create a bank transfer
       * @param {BankTransferCreateRequest} bankTransferCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      bankTransferCreate(bankTransferCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).bankTransferCreate(bankTransferCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/bank_transfer/event/list` endpoint to get a list of Plaid-initiated ACH or bank transfer events based on specified filter criteria. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://plaid.com/docs/auth/coverage/microdeposit-events/).
       * @summary List bank transfer events
       * @param {BankTransferEventListRequest} bankTransferEventListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      bankTransferEventList(bankTransferEventListRequest, options) {
        return exports.PlaidApiFp(this.configuration).bankTransferEventList(bankTransferEventListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/bank_transfer/event/sync` allows you to request up to the next 25 Plaid-initiated bank transfer events that happened after a specific `event_id`. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://www.plaid.com/docs/auth/coverage/microdeposit-events/).
       * @summary Sync bank transfer events
       * @param {BankTransferEventSyncRequest} bankTransferEventSyncRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      bankTransferEventSync(bankTransferEventSyncRequest, options) {
        return exports.PlaidApiFp(this.configuration).bankTransferEventSync(bankTransferEventSyncRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.
       * @summary Retrieve a bank transfer
       * @param {BankTransferGetRequest} bankTransferGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      bankTransferGet(bankTransferGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).bankTransferGet(bankTransferGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers.
       * @summary List bank transfers
       * @param {BankTransferListRequest} bankTransferListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      bankTransferList(bankTransferListRequest, options) {
        return exports.PlaidApiFp(this.configuration).bankTransferList(bankTransferListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
       * @summary Migrate account into Bank Transfers
       * @param {BankTransferMigrateAccountRequest} bankTransferMigrateAccountRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      bankTransferMigrateAccount(bankTransferMigrateAccountRequest, options) {
        return exports.PlaidApiFp(this.configuration).bankTransferMigrateAccount(bankTransferMigrateAccountRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.
       * @summary Retrieve a sweep
       * @param {BankTransferSweepGetRequest} bankTransferSweepGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      bankTransferSweepGet(bankTransferSweepGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).bankTransferSweepGet(bankTransferSweepGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.
       * @summary List sweeps
       * @param {BankTransferSweepListRequest} bankTransferSweepListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      bankTransferSweepList(bankTransferSweepListRequest, options) {
        return exports.PlaidApiFp(this.configuration).bankTransferSweepList(bankTransferSweepListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use `/beacon/account_risk/v1/evaluate` to get risk insights for a linked account.
       * @summary Evaluate risk of a bank account
       * @param {BeaconAccountRiskEvaluateRequest} beaconAccountRiskEvaluateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      beaconAccountRiskEvaluate(beaconAccountRiskEvaluateRequest, options) {
        return exports.PlaidApiFp(this.configuration).beaconAccountRiskEvaluate(beaconAccountRiskEvaluateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Returns a Beacon Duplicate for a given Beacon Duplicate id.  A Beacon Duplicate represents a pair of similar Beacon Users within your organization.  Two Beacon User revisions are returned for each Duplicate record in either the `beacon_user1` or `beacon_user2` response fields.  The `analysis` field in the response indicates which fields matched between `beacon_user1` and `beacon_user2`.
       * @summary Get a Beacon Duplicate
       * @param {BeaconDuplicateGetRequest} beaconDuplicateGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      beaconDuplicateGet(beaconDuplicateGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).beaconDuplicateGet(beaconDuplicateGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Create a fraud report for a given Beacon User.
       * @summary Create a Beacon Report
       * @param {BeaconReportCreateRequest} beaconReportCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      beaconReportCreate(beaconReportCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).beaconReportCreate(beaconReportCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Returns a Beacon report for a given Beacon report id.
       * @summary Get a Beacon Report
       * @param {BeaconReportGetRequest} beaconReportGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      beaconReportGet(beaconReportGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).beaconReportGet(beaconReportGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/beacon/report/list` endpoint to view all Beacon Reports you created for a specific Beacon User. The reports returned by this endpoint are exclusively reports you created for a specific user. A Beacon User can only have one active report at a time, but a new report can be created if a previous report has been deleted. The results from this endpoint are paginated; the `next_cursor` field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the `next_cursor` value as the `cursor` parameter in the next request.
       * @summary List Beacon Reports for a Beacon User
       * @param {BeaconReportListRequest} beaconReportListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      beaconReportList(beaconReportListRequest, options) {
        return exports.PlaidApiFp(this.configuration).beaconReportList(beaconReportListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Returns a Beacon Report Syndication for a given Beacon Report Syndication id.
       * @summary Get a Beacon Report Syndication
       * @param {BeaconReportSyndicationGetRequest} beaconReportSyndicationGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      beaconReportSyndicationGet(beaconReportSyndicationGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).beaconReportSyndicationGet(beaconReportSyndicationGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/beacon/report_syndication/list` endpoint to view all Beacon Reports that have been syndicated to a specific Beacon User. This endpoint returns Beacon Report Syndications which are references to Beacon Reports created either by you, or another Beacon customer, that matched the specified Beacon User. A Beacon User can have multiple active Beacon Report Syndications at once. The results from this endpoint are paginated; the `next_cursor` field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the `next_cursor` value as the `cursor` parameter in the next request.
       * @summary List Beacon Report Syndications for a Beacon User
       * @param {BeaconReportSyndicationListRequest} beaconReportSyndicationListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      beaconReportSyndicationList(beaconReportSyndicationListRequest, options) {
        return exports.PlaidApiFp(this.configuration).beaconReportSyndicationList(beaconReportSyndicationListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Get Account Insights for all Accounts linked to this Beacon User. The insights for each account are computed based on the information that was last retrieved from the financial institution.
       * @summary Get Account Insights for a Beacon User
       * @param {BeaconUserAccountInsightsGetRequest} beaconUserAccountInsightsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      beaconUserAccountInsightsGet(beaconUserAccountInsightsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).beaconUserAccountInsightsGet(beaconUserAccountInsightsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Create and scan a Beacon User against your Beacon Program, according to your program\'s settings.  When you submit a new user to `/beacon/user/create`, several checks are performed immediately:    - The user\'s PII (provided within the `user` object) is searched against all other users within the Beacon Program you specified. If a match is found that violates your program\'s \"Duplicate Information Filtering\" settings, the user will be returned with a status of `pending_review`.    - The user\'s PII is also searched against all fraud reports created by your organization across all of your Beacon Programs. If the user\'s data matches a fraud report that your team created, the user will be returned with a status of `rejected`.    - Finally, the user\'s PII is searched against all fraud report shared with the Beacon Network by other companies. If a matching fraud report is found, the user will be returned with a `pending_review` status if your program has enabled automatic flagging based on network fraud.
       * @summary Create a Beacon User
       * @param {BeaconUserCreateRequest} beaconUserCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      beaconUserCreate(beaconUserCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).beaconUserCreate(beaconUserCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Fetch a Beacon User.  The Beacon User is returned with all of their associated information and a `status` based on the Beacon Network duplicate record and fraud checks.
       * @summary Get a Beacon User
       * @param {BeaconUserGetRequest} beaconUserGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      beaconUserGet(beaconUserGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).beaconUserGet(beaconUserGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * List all changes to the Beacon User in reverse-chronological order.
       * @summary List a Beacon User\'s history
       * @param {BeaconUserHistoryListRequest} beaconUserHistoryListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      beaconUserHistoryList(beaconUserHistoryListRequest, options) {
        return exports.PlaidApiFp(this.configuration).beaconUserHistoryList(beaconUserHistoryListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Update the status of a Beacon User.  When updating a Beacon User\'s status via this endpoint, Plaid validates that the status change is consistent with the related state for this Beacon User. Specifically, we will check:  1. Whether there are any associated Beacon Reports connected to the Beacon User, and 2. Whether there are any confirmed Beacon Report Syndications connected to the Beacon User.  When updating a Beacon User\'s status to \"rejected\", we enforce that either a Beacon Report has been created for the Beacon User or a Beacon Report Syndication has been confirmed. When updating a Beacon User\'s status to \"cleared\", we enforce that there are no active Beacon Reports or confirmed Beacon Report Syndications associated with the user. If you previously created a Beacon Report for this user, you must delete it before updating the Beacon User\'s status to \"cleared\". There are no restrictions on updating a Beacon User\'s status to \"pending_review\".  If these conditions are not met, the request will be rejected with an error explaining the issue.
       * @summary Review a Beacon User
       * @param {BeaconUserReviewRequest} beaconUserReviewRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      beaconUserReview(beaconUserReviewRequest, options) {
        return exports.PlaidApiFp(this.configuration).beaconUserReview(beaconUserReviewRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Update the identity data for a Beacon User in your Beacon Program or add new accounts to the Beacon User.  Similar to `/beacon/user/create`, several checks are performed immediately when you submit an identity data change to `/beacon/user/update`:    - The user\'s updated PII is searched against all other users within the Beacon Program you specified. If a match is found that violates your program\'s \"Duplicate Information Filtering\" settings, the user will be returned with a status of `pending_review`.    - The user\'s updated PII is also searched against all fraud reports created by your organization across all of your Beacon Programs. If the user\'s data matches a fraud report that your team created, the user will be returned with a status of `rejected`.    - Finally, the user\'s PII is searched against all fraud report shared with the Beacon Network by other companies. If a matching fraud report is found, the user will be returned with a `pending_review` status if your program has enabled automatic flagging based on network fraud.  Plaid maintains a version history for each Beacon User, so the Beacon User\'s identity data before and after the update is retained as separate versions.
       * @summary Update the identity data of a Beacon User
       * @param {BeaconUserUpdateRequest} beaconUserUpdateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      beaconUserUpdate(beaconUserUpdateRequest, options) {
        return exports.PlaidApiFp(this.configuration).beaconUserUpdate(beaconUserUpdateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/cashflow_report/get` endpoint retrieves transactions data associated with an item. Transactions data is standardized across financial institutions.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift. Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions). Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `cursor` parameters in conjunction with the `has_more` response body field to fetch all available transactions. Note that data isn\'t likely to be immediately available to `/cashflow_report/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with cashflow_report, or if it wasn\'t, upon the first call to /cashflow_report/refresh. To be alerted when transaction data is ready to be fetched, listen for the `CASHFLOW_REPORT_READY` webhook.
       * @summary Gets transaction data in cashflow_report
       * @param {CashflowReportGetRequest} cashflowReportGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      cashflowReportGet(cashflowReportGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).cashflowReportGet(cashflowReportGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/cashflow_report/refresh` is an endpoint that initiates an on-demand extraction to fetch the newest transactions for an item (given an `item_id`). The item must already have Cashflow Report added as a product in order to call `/cashflow_report/refresh`.  After calling `/cashflow_report/refresh`, Plaid will fire a webhook `CASHFLOW_REPORT_READY` alerting clients that new transactions data can then be ingested via `/cashflow_report/get` or the webhook will contain an error code informing there was an error in refreshing transactions data.   Note that the `/cashflow_report/refresh` endpoint is not supported for Capital One (`ins_128026`) non-depository accounts and will result in a `PRODUCTS_NOT_SUPPORTED` error if called on an Item that contains only non-depository accounts from that institution.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but up to 30 seconds or more). If you encounter errors, you may find it necessary to adjust your timeout period for requests.
       * @summary Refresh transaction data in cashflow_report
       * @param {CashflowReportRefreshRequest} cashflowReportRefreshRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      cashflowReportRefresh(cashflowReportRefreshRequest, options) {
        return exports.PlaidApiFp(this.configuration).cashflowReportRefresh(cashflowReportRefreshRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.  All implementations are recommended to use the newer `personal_finance_category` taxonomy instead of the older `category` taxonomy supported by this endpoint. The [`personal_finance_category taxonomy` CSV file](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) is available for download and is not accessible via API.
       * @summary Get categories
       * @param {object} body
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      categoriesGet(body, options) {
        return exports.PlaidApiFp(this.configuration).categoriesGet(body, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * List a historical log of Item consent events. Consent logs are only available for events occurring on or after November 7, 2024. Up to three years of consent logs will be available via the endpoint.
       * @summary List a historical log of item consent events
       * @param {ConsentEventsGetRequest} consentEventsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      consentEventsGet(consentEventsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).consentEventsGet(consentEventsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Retrieves all existing CRB Bank Income and Base reports for the consumer in PDF format.  Response is PDF binary data. The `request_id` is returned in the `Plaid-Request-ID` header.
       * @summary Retrieve a PDF Reports
       * @param {ConsumerReportPDFGetRequest} consumerReportPDFGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      consumerReportPdfGet(consumerReportPDFGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).consumerReportPdfGet(consumerReportPDFGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/cra/bank_income/create` creates a CRA report for income verification
       * @summary Create a CRA report for income verification
       * @param {CraBankIncomeCreateRequest} craBankIncomeCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craBankIncomeCreate(craBankIncomeCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).craBankIncomeCreate(craBankIncomeCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/cra/bank_income/get` returns the bank income report(s) for a specified user.
       * @summary Retrieve information from the bank accounts used for income verification
       * @param {CraBankIncomeGetRequest} craBankIncomeGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craBankIncomeGet(craBankIncomeGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).craBankIncomeGet(craBankIncomeGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint allows you to retrieve the Base Report for your user, allowing you to receive comprehensive bank account and cash flow data. You should call this endpoint after you\'ve received a `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn\'t have sufficient data to generate the base report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.
       * @summary Retrieve a Base Report
       * @param {CraCheckReportBaseReportGetRequest} craCheckReportBaseReportGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craCheckReportBaseReportGet(craCheckReportBaseReportGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).craCheckReportBaseReportGet(craCheckReportBaseReportGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint allows you to retrieve the Cashflow Insights report for your user. You should call this endpoint after you\'ve received the `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn’t have sufficient data to generate the insights, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.  If you did not initialize Link with the `cra_cashflow_insights` product or have generated a report using `/cra/check_report/create`, we will generate the insights when you call this endpoint. In this case, you may optionally provide parameters under `options` to configure which insights you want to receive.
       * @summary Retrieve cash flow insights from your user\'s banking data
       * @param {CraCheckReportCashflowInsightsGetRequest} craCheckReportCashflowInsightsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craCheckReportCashflowInsightsGet(craCheckReportCashflowInsightsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).craCheckReportCashflowInsightsGet(craCheckReportCashflowInsightsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/cra/check_report/create` creates a Consumer Report powered by Plaid Check. You can call this endpoint to create a new report if `consumer_report_permissible_purpose` was omitted during Link token creation. If you did provide a `consumer_report_permissible_purpose` during Link token creation, then Plaid Check will automatically begin creating a Consumer Report once the user completes the Link process, and it is not necessary to call `/cra/check_report/create` before retrieving the report.   `/cra/check_report/create` can also be used to refresh data in an existing report. A Consumer Report will last for 24 hours before expiring; you should call any `/get` endpoints on the report before it expires. If a report expires, you can call `/cra/check_report/create` again to re-generate it. Note that refreshing or regenerating a report is a billable event.
       * @summary Create a Consumer Report
       * @param {CraCheckReportCreateRequest} craCheckReportCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craCheckReportCreate(craCheckReportCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).craCheckReportCreate(craCheckReportCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint allows you to retrieve the Income Insights report for your user.  You should call this endpoint after you\'ve received a `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn’t have sufficient data to generate the base report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.
       * @summary Retrieve cash flow information from your user\'s banks
       * @param {CraCheckReportIncomeInsightsGetRequest} craCheckReportIncomeInsightsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craCheckReportIncomeInsightsGet(craCheckReportIncomeInsightsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).craCheckReportIncomeInsightsGet(craCheckReportIncomeInsightsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint allows you to retrieve the Network Insights product for your user. You should call this endpoint after you\'ve received the `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn’t have sufficient data to generate the report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.  If you did not initialize Link with the `cra_network_attributes` product or have generated a report using `/cra/check_report/create`, we will generate the attributes when you call this endpoint.
       * @summary Retrieve network attributes for the user
       * @param {CraCheckReportNetworkInsightsGetRequest} craCheckReportNetworkInsightsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craCheckReportNetworkInsightsGet(craCheckReportNetworkInsightsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).craCheckReportNetworkInsightsGet(craCheckReportNetworkInsightsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint allows you to retrieve the Partner Insights report for your user. You should call this endpoint after you\'ve received the `CHECK_REPORT_READY` webhook, either after the Link session for the user or after calling `/cra/check_report/create`. If the most recent consumer report for the user doesn’t have sufficient data to generate the base report, or the consumer report has expired, you will receive an error indicating that you should create a new consumer report by calling `/cra/check_report/create`.  If you did not initialize Link with the `credit_partner_insights` product or have generated a report using `/cra/check_report/create`, we will call our partners to generate the insights when you call this endpoint. In this case, you may optionally provide parameters under `options` to configure which insights you want to receive.
       * @summary Retrieve cash flow insights from partners
       * @param {CraCheckReportPartnerInsightsGetRequest} craCheckReportPartnerInsightsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craCheckReportPartnerInsightsGet(craCheckReportPartnerInsightsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).craCheckReportPartnerInsightsGet(craCheckReportPartnerInsightsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/cra/check_report/pdf/get` retrieves the most recent Consumer Report in PDF format. By default, the most recent Base Report (if it exists) for the user will be returned. To request that the most recent Income Insights report be included in the PDF as well, use the `add-ons` field.
       * @summary Retrieve Consumer Reports as a PDF
       * @param {CraCheckReportPDFGetRequest} craCheckReportPDFGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craCheckReportPdfGet(craCheckReportPDFGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).craCheckReportPdfGet(craCheckReportPDFGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/cra/loans/applications/register` registers loan applications and decisions.
       * @summary Register loan applications and decisions.
       * @param {CraLoansApplicationsRegisterRequest} craLoansApplicationsRegisterRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craLoansApplicationsRegister(craLoansApplicationsRegisterRequest, options) {
        return exports.PlaidApiFp(this.configuration).craLoansApplicationsRegister(craLoansApplicationsRegisterRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/cra/loans/register` registers a list of loans to their applicants.
       * @summary Register a list of loans to their applicants.
       * @param {CRALoansRegisterRequest} cRALoansRegisterRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craLoansRegister(cRALoansRegisterRequest, options) {
        return exports.PlaidApiFp(this.configuration).craLoansRegister(cRALoansRegisterRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/cra/loans/unregister` indicates the loans have reached a final status and no further updates are expected.
       * @summary Unregister a list of loans.
       * @param {CraLoansUnregisterRequest} craLoansUnregisterRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craLoansUnregister(craLoansUnregisterRequest, options) {
        return exports.PlaidApiFp(this.configuration).craLoansUnregister(craLoansUnregisterRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/cra/loans/update` updates loan information such as the status and payment history.
       * @summary Updates loan data.
       * @param {CraLoansUpdateRequest} craLoansUpdateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craLoansUpdate(craLoansUpdateRequest, options) {
        return exports.PlaidApiFp(this.configuration).craLoansUpdate(craLoansUpdateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint allows you to retrieve a Monitoring Insights report by passing in the `user_token` referred to in the webhook you received.
       * @summary Retrieve a Monitoring Insights Report
       * @param {CraMonitoringInsightsGetRequest} craMonitoringInsightsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craMonitoringInsightsGet(craMonitoringInsightsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).craMonitoringInsightsGet(craMonitoringInsightsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint allows you to subscribe to insights for a user\'s linked CRA items, which are updated every day (best-effort).
       * @summary Subscribe to Monitoring Insights
       * @param {CraMonitoringInsightsSubscribeRequest} craMonitoringInsightsSubscribeRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craMonitoringInsightsSubscribe(craMonitoringInsightsSubscribeRequest, options) {
        return exports.PlaidApiFp(this.configuration).craMonitoringInsightsSubscribe(craMonitoringInsightsSubscribeRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint allows you to unsubscribe from previously subscribed Monitoring Insights.
       * @summary Unsubscribe from Monitoring Insights
       * @param {CraMonitoringInsightsUnsubscribeRequest} craMonitoringInsightsUnsubscribeRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craMonitoringInsightsUnsubscribe(craMonitoringInsightsUnsubscribeRequest, options) {
        return exports.PlaidApiFp(this.configuration).craMonitoringInsightsUnsubscribe(craMonitoringInsightsUnsubscribeRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/cra/partner_insights/get` returns cash flow insights for a specified user.
       * @summary Retrieve cash flow insights from the bank accounts used for income verification
       * @param {CraPartnerInsightsGetRequest} craPartnerInsightsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      craPartnerInsightsGet(craPartnerInsightsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).craPartnerInsightsGet(craPartnerInsightsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
       * @summary Create payment token
       * @param {PaymentInitiationPaymentTokenCreateRequest} paymentInitiationPaymentTokenCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      createPaymentToken(paymentInitiationPaymentTokenCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).createPaymentToken(paymentInitiationPaymentTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Asset Report in Freddie Mac\'s JSON format.
       * @summary Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint.
       * @param {{ [key: string]: object; }} requestBody
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditAssetReportFreddieMacGet(requestBody, options) {
        return exports.PlaidApiFp(this.configuration).creditAssetReportFreddieMacGet(requestBody, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Plaid can create an Audit Copy token of an Asset Report and/or Income Report to share with participating Government Sponsored Entity (GSE). If you participate in the Day 1 Certainty™ program, Plaid can supply an Audit Copy token directly to Fannie Mae on your behalf. An Audit Copy token contains the same underlying data as the Asset Report and/or Income Report (result of /credit/payroll_income/get).  Use the `/credit/audit_copy_token/create` endpoint to create an `audit_copy_token` and then pass that token to the GSE who needs access.
       * @summary Create Asset or Income Report Audit Copy Token
       * @param {CreditAuditCopyTokenCreateRequest} creditAuditCopyTokenCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditAuditCopyTokenCreate(creditAuditCopyTokenCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditAuditCopyTokenCreate(creditAuditCopyTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/credit/audit_copy_token/update` endpoint updates an existing  Audit Copy Token by adding the report tokens in the `report_tokens` field to the `audit_copy_token`. If the Audit Copy Token already contains a report of a certain type, it will be replaced with the token provided in the `report_tokens` field.
       * @summary Update an Audit Copy Token
       * @param {CreditAuditCopyTokenUpdateRequest} creditAuditCopyTokenUpdateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditAuditCopyTokenUpdate(creditAuditCopyTokenUpdateRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditAuditCopyTokenUpdate(creditAuditCopyTokenUpdateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/credit/bank_employment/get` returns the employment report(s) derived from bank transaction data for a specified user.
       * @summary Retrieve information from the bank accounts used for employment verification
       * @param {CreditBankEmploymentGetRequest} creditBankEmploymentGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditBankEmploymentGet(creditBankEmploymentGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditBankEmploymentGet(creditBankEmploymentGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/credit/bank_income/get` returns the bank income report(s) for a specified user. A single report corresponds to all institutions linked in a single Link session. To include multiple institutions in a single report, use [Multi-Item Link](https://plaid.com/docs/link/multi-item-link). To return older reports, use the `options.count` field.
       * @summary Retrieve information from the bank accounts used for income verification
       * @param {CreditBankIncomeGetRequest} creditBankIncomeGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditBankIncomeGet(creditBankIncomeGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditBankIncomeGet(creditBankIncomeGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/credit/bank_income/pdf/get` returns the most recent bank income report for a specified user in PDF format.  A single report corresponds to all institutions linked in a single Link session. To include multiple institutions in a single report, use [Multi-Item Link](https://plaid.com/docs/link/multi-item-link).
       * @summary Retrieve information from the bank accounts used for income verification in PDF format
       * @param {CreditBankIncomePDFGetRequest} creditBankIncomePDFGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditBankIncomePdfGet(creditBankIncomePDFGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditBankIncomePdfGet(creditBankIncomePDFGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/credit/bank_income/refresh` refreshes the most recent bank income report data for a specific user. If the most recent bank income report is no longer valid (i.e. deleted), the endpoint will refresh the most recent valid report instead.
       * @summary Refresh a user\'s bank income information
       * @param {CreditBankIncomeRefreshRequest} creditBankIncomeRefreshRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditBankIncomeRefresh(creditBankIncomeRefreshRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditBankIncomeRefresh(creditBankIncomeRefreshRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/credit/bank_income/webhook/update` allows you to subscribe or unsubscribe a user for income webhook notifications. By default, all users start out unsubscribed.  If a user is subscribed, on significant changes to the user\'s income profile, you will receive a `BANK_INCOME_REFRESH_UPDATE` webhook, prompting you to refresh bank income data for the user.
       * @summary Subscribe and unsubscribe to proactive notifications for a user\'s income profile
       * @param {CreditBankIncomeWebhookUpdateRequest} creditBankIncomeWebhookUpdateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditBankIncomeWebhookUpdate(creditBankIncomeWebhookUpdateRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditBankIncomeWebhookUpdate(creditBankIncomeWebhookUpdateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/credit/bank_statements/uploads/get` returns parsed data from bank statements uploaded by users as part of the Document Income flow. If your account is not enabled for Document Parsing, contact your account manager to request access.
       * @summary Retrieve data for a user\'s uploaded bank statements
       * @param {CreditBankStatementsUploadsGetRequest} creditBankStatementsUploadsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditBankStatementsUploadsGet(creditBankStatementsUploadsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditBankStatementsUploadsGet(creditBankStatementsUploadsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/credit/employment/get` returns a list of items with employment information from a user\'s payroll provider that was verified by an end user.
       * @summary Retrieve a summary of an individual\'s employment information
       * @param {CreditEmploymentGetRequest} creditEmploymentGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditEmploymentGet(creditEmploymentGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditEmploymentGet(creditEmploymentGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Verification of Assets and Verification of Employment reports.
       * @summary Retrieve an Asset Report with Freddie Mac format (aka VOA - Verification Of Assets), and a Verification Of Employment (VOE) report if this one is available. Only Freddie Mac can use this endpoint.
       * @param {CreditFreddieMacReportsGetRequest} creditFreddieMacReportsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditFreddieMacReportsGet(creditFreddieMacReportsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditFreddieMacReportsGet(creditFreddieMacReportsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document.
       * @summary Retrieve a user\'s payroll information
       * @param {CreditPayrollIncomeGetRequest} creditPayrollIncomeGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditPayrollIncomeGet(creditPayrollIncomeGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditPayrollIncomeGet(creditPayrollIncomeGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/credit/payroll_income/parsing_config/update` updates the parsing configuration for a document income verification.
       * @summary Update the parsing configuration for a document income verification
       * @param {{ [key: string]: object; }} requestBody
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditPayrollIncomeParsingConfigUpdate(requestBody, options) {
        return exports.PlaidApiFp(this.configuration).creditPayrollIncomeParsingConfigUpdate(requestBody, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/credit/payroll_income/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing `employer` data will increase the chance of receiving a useful result.  When testing in Sandbox, you can control the results by providing special test values in the `employer` and `access_tokens` fields. `employer_good` and `employer_bad` will result in `HIGH` and `LOW` confidence values, respectively. `employer_multi` will result in a `HIGH` confidence with multiple payroll options. Likewise, `access_good` and `access_bad` will result in `HIGH` and `LOW` confidence values, respectively. Any other value for `employer` and `access_tokens` in Sandbox will result in `UNKNOWN` confidence.
       * @summary Check income verification eligibility and optimize conversion
       * @param {CreditPayrollIncomePrecheckRequest} creditPayrollIncomePrecheckRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditPayrollIncomePrecheck(creditPayrollIncomePrecheckRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditPayrollIncomePrecheck(creditPayrollIncomePrecheckRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/credit/payroll_income/refresh` refreshes a given digital payroll income verification.
       * @summary Refresh a digital payroll income verification
       * @param {CreditPayrollIncomeRefreshRequest} creditPayrollIncomeRefreshRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditPayrollIncomeRefresh(creditPayrollIncomeRefreshRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditPayrollIncomeRefresh(creditPayrollIncomeRefreshRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/credit/payroll_income/risk_signals/get` can be used as part of the Document Income flow to assess a user-uploaded document for signs of potential fraud or tampering. It returns a risk score for each uploaded document that indicates the likelihood of the document being fraudulent, in addition to details on the individual risk signals contributing to the score.  To trigger risk signal generation for an Item, call `/link/token/create` with `parsing_config` set to include `risk_signals`, or call `/credit/payroll_income/parsing_config/update`. Once risk signal generation has been triggered, `/credit/payroll_income/risk_signals/get` can be called at any time after the `INCOME_VERIFICATION_RISK_SIGNALS` webhook has been fired.  `/credit/payroll_income/risk_signals/get` is offered as an add-on to Document Income and is billed separately. To request access to this endpoint, submit a product access request or contact your Plaid account manager.
       * @summary Retrieve fraud insights for a user\'s manually uploaded document(s).
       * @param {CreditPayrollIncomeRiskSignalsGetRequest} creditPayrollIncomeRiskSignalsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditPayrollIncomeRiskSignalsGet(creditPayrollIncomeRiskSignalsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditPayrollIncomeRiskSignalsGet(creditPayrollIncomeRiskSignalsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in `/asset_report/create`.  To grant a third party access to an Asset Report, use the `/credit/relay/create` endpoint to create a `relay_token` and then pass that token to your third party. Each third party has its own `secondary_client_id`; for example, `ce5bd328dcd34123456`. You\'ll need to create a separate `relay_token` for each third party that needs access to the report on your behalf.
       * @summary Create a relay token to share an Asset Report with a partner client
       * @param {CreditRelayCreateRequest} creditRelayCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditRelayCreate(creditRelayCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditRelayCreate(creditRelayCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/credit/relay/get` allows third parties to receive a report that was shared with them, using a `relay_token` that was created by the report owner.
       * @summary Retrieve the reports associated with a relay token that was shared with you
       * @param {CreditRelayGetRequest} creditRelayGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditRelayGet(creditRelayGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditRelayGet(creditRelayGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/credit/relay/pdf/get` allows third parties to receive a pdf report that was shared with them, using a `relay_token` that was created by the report owner.  The `/credit/relay/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/credit/relay/pdf/get`, you must first create the Asset Report using `/credit/relay/create` and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/credit/relay/pdf/get` is the PDF binary data. The `request_id` is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
       * @summary Retrieve the pdf reports associated with a relay token that was shared with you (beta)
       * @param {CreditRelayPDFGetRequest} creditRelayPDFGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditRelayPdfGet(creditRelayPDFGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditRelayPdfGet(creditRelayPDFGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/credit/relay/refresh` endpoint allows third parties to refresh a report that was relayed to them, using a `relay_token` that was created by the report owner. A new report will be created with the original report parameters, but with the most recent data available based on the `days_requested` value of the original report.
       * @summary Refresh a report of a relay token
       * @param {CreditRelayRefreshRequest} creditRelayRefreshRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditRelayRefresh(creditRelayRefreshRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditRelayRefresh(creditRelayRefreshRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/credit/relay/remove` endpoint allows you to invalidate a `relay_token`. The third party holding the token will no longer be able to access or refresh the reports which the `relay_token` gives access to. The original report, associated Items, and other relay tokens that provide access to the same report are not affected and will remain accessible after removing the given `relay_token`.
       * @summary Remove relay token
       * @param {CreditRelayRemoveRequest} creditRelayRemoveRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditRelayRemove(creditRelayRemoveRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditRelayRemove(creditRelayRemoveRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/credit/audit_copy_token/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Report data and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
       * @summary Remove an Audit Copy token
       * @param {CreditAuditCopyTokenRemoveRequest} creditAuditCopyTokenRemoveRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditReportAuditCopyRemove(creditAuditCopyTokenRemoveRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditReportAuditCopyRemove(creditAuditCopyTokenRemoveRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint can be used for your end users after they complete the Link flow. This endpoint returns a list of Link sessions that your user completed, where each session includes the results from the Link flow.  These results include details about the Item that was created and some product related metadata (showing, for example, whether the user finished the bank income verification step).
       * @summary Retrieve Link sessions for your user
       * @param {CreditSessionsGetRequest} creditSessionsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      creditSessionsGet(creditSessionsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).creditSessionsGet(creditSessionsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/dashboard_user/get` endpoint provides details (such as email address) about a specific Dashboard user based on the `dashboard_user_id` field, which is returned in the `audit_trail` object of certain Monitor and Beacon endpoints. This can be used to identify the specific reviewer who performed a Dashboard action.
       * @summary Retrieve a dashboard user
       * @param {DashboardUserGetRequest} dashboardUserGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      dashboardUserGet(dashboardUserGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).dashboardUserGet(dashboardUserGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/dashboard_user/list` endpoint provides details (such as email address) all Dashboard users associated with your account. This can use used to audit or track the list of reviewers for Monitor, Beacon, and Identity Verification products.
       * @summary List dashboard users
       * @param {DashboardUserListRequest} dashboardUserListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      dashboardUserList(dashboardUserListRequest, options) {
        return exports.PlaidApiFp(this.configuration).dashboardUserList(dashboardUserListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
       * @summary (Deprecated) Create a deposit switch without using Plaid Exchange
       * @param {DepositSwitchAltCreateRequest} depositSwitchAltCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      depositSwitchAltCreate(depositSwitchAltCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).depositSwitchAltCreate(depositSwitchAltCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
       * @summary (Deprecated) Create a deposit switch
       * @param {DepositSwitchCreateRequest} depositSwitchCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      depositSwitchCreate(depositSwitchCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).depositSwitchCreate(depositSwitchCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user\'s direct deposit allocation preferences.
       * @summary (Deprecated) Retrieve a deposit switch
       * @param {DepositSwitchGetRequest} depositSwitchGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      depositSwitchGet(depositSwitchGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).depositSwitchGet(depositSwitchGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes.
       * @summary (Deprecated) Create a deposit switch token
       * @param {DepositSwitchTokenCreateRequest} depositSwitchTokenCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      depositSwitchTokenCreate(depositSwitchTokenCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).depositSwitchTokenCreate(depositSwitchTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/employers/search` allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user\'s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
       * @summary Search employer database
       * @param {EmployersSearchRequest} employersSearchRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      employersSearch(employersSearchRequest, options) {
        return exports.PlaidApiFp(this.configuration).employersSearch(employersSearchRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.  This endpoint has been deprecated; new integrations should use `/credit/employment/get` instead.
       * @summary (Deprecated) Retrieve a summary of an individual\'s employment information
       * @param {EmploymentVerificationGetRequest} employmentVerificationGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      employmentVerificationGet(employmentVerificationGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).employmentVerificationGet(employmentVerificationGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * A generic webhook receiver endpoint for FDX Event Notifications
       * @summary Webhook receiver for fdx notifications
       * @param {FDXNotification} fDXNotification
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      fdxNotifications(fDXNotification, options) {
        return exports.PlaidApiFp(this.configuration).fdxNotifications(fDXNotification, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Get a specific recipient
       * @summary Get Recipient
       * @param {string} recipientId Recipient Identifier. Uniquely identifies the recipient
       * @param {string} [oAUTHSTATEID] The value that is passed into the OAuth URI \&#39;state\&#39; query parameter.
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      getRecipient(recipientId, oAUTHSTATEID, options) {
        return exports.PlaidApiFp(this.configuration).getRecipient(recipientId, oAUTHSTATEID, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Returns a list of Recipients
       * @summary Get Recipients
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      getRecipients(options) {
        return exports.PlaidApiFp(this.configuration).getRecipients(options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use `/identity/documents/uploads/get` to retrieve identity details when using [Identity Document Upload](https://plaid.com/docs/identity/identity-document-upload/).
       * @summary Returns uploaded document identity
       * @param {IdentityDocumentsUploadsGetRequest} identityDocumentsUploadsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      identityDocumentsUploadsGet(identityDocumentsUploadsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).identityDocumentsUploadsGet(identityDocumentsUploadsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  Note: In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
       * @summary Retrieve identity data
       * @param {IdentityGetRequest} identityGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      identityGet(identityGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).identityGet(identityGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder\'s financial institution.  Fields within the `balances` object will always be null when retrieved by `/identity/match`. Instead, use the free `/accounts/get` endpoint to request balance cached data, or `/accounts/balance/get` for real-time data.
       * @summary Retrieve identity match score
       * @param {IdentityMatchRequest} identityMatchRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      identityMatch(identityMatchRequest, options) {
        return exports.PlaidApiFp(this.configuration).identityMatch(identityMatchRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/identity/refresh` is an optional endpoint for users of the Identity product. It initiates an on-demand extraction to fetch the most up to date Identity information from the Financial Institution. This on-demand extraction takes place in addition to the periodic extractions that automatically occur for any Identity-enabled Item. If changes to Identity are discovered after calling `/identity/refresh`, Plaid will fire a webhook [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/identity/#default_update).  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/identity/refresh` is offered as an add-on to Identity and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
       * @summary Refresh identity data
       * @param {IdentityRefreshRequest} identityRefreshRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      identityRefresh(identityRefreshRequest, options) {
        return exports.PlaidApiFp(this.configuration).identityRefresh(identityRefreshRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Try to autofill an Identity Verification based of the provided phone number, date of birth and country of residence.
       * @summary Create autofill for an Identity Verification
       * @param {IdentityVerificationAutofillCreateRequest} identityVerificationAutofillCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      identityVerificationAutofillCreate(identityVerificationAutofillCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).identityVerificationAutofillCreate(identityVerificationAutofillCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Create a new Identity Verification for the user specified by the `client_user_id` field. The requirements and behavior of the verification are determined by the `template_id` provided. If you don\'t know whether the associated user already has an active Identity Verification, you can specify `\"is_idempotent\": true` in the request body. With idempotency enabled, a new Identity Verification will only be created if one does not already exist for the associated `client_user_id` and `template_id`. If an Identity Verification is found, it will be returned unmodified with an `200 OK` HTTP status code.  You can also use this endpoint to supply information you already have collected about the user; if any of these fields are specified, the screens prompting the user to enter them will be skipped during the Link flow.
       * @summary Create a new Identity Verification
       * @param {IdentityVerificationCreateRequest} identityVerificationCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      identityVerificationCreate(identityVerificationCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).identityVerificationCreate(identityVerificationCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Retrieve a previously created Identity Verification.
       * @summary Retrieve Identity Verification
       * @param {IdentityVerificationGetRequest} identityVerificationGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      identityVerificationGet(identityVerificationGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).identityVerificationGet(identityVerificationGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Filter and list Identity Verifications created by your account
       * @summary List Identity Verifications
       * @param {IdentityVerificationListRequest} identityVerificationListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      identityVerificationList(identityVerificationListRequest, options) {
        return exports.PlaidApiFp(this.configuration).identityVerificationList(identityVerificationListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Allow a customer to retry their Identity Verification
       * @summary Retry an Identity Verification
       * @param {IdentityVerificationRetryRequest} identityVerificationRetryRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      identityVerificationRetry(identityVerificationRetryRequest, options) {
        return exports.PlaidApiFp(this.configuration).identityVerificationRetry(identityVerificationRetryRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing.
       * @summary (Deprecated) Create an income verification instance
       * @param {IncomeVerificationCreateRequest} incomeVerificationCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      incomeVerificationCreate(incomeVerificationCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).incomeVerificationCreate(incomeVerificationCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The `request_id` is returned in the `Plaid-Request-ID` header.
       * @summary (Deprecated) Download the original documents used for income verification
       * @param {IncomeVerificationDocumentsDownloadRequest} incomeVerificationDocumentsDownloadRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest, options) {
        return exports.PlaidApiFp(this.configuration).incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
       * @summary (Deprecated) Retrieve information from the paystubs used for income verification
       * @param {IncomeVerificationPaystubsGetRequest} incomeVerificationPaystubsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/precheck` instead.
       * @summary (Deprecated) Check digital income verification eligibility and optimize conversion
       * @param {IncomeVerificationPrecheckRequest} incomeVerificationPrecheckRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      incomeVerificationPrecheck(incomeVerificationPrecheckRequest, options) {
        return exports.PlaidApiFp(this.configuration).incomeVerificationPrecheck(incomeVerificationPrecheckRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user\'\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
       * @summary (Deprecated) Retrieve information from the tax documents used for income verification
       * @param {IncomeVerificationTaxformsGetRequest} incomeVerificationTaxformsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      incomeVerificationTaxformsGet(incomeVerificationTaxformsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).incomeVerificationTaxformsGet(incomeVerificationTaxformsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
       * @summary Get details of all supported institutions
       * @param {InstitutionsGetRequest} institutionsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      institutionsGet(institutionsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).institutionsGet(institutionsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
       * @summary Get details of an institution
       * @param {InstitutionsGetByIdRequest} institutionsGetByIdRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      institutionsGetById(institutionsGetByIdRequest, options) {
        return exports.PlaidApiFp(this.configuration).institutionsGetById(institutionsGetByIdRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
       * @summary Search institutions
       * @param {InstitutionsSearchRequest} institutionsSearchRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      institutionsSearch(institutionsSearchRequest, options) {
        return exports.PlaidApiFp(this.configuration).institutionsSearch(institutionsSearchRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/investments/auth/get` endpoint allows developers to receive user-authorized data to facilitate the transfer of holdings
       * @summary Get data needed to authorize an investments transfer
       * @param {InvestmentsAuthGetRequest} investmentsAuthGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      investmentsAuthGet(investmentsAuthGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).investmentsAuthGet(investmentsAuthGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.
       * @summary Get Investment holdings
       * @param {InvestmentsHoldingsGetRequest} investmentsHoldingsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      investmentsHoldingsGet(investmentsHoldingsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).investmentsHoldingsGet(investmentsHoldingsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/investments/refresh` is an optional endpoint for users of the Investments product. It initiates an on-demand extraction to fetch the newest investment holdings and transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Investments-enabled Item. If changes to investments are discovered after calling `/investments/refresh`, Plaid will fire webhooks: [`HOLDINGS: DEFAULT_UPDATE`](https://plaid.com/docs/api/products/investments/#holdings-default_update) if any new holdings are detected, and [`INVESTMENTS_TRANSACTIONS: DEFAULT_UPDATE`](https://plaid.com/docs/api/products/investments/#investments_transactions-default_update) if any new investment transactions are detected. This webhook will typically not fire in the Sandbox environment, due to the lack of dynamic investment transactions and holdings data. To test this webhook in Sandbox, call `/sandbox/item/fire_webhook`. Updated holdings and investment transactions can be fetched by calling `/investments/holdings/get` and `/investments/transactions/get`. Note that the `/investments/refresh` endpoint is not supported by all institutions. If called on an Item from an institution that does not support this functionality, it will return a `PRODUCT_NOT_SUPPORTED` error.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/investments/refresh` is offered as an add-on to Investments and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
       * @summary Refresh investment data
       * @param {InvestmentsRefreshRequest} investmentsRefreshRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      investmentsRefresh(investmentsRefreshRequest, options) {
        return exports.PlaidApiFp(this.configuration).investmentsRefresh(investmentsRefreshRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/investments/transactions/get` endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.  Note that Investments does not have a webhook to indicate when initial transaction data has loaded (unless you use the `async_update` option). Instead, if transactions data is not ready when `/investments/transactions/get` is first called, Plaid will wait for the data. For this reason, calling `/investments/transactions/get` immediately after Link may take up to one to two minutes to return.  Data returned by the asynchronous investments extraction flow (when `async_update` is set to true) may not be immediately available to `/investments/transactions/get`. To be alerted when the data is ready to be fetched, listen for the `HISTORICAL_UPDATE` webhook. If no investments history is ready when `/investments/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
       * @summary Get investment transactions
       * @param {InvestmentsTransactionsGetRequest} investmentsTransactionsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      investmentsTransactionsGet(investmentsTransactionsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).investmentsTransactionsGet(investmentsTransactionsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Retrieve detailed information about a specific `Issue`. This endpoint returns a single `Issue` object.
       * @summary Get an Issue
       * @param {IssuesGetRequest} issuesGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      issuesGet(issuesGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).issuesGet(issuesGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Search for an issue associated with one of the following identifiers:  `item_id`, `link_session_id` or Link session `request_id`.  This endpoint returns a list of `Issue` objects, with an empty list indicating that no issues are associated with the provided identifier. At least one of the identifiers must be provided to perform the search.
       * @summary Search for an Issue
       * @param {IssuesSearchRequest} issuesSearchRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      issuesSearch(issuesSearchRequest, options) {
        return exports.PlaidApiFp(this.configuration).issuesSearch(issuesSearchRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Allows a user to subscribe to updates on a specific `Issue` using a POST method. Subscribers will receive webhook notifications when the issue status changes, particularly when resolved.
       * @summary Subscribe to an Issue
       * @param {IssuesSubscribeRequest} issuesSubscribeRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      issuesSubscribe(issuesSubscribeRequest, options) {
        return exports.PlaidApiFp(this.configuration).issuesSubscribe(issuesSubscribeRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`.
       * @summary Invalidate access_token
       * @param {ItemAccessTokenInvalidateRequest} itemAccessTokenInvalidateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest, options) {
        return exports.PlaidApiFp(this.configuration).itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * List a historical log of user consent events
       * @summary List a historical log of user consent events
       * @param {ItemActivityListRequest} itemActivityListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      itemActivityList(itemActivityListRequest, options) {
        return exports.PlaidApiFp(this.configuration).itemActivityList(itemActivityListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * List a user’s connected applications
       * @summary List a user’s connected applications
       * @param {ItemApplicationListRequest} itemApplicationListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      itemApplicationList(itemApplicationListRequest, options) {
        return exports.PlaidApiFp(this.configuration).itemApplicationList(itemApplicationListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Enable consumers to update product access on selected accounts for an application.
       * @summary Update the scopes of access for a particular application
       * @param {ItemApplicationScopesUpdateRequest} itemApplicationScopesUpdateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest, options) {
        return exports.PlaidApiFp(this.configuration).itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Unlink a user’s connected application. On an unlink request, Plaid will immediately revoke the Application’s access to the User’s data.  The User will have to redo the OAuth authentication process in order to restore functionality.  This endpoint only removes ongoing data access permissions, therefore the User will need to reach out to the Application itself in order to disable and delete their account and delete any data that the Application already received (if the Application does not do so by default).  This endpoint should be called in real time as the User is unlinking an Application, and should not be batched in order to ensure that the change is reflected as soon as possible.
       * @summary Unlink a user’s connected application
       * @param {ItemApplicationUnlinkRequest} itemApplicationUnlinkRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      itemApplicationUnlink(itemApplicationUnlinkRequest, options) {
        return exports.PlaidApiFp(this.configuration).itemApplicationUnlink(itemApplicationUnlinkRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
       * @summary Create public token
       * @param {ItemPublicTokenCreateRequest} itemPublicTokenCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      itemCreatePublicToken(itemPublicTokenCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).itemCreatePublicToken(itemPublicTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Returns information about the status of an Item.
       * @summary Retrieve an Item
       * @param {ItemGetRequest} itemGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      itemGet(itemGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).itemGet(itemGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated.
       * @summary Import Item
       * @param {ItemImportRequest} itemImportRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      itemImport(itemImportRequest, options) {
        return exports.PlaidApiFp(this.configuration).itemImport(itemImportRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes. An `access_token` does not expire, but can be revoked by calling `/item/remove`.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
       * @summary Exchange public token for an access token
       * @param {ItemPublicTokenExchangeRequest} itemPublicTokenExchangeRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      itemPublicTokenExchange(itemPublicTokenExchangeRequest, options) {
        return exports.PlaidApiFp(this.configuration).itemPublicTokenExchange(itemPublicTokenExchangeRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/item/remove` endpoint allows you to remove an Item. Once removed, the `access_token`, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.   Calling `/item/remove` is a recommended best practice when offboarding users or if a user chooses to disconnect an account linked via Plaid. For subscription products, such as Transactions, Liabilities, and Investments, calling `/item/remove` is required to end subscription billing for the Item. For money movement products such as Auth and Transfer, if the Item is at an institution that uses Tokenized Account Numbers (TANs), such as Chase or PNC, calling `/item/remove` will invalidate the TAN, and subsequent ACH transfer attempts using that TAN will be returned.  In Limited Production, calling `/item/remove` does not impact the number of remaining Limited Production Items you have available.  Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove access to them specifically using the `/asset_report/remove` endpoint.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution\'s OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.
       * @summary Remove an Item
       * @param {ItemRemoveRequest} itemRemoveRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      itemRemove(itemRemoveRequest, options) {
        return exports.PlaidApiFp(this.configuration).itemRemove(itemRemoveRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL.
       * @summary Update Webhook URL
       * @param {ItemWebhookUpdateRequest} itemWebhookUpdateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      itemWebhookUpdate(itemWebhookUpdateRequest, options) {
        return exports.PlaidApiFp(this.configuration).itemWebhookUpdate(itemWebhookUpdateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/link/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.
       * @summary Retrieve Liabilities data
       * @param {LiabilitiesGetRequest} liabilitiesGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      liabilitiesGet(liabilitiesGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).liabilitiesGet(liabilitiesGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/link_delivery/create` endpoint to create a Hosted Link session.
       * @summary Create Hosted Link session
       * @param {LinkDeliveryCreateRequest} linkDeliveryCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      linkDeliveryCreate(linkDeliveryCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).linkDeliveryCreate(linkDeliveryCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/link_delivery/get` endpoint to get the status of a Hosted Link session.
       * @summary Get Hosted Link session
       * @param {LinkDeliveryGetRequest} linkDeliveryGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      linkDeliveryGet(linkDeliveryGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).linkDeliveryGet(linkDeliveryGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Exchange an OAuth `link_correlation_id` for the corresponding `link_token`. The `link_correlation_id` is only available for \'payment_initiation\' products and is provided to the client via the OAuth `redirect_uri` as a query parameter. The `link_correlation_id` is ephemeral and expires in a brief period, after which it can no longer be exchanged for the \'link_token\'.
       * @summary Exchange the Link Correlation Id for a Link Token
       * @param {LinkOAuthCorrelationIdExchangeRequest} linkOAuthCorrelationIdExchangeRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      linkOauthCorrelationIdExchange(linkOAuthCorrelationIdExchangeRequest, options) {
        return exports.PlaidApiFp(this.configuration).linkOauthCorrelationIdExchange(linkOAuthCorrelationIdExchangeRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`. For most Plaid products, the `public_token` is saved and exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow. For more details, see the [Link flow overview](https://plaid.com/docs/link/#link-flow-overview).  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the [update mode](https://plaid.com/docs/link/update-mode) flow for tokens with expired credentials, or the Identity Verification flow.
       * @summary Create Link Token
       * @param {LinkTokenCreateRequest} linkTokenCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      linkTokenCreate(linkTokenCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).linkTokenCreate(linkTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/link/token/get` endpoint gets information about a Link session, including all callbacks fired during the session along with their metadata, including the public token. This endpoint is used with Link flows that don\'t provide a public token via frontend callbacks, such as the [Hosted Link flow](https://plaid.com/docs/link/hosted-link/) and the [Multi-Item Link flow](https://plaid.com/docs/link/multi-item-link/). It also can be useful for debugging purposes.
       * @summary Get Link Token
       * @param {LinkTokenGetRequest} linkTokenGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      linkTokenGet(linkTokenGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).linkTokenGet(linkTokenGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint allows you to retrieve the Network Insights from a list of `access_tokens`.
       * @summary Retrieve network insights for the provided `access_tokens`
       * @param {NetworkInsightsReportGetRequest} networkInsightsReportGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      networkInsightsReportGet(networkInsightsReportGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).networkInsightsReportGet(networkInsightsReportGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/network/status/get` endpoint can be used to check whether Plaid has a matching profile for the user. This is useful for determining if a user is eligible for a streamlined experience, such as Layer.  Note: it is strongly recommended to check for Layer eligibility in the frontend. `/network/status/get` should only be used for checking Layer eligibility if a frontend check is not possible for your use case. For instructions on performing a frontend eligibility check, see the [Layer documentation](https://plaid.com/docs/layer/#integration-overview).
       * @summary Check a user\'s Plaid Network status
       * @param {NetworkStatusGetRequest} networkStatusGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      networkStatusGet(networkStatusGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).networkStatusGet(networkStatusGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/partner/customer/create` endpoint is used by reseller partners to create end customers. To create end customers, it should be called in the Production environment only, even when creating Sandbox API keys. If called in the Sandbox environment, it will return a sample response, but no customer will be created and the API keys will not be valid.
       * @summary Creates a new end customer for a Plaid reseller.
       * @param {PartnerCustomerCreateRequest} partnerCustomerCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      partnerCustomerCreate(partnerCustomerCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).partnerCustomerCreate(partnerCustomerCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/partner/customer/enable` endpoint is used by reseller partners to enable an end customer in the full Production environment.
       * @summary Enables a Plaid reseller\'s end customer in the Production environment.
       * @param {PartnerCustomerEnableRequest} partnerCustomerEnableRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      partnerCustomerEnable(partnerCustomerEnableRequest, options) {
        return exports.PlaidApiFp(this.configuration).partnerCustomerEnable(partnerCustomerEnableRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/partner/customer/get` endpoint is used by reseller partners to retrieve data about a single end customer.
       * @summary Returns a Plaid reseller\'s end customer.
       * @param {PartnerCustomerGetRequest} partnerCustomerGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      partnerCustomerGet(partnerCustomerGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).partnerCustomerGet(partnerCustomerGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/partner/customer/oauth_institutions/get` endpoint is used by reseller partners to retrieve OAuth-institution registration information about a single end customer. To learn how to set up a webhook to listen to status update events, visit the [reseller documentation](https://plaid.com/docs/account/resellers/#enabling-end-customers).
       * @summary Returns OAuth-institution registration information for a given end customer.
       * @param {PartnerCustomerOAuthInstitutionsGetRequest} partnerCustomerOAuthInstitutionsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      partnerCustomerOauthInstitutionsGet(partnerCustomerOAuthInstitutionsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).partnerCustomerOauthInstitutionsGet(partnerCustomerOAuthInstitutionsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/partner/customer/remove` endpoint is used by reseller partners to remove an end customer. Removing an end customer will remove it from view in the Plaid Dashboard and deactivate its API keys. This endpoint can only be used to remove an end customer that has not yet been enabled in full Production.
       * @summary Removes a Plaid reseller\'s end customer.
       * @param {PartnerCustomerRemoveRequest} partnerCustomerRemoveRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      partnerCustomerRemove(partnerCustomerRemoveRequest, options) {
        return exports.PlaidApiFp(this.configuration).partnerCustomerRemove(partnerCustomerRemoveRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/payment_initiation/consent/create` endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with `UNAUTHORISED` status by default and must be authorised by the user before payments can be initiated.  Consents can be limited in time and scope, and have constraints that describe limitations for payments.
       * @summary Create payment consent
       * @param {PaymentInitiationConsentCreateRequest} paymentInitiationConsentCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      paymentInitiationConsentCreate(paymentInitiationConsentCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationConsentCreate(paymentInitiationConsentCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/payment_initiation/consent/get` endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints.
       * @summary Get payment consent
       * @param {PaymentInitiationConsentGetRequest} paymentInitiationConsentGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      paymentInitiationConsentGet(paymentInitiationConsentGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationConsentGet(paymentInitiationConsentGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/payment_initiation/consent/payment/execute` endpoint can be used to execute payments using payment consent.
       * @summary Execute a single payment using consent
       * @param {PaymentInitiationConsentPaymentExecuteRequest} paymentInitiationConsentPaymentExecuteRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      paymentInitiationConsentPaymentExecute(paymentInitiationConsentPaymentExecuteRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationConsentPaymentExecute(paymentInitiationConsentPaymentExecuteRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/payment_initiation/consent/revoke` endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it.
       * @summary Revoke payment consent
       * @param {PaymentInitiationConsentRevokeRequest} paymentInitiationConsentRevokeRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      paymentInitiationConsentRevoke(paymentInitiationConsentRevokeRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationConsentRevoke(paymentInitiationConsentRevokeRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR, GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency).  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer, GBP-denominated payments will be sent via the Faster Payments network and for non-Eurozone markets typically via the local payment scheme, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer or other local payment schemes will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In Limited Production, payments must be below 5 GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency), and standing orders, variable recurring payments, and Virtual Accounts are not supported.
       * @summary Create a payment
       * @param {PaymentInitiationPaymentCreateRequest} paymentInitiationPaymentCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
       * @summary Get payment details
       * @param {PaymentInitiationPaymentGetRequest} paymentInitiationPaymentGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.
       * @summary List payments
       * @param {PaymentInitiationPaymentListRequest} paymentInitiationPaymentListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      paymentInitiationPaymentList(paymentInitiationPaymentListRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationPaymentList(paymentInitiationPaymentListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Reverse a settled payment from a Plaid virtual account.  The original payment must be in a settled state to be refunded. To refund partially, specify the amount as part of the request. If the amount is not specified, the refund amount will be equal to all of the remaining payment amount that has not been refunded yet.  The refund will go back to the source account that initiated the payment. The original payment must have been initiated to a Plaid virtual account so that this account can be used to initiate the refund.  Providing counterparty information such as date of birth and address increases  the likelihood of refund being successful without human intervention.
       * @summary Reverse an existing payment
       * @param {PaymentInitiationPaymentReverseRequest} paymentInitiationPaymentReverseRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA) or a non-Eurozone country [supported](https://plaid.com/global) by Plaid. For a standing order (recurring) payment, the recipient must be in the UK.  It is recommended to use `bacs` in the UK and `iban` in EU.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`.
       * @summary Create payment recipient
       * @param {PaymentInitiationRecipientCreateRequest} paymentInitiationRecipientCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Get details about a payment recipient you have previously created.
       * @summary Get payment recipient
       * @param {PaymentInitiationRecipientGetRequest} paymentInitiationRecipientGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.
       * @summary List payment recipients
       * @param {PaymentInitiationRecipientListRequest} paymentInitiationRecipientListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      paymentInitiationRecipientList(paymentInitiationRecipientListRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentInitiationRecipientList(paymentInitiationRecipientListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use `/payment_profile/create` endpoint to create a new payment profile. To initiate the account linking experience, call `/link/token/create` and provide the `payment_profile_token` in the `transfer.payment_profile_token` field. You can then use the `payment_profile_token` when creating transfers using `/transfer/authorization/create` and `/transfer/create`.
       * @summary Create payment profile
       * @param {PaymentProfileCreateRequest} paymentProfileCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      paymentProfileCreate(paymentProfileCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentProfileCreate(paymentProfileCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use `/payment_profile/get` endpoint to get the status of a given Payment Profile.
       * @summary Get payment profile
       * @param {PaymentProfileGetRequest} paymentProfileGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      paymentProfileGet(paymentProfileGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentProfileGet(paymentProfileGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/payment_profile/remove` endpoint to remove a given Payment Profile. Once it’s removed, it can no longer be used to create transfers.
       * @summary Remove payment profile
       * @param {PaymentProfileRemoveRequest} paymentProfileRemoveRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      paymentProfileRemove(paymentProfileRemoveRequest, options) {
        return exports.PlaidApiFp(this.configuration).paymentProfileRemove(paymentProfileRemoveRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint returns the account associated with a given processor token.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, the account balance returned may not be up-to-date; for realtime balance information, use `/processor/balance/get` instead. Note that some information is nullable.
       * @summary Retrieve the account associated with a processor token
       * @param {ProcessorAccountGetRequest} processorAccountGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorAccountGet(processorAccountGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorAccountGet(processorAccountGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
       * @summary Create Apex bank account token
       * @param {ProcessorApexProcessorTokenCreateRequest} processorApexProcessorTokenCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking, savings, or cash management account that\'\'s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.  Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14).
       * @summary Retrieve Auth data
       * @param {ProcessorAuthGetRequest} processorAuthGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorAuthGet(processorAuthGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorAuthGet(processorAuthGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/processor/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached.
       * @summary Retrieve Balance data
       * @param {ProcessorBalanceGetRequest} processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorBalanceGet(processorBalanceGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorBalanceGet(processorBalanceGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor
       * @summary Create a bank transfer as a processor
       * @param {ProcessorBankTransferCreateRequest} processorBankTransferCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorBankTransferCreate(processorBankTransferCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorBankTransferCreate(processorBankTransferCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
       * @summary Retrieve Identity data
       * @param {ProcessorIdentityGetRequest} processorIdentityGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorIdentityGet(processorIdentityGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorIdentityGet(processorIdentityGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/processor/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder\'s financial institution.  Fields within the `balances` object will always be null when retrieved by `/identity/match`. Instead, use the free `/accounts/get` endpoint to request balance cached data, or `/accounts/balance/get` for real-time data.
       * @summary Retrieve identity match score
       * @param {ProcessorIdentityMatchRequest} processorIdentityMatchRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorIdentityMatch(processorIdentityMatchRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorIdentityMatch(processorIdentityMatchRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint returns the stock position data of the account associated with a given processor token.
       * @summary Retrieve Investment Holdings
       * @param {ProcessorInvestmentsHoldingsGetRequest} processorInvestmentsHoldingsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorInvestmentsHoldingsGet(processorInvestmentsHoldingsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorInvestmentsHoldingsGet(processorInvestmentsHoldingsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/processor/investments/transactions/get` endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for the investment account associated with the processor token.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with the account, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.  Note that Investments does not have a webhook to indicate when initial transaction data has loaded (unless you use the `async_update` option). Instead, if transactions data is not ready when `/processor/investments/transactions/get` is first called, Plaid will wait for the data. For this reason, calling `/processor/investments/transactions/get` immediately after Link may take up to one to two minutes to return.  Data returned by the asynchronous investments extraction flow (when `async_update` is set to true) may not be immediately available to `/processor/investments/transactions/get`. To be alerted when the data is ready to be fetched, listen for the `HISTORICAL_UPDATE` webhook. If no investments history is ready when `/processor/investments/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.  To receive Investments Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
       * @summary Get investment transactions data
       * @param {ProcessorInvestmentsTransactionsGetRequest} processorInvestmentsTransactionsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorInvestmentsTransactionsGet(processorInvestmentsTransactionsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorInvestmentsTransactionsGet(processorInvestmentsTransactionsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/processor/liabilities/get` endpoint returns various details about a loan or credit account. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`.  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/processor/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the processor token. This is because Plaid must communicate directly with the institution to retrieve the additional data.
       * @summary Retrieve Liabilities data
       * @param {ProcessorLiabilitiesGetRequest} processorLiabilitiesGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorLiabilitiesGet(processorLiabilitiesGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorLiabilitiesGet(processorLiabilitiesGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * After calling `/processor/signal/evaluate`, call `/processor/signal/decision/report` to report whether the transaction was initiated.  If you are using the [Plaid Transfer product](https://www.plaid.com/docs/transfer) to create transfers, it is not necessary to use this endpoint, as Plaid already knows whether the transfer was initiated.
       * @summary Report whether you initiated an ACH transaction
       * @param {ProcessorSignalDecisionReportRequest} processorSignalDecisionReportRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorSignalDecisionReport(processorSignalDecisionReportRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorSignalDecisionReport(processorSignalDecisionReportRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use `/processor/signal/evaluate` to evaluate a planned ACH transaction as a processor to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/processor/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to our error documentation on [item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time. To reduce this latency, you can call `/signal/prepare` on the Item before you need to request Signal data.
       * @summary Evaluate a planned ACH transaction
       * @param {ProcessorSignalEvaluateRequest} processorSignalEvaluateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorSignalEvaluate(processorSignalEvaluateRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorSignalEvaluate(processorSignalEvaluateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * When a processor token is not initialized with Signal, call `/processor/signal/prepare` to opt-in that processor token to the Signal data collection process, which will improve the accuracy of the Signal score.  If this endpoint is called with a processor token that is already initialized with Signal, it will return a 200 response and will not modify the processor token.
       * @summary Opt-in a processor token to Signal
       * @param {ProcessorSignalPrepareRequest} processorSignalPrepareRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorSignalPrepare(processorSignalPrepareRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorSignalPrepare(processorSignalPrepareRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Call the `/processor/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/processor/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.  If you are using the [Plaid Transfer product](https://www.plaid.com/docs/transfer) to create transfers, it is not necessary to use this endpoint, as Plaid already knows whether the transfer was returned.
       * @summary Report a return for an ACH transaction
       * @param {ProcessorSignalReturnReportRequest} processorSignalReturnReportRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorSignalReturnReport(processorSignalReturnReportRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorSignalReturnReport(processorSignalReturnReportRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *  Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).  Note that the Stripe bank account token is a one-time use token. To store bank account information for later use, you can use a Stripe customer object and create an associated bank account from the token, or you can use a Stripe Custom account and create an associated external bank account from the token. This bank account information should work indefinitely, unless the user\'s bank account information changes or they revoke Plaid\'s permissions to access their account. Stripe bank account information cannot be modified once the bank account token has been created. If you ever need to change the bank account details used by Stripe for a specific customer, have the user go through Link again and create a new bank account token from the new `access_token`.  To revoke a bank account token, the entire underlying access token must be revoked using `/item/remove`.
       * @summary Create Stripe bank account token
       * @param {ProcessorStripeBankAccountTokenCreateRequest} processorStripeBankAccountTokenCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Used to create a token suitable for sending to one of Plaid\'s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations. If using multiple processors, multiple different processor tokens can be created for a single access token. Once created, a processor token for a given Item cannot be modified or updated. To revoke the processor\'s access, the entire Item must be deleted by calling `/item/remove`.
       * @summary Create processor token
       * @param {ProcessorTokenCreateRequest} processorTokenCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorTokenCreate(processorTokenCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorTokenCreate(processorTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Used to get a processor token\'s product permissions. The `products` field will be an empty list if the processor can access all available products.
       * @summary Get a processor token\'s product permissions
       * @param {ProcessorTokenPermissionsGetRequest} processorTokenPermissionsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorTokenPermissionsGet(processorTokenPermissionsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorTokenPermissionsGet(processorTokenPermissionsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Used to control a processor\'s access to products on the given processor token. By default, a processor will have access to all available products on the corresponding item. To restrict access to a particular set of products, call this endpoint with the desired products. To restore access to all available products, call this endpoint with an empty list. This endpoint can be called multiple times as your needs and your processor\'s needs change.
       * @summary Control a processor\'s access to products
       * @param {ProcessorTokenPermissionsSetRequest} processorTokenPermissionsSetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorTokenPermissionsSet(processorTokenPermissionsSetRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorTokenPermissionsSet(processorTokenPermissionsSetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint allows you, the processor, to update the webhook URL associated with a processor token. This request triggers a `WEBHOOK_UPDATE_ACKNOWLEDGED` webhook to the newly specified webhook URL.
       * @summary Update a processor token\'s webhook URL
       * @param {ProcessorTokenWebhookUpdateRequest} processorTokenWebhookUpdateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorTokenWebhookUpdate(processorTokenWebhookUpdateRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorTokenWebhookUpdate(processorTokenWebhookUpdateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/processor/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/processor/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with a processor token, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/processor/transactions/get` will be the data available for the processor token as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To force Plaid to check for new transactions, you can use the `/processor/transactions/refresh` endpoint.  Note that data may not be immediately available to `/processor/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/processor/transactions/get`, if it wasn\'t. If no transaction history is ready when `/processor/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
       * @summary Get transaction data
       * @param {ProcessorTransactionsGetRequest} processorTransactionsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorTransactionsGet(processorTransactionsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorTransactionsGet(processorTransactionsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/processor/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on a processor token that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/processor/transactions/get` or `/processor/transactions/sync`). Once all historical transactions have been fetched, call `/processor/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/processor/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/processor/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/processor/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
       * @summary Fetch recurring transaction streams
       * @param {ProcessorTransactionsRecurringGetRequest} processorTransactionsRecurringGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorTransactionsRecurringGet(processorTransactionsRecurringGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorTransactionsRecurringGet(processorTransactionsRecurringGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/processor/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for a processor token. This on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Transactions-enabled processor token. If changes to transactions are discovered after calling `/processor/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/processor/transactions/sync` and `/processor/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/processor/transactions/get` or `/processor/transactions/sync`. Note that the `/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) non-depository accounts and will result in a `PRODUCTS_NOT_SUPPORTED` error if called on an Item that contains only non-depository accounts from that institution.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/processor/transactions/refresh` is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
       * @summary Refresh transaction data
       * @param {ProcessorTransactionsRefreshRequest} processorTransactionsRefreshRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorTransactionsRefresh(processorTransactionsRefreshRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorTransactionsRefresh(processorTransactionsRefreshRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *  The `/processor/transactions/sync` endpoint retrieves transactions associated with an Item and can fetch updates using a cursor to track which updates have already been seen.  For important instructions on integrating with `/processor/transactions/sync`, see the [Transactions integration overview](https://plaid.com/docs/transactions/#integration-overview). If you are migrating from an existing integration using `/processor/transactions/get`, see the [Transactions Sync migration guide](https://plaid.com/docs/transactions/sync-migration/).  This endpoint supports `credit`, `depository`, and some `loan`-type accounts (only those with account subtype `student`). For `investments` accounts, use `/investments/transactions/get` instead.  When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/processor/transactions/sync` fails when retrieving a paginated update (e.g due to the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error), the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  If transactions data is not yet available for the Item, which can happen if the Item was not initialized with transactions during the `/link/token/create` call or if `/processor/transactions/sync` was called within a few seconds of Item creation, `/processor/transactions/sync` will return empty transactions arrays.   Plaid typically checks for new transactions data between one and four times per day, depending on the institution. To find out when transactions were last updated for an Item, use the [Item Debugger](https://plaid.com/docs/account/activity/#troubleshooting-with-item-debugger) or call `/item/get`; the `item.status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/processor/transactions/refresh` endpoint.  To be alerted when new transactions are available, listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.  To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processor-partners/#processortokenwebhookupdate) endpoint.
       * @summary Get incremental transaction updates on a processor token
       * @param {ProcessorTransactionsSyncRequest} processorTransactionsSyncRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      processorTransactionsSync(processorTransactionsSyncRequest, options) {
        return exports.PlaidApiFp(this.configuration).processorTransactionsSync(processorTransactionsSyncRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/profile/network_status/get` endpoint can be used to check whether Plaid has a matching profile for the user.
       * @summary Check a user\'s Plaid Network status
       * @param {ProfileNetworkStatusGetRequest} profileNetworkStatusGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      profileNetworkStatusGet(profileNetworkStatusGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).profileNetworkStatusGet(profileNetworkStatusGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/bank_income/fire_webhook` endpoint to manually trigger a Bank Income webhook in the Sandbox environment.
       * @summary Manually fire a bank income webhook in sandbox
       * @param {SandboxBankIncomeFireWebhookRequest} sandboxBankIncomeFireWebhookRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxBankIncomeFireWebhook(sandboxBankIncomeFireWebhookRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxBankIncomeFireWebhook(sandboxBankIncomeFireWebhookRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
       * @summary Manually fire a Bank Transfer webhook
       * @param {SandboxBankTransferFireWebhookRequest} sandboxBankTransferFireWebhookRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
       * @summary Simulate a bank transfer event in Sandbox
       * @param {SandboxBankTransferSimulateRequest} sandboxBankTransferSimulateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/cra/cashflow_updates/update` endpoint to manually trigger an update for cashflow updates (Monitoring) in the Sandbox environment.
       * @summary Trigger an update for Cashflow Updates
       * @param {SandboxCraCashflowUpdatesUpdateRequest} sandboxCraCashflowUpdatesUpdateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxCraCashflowUpdatesUpdate(sandboxCraCashflowUpdatesUpdateRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxCraCashflowUpdatesUpdate(sandboxCraCashflowUpdatesUpdateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/income/fire_webhook` endpoint to manually trigger a Payroll or Document Income webhook in the Sandbox environment.
       * @summary Manually fire an Income webhook
       * @param {SandboxIncomeFireWebhookRequest} sandboxIncomeFireWebhookRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks:  `DEFAULT_UPDATE`: Webhook to be fired for a given Sandbox Item simulating a default update event for the respective product as specified with the `webhook_type` in the request body. Valid Sandbox `DEFAULT_UPDATE` webhook types include: `AUTH`, `IDENTITY`, `TRANSACTIONS`, `INVESTMENTS_TRANSACTIONS`, `LIABILITIES`, `HOLDINGS`. If the Item does not support the product, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `NEW_ACCOUNTS_AVAILABLE`: Fired to indicate that a new account is available on the Item and you can launch update mode to request access to it.  `SMS_MICRODEPOSITS_VERIFICATION`: Fired when a given same day micro-deposit item is verified via SMS verification.  `LOGIN_REPAIRED`: Fired when an Item recovers from the `ITEM_LOGIN_REQUIRED` without the user going through update mode in your app.  `PENDING_DISCONNECT`: Fired when an Item will stop working in the near future (e.g. due to a planned bank migration) and must be sent through update mode to continue working.   `RECURRING_TRANSACTIONS_UPDATE`: Recurring Transactions webhook to be fired for a given Sandbox Item. If the Item does not support Recurring Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `SYNC_UPDATES_AVAILABLE`: Transactions webhook to be fired for a given Sandbox Item.  If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `PRODUCT_READY`: Assets webhook to be fired when a given asset report has been successfully generated. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `ERROR`: Assets webhook to be fired when asset report generation has failed. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `USER_PERMISSION_REVOKED`: Indicates an end user has revoked the permission that they previously granted to access an Item. May not always fire upon revocation, as some institutions’ consent portals do not trigger this webhook. Upon receiving this webhook, it is recommended to delete any stored data from Plaid associated with the account or Item.  `USER_ACCOUNT_REVOKED`: Fired when an end user has revoked access to their account on the Data Provider\'s portal. This webhook is currently sent only for Chase and PNC Items, but may be sent in the future for other financial institutions. Upon receiving this webhook, it is recommended to delete any stored data from Plaid associated with the account or Item.  Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production (except for webhooks of type `TRANSFER`).
       * @summary Fire a test webhook
       * @param {SandboxItemFireWebhookRequest} sandboxItemFireWebhookRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxItemFireWebhook(sandboxItemFireWebhookRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxItemFireWebhook(sandboxItemFireWebhookRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
       * @summary Force a Sandbox Item into an error state
       * @param {SandboxItemResetLoginRequest} sandboxItemResetLoginRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxItemResetLogin(sandboxItemResetLoginRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxItemResetLogin(sandboxItemResetLoginRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
       * @summary Set verification status for Sandbox account
       * @param {SandboxItemSetVerificationStatusRequest} sandboxItemSetVerificationStatusRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Save the selected accounts when connecting to the Platypus Oauth institution
       * @summary Save the selected accounts when connecting to the Platypus Oauth institution
       * @param {SandboxOauthSelectAccountsRequest} sandboxOauthSelectAccountsRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/sandbox/payment_profile/reset_login/` forces a Payment Profile into a state where the login is no longer valid. This makes it easy to test update mode for Payment Profile in the Sandbox environment.   After calling `/sandbox/payment_profile/reset_login`, calls to the `/transfer/authorization/create` with the Payment Profile will result in a `decision_rationale` `PAYMENT_PROFILE_LOGIN_REQUIRED`. You can then use update mode for Payment Profile to restore it into a good state.   In order to invoke this endpoint, you must first [create a Payment Profile](https://plaid.com/docs/transfer/add-to-app/#create-a-payment-profile-optional) and [go through the Link flow](https://plaid.com/docs/transfer/add-to-app/#create-a-link-token).
       * @summary Reset the login of a Payment Profile
       * @param {SandboxPaymentProfileResetLoginRequest} sandboxPaymentProfileResetLoginRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxPaymentProfileResetLogin(sandboxPaymentProfileResetLoginRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxPaymentProfileResetLogin(sandboxPaymentProfileResetLoginRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/payment/simulate` endpoint to simulate various payment events in the Sandbox environment. This endpoint will trigger the corresponding payment status webhook.
       * @summary Simulate a payment event in Sandbox
       * @param {SandboxPaymentSimulateRequest} sandboxPaymentSimulateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxPaymentSimulate(sandboxPaymentSimulateRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxPaymentSimulate(sandboxPaymentSimulateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
       * @summary Create a test Item and processor token
       * @param {SandboxProcessorTokenCreateRequest} sandboxProcessorTokenCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data, or with Plaid\'s [pre-populated Sandbox test accounts](https://plaid.com/docs/sandbox/test-credentials/).
       * @summary Create a test Item
       * @param {SandboxPublicTokenCreateRequest} sandboxPublicTokenCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/transfer/fire_webhook` endpoint to manually trigger a `TRANSFER_EVENTS_UPDATE` webhook in the Sandbox environment.
       * @summary Manually fire a Transfer webhook
       * @param {SandboxTransferFireWebhookRequest} sandboxTransferFireWebhookRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxTransferFireWebhook(sandboxTransferFireWebhookRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxTransferFireWebhook(sandboxTransferFireWebhookRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/transfer/ledger/deposit/simulate` endpoint to simulate a ledger deposit event in the Sandbox environment.
       * @summary Simulate a ledger deposit event in Sandbox
       * @param {SandboxTransferLedgerDepositSimulateRequest} sandboxTransferLedgerDepositSimulateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxTransferLedgerDepositSimulate(sandboxTransferLedgerDepositSimulateRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxTransferLedgerDepositSimulate(sandboxTransferLedgerDepositSimulateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/transfer/ledger/simulate_available` endpoint to simulate converting pending balance to available balance for all originators in the Sandbox environment.
       * @summary Simulate converting pending balance to available balance
       * @param {SandboxTransferLedgerSimulateAvailableRequest} sandboxTransferLedgerSimulateAvailableRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxTransferLedgerSimulateAvailable(sandboxTransferLedgerSimulateAvailableRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxTransferLedgerSimulateAvailable(sandboxTransferLedgerSimulateAvailableRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/transfer/ledger/withdraw/simulate` endpoint to simulate a ledger withdraw event in the Sandbox environment.
       * @summary Simulate a ledger withdraw event in Sandbox
       * @param {SandboxTransferLedgerWithdrawSimulateRequest} sandboxTransferLedgerWithdrawSimulateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxTransferLedgerWithdrawSimulate(sandboxTransferLedgerWithdrawSimulateRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxTransferLedgerWithdrawSimulate(sandboxTransferLedgerWithdrawSimulateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/transfer/refund/simulate` endpoint to simulate a refund event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
       * @summary Simulate a refund event in Sandbox
       * @param {SandboxTransferRefundSimulateRequest} sandboxTransferRefundSimulateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxTransferRefundSimulate(sandboxTransferRefundSimulateRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxTransferRefundSimulate(sandboxTransferRefundSimulateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
       * @summary Trigger the creation of a repayment
       * @param {SandboxTransferRepaymentSimulateRequest} sandboxTransferRepaymentSimulateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
       * @summary Simulate a transfer event in Sandbox
       * @param {SandboxTransferSimulateRequest} sandboxTransferSimulateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxTransferSimulate(sandboxTransferSimulateRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxTransferSimulate(sandboxTransferSimulateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all transfers with a sweep status of `swept` will become `swept_settled`, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `returned` transfers with a sweep status of `swept` will become `return_swept`.
       * @summary Simulate creating a sweep
       * @param {SandboxTransferSweepSimulateRequest} sandboxTransferSweepSimulateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/transfer/test_clock/advance` endpoint to advance a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. A test clock can be advanced by incrementing `virtual_time`, but may never go back to a lower `virtual_time`.  If a test clock is advanced, we will simulate the changes that ought to occur during the time that elapsed.  For example, a client creates a weekly recurring transfer with a test clock set at t. When the client advances the test clock by setting `virtual_time` = t + 15 days, 2 new originations should be created, along with the webhook events.  The advancement of the test clock from its current `virtual_time` should be limited such that there are no more than 20 originations resulting from the advance operation on each `recurring_transfer` associated with the `test_clock`.  For example, if the recurring transfer associated with this test clock originates once every 4 weeks, you can advance the `virtual_time` up to 80 weeks on each API call.
       * @summary Advance a test clock
       * @param {SandboxTransferTestClockAdvanceRequest} sandboxTransferTestClockAdvanceRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxTransferTestClockAdvance(sandboxTransferTestClockAdvanceRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxTransferTestClockAdvance(sandboxTransferTestClockAdvanceRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/transfer/test_clock/create` endpoint to create a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. Test clocks are used for testing recurring transfers in Sandbox.  A test clock can be associated with up to 5 recurring transfers.
       * @summary Create a test clock
       * @param {SandboxTransferTestClockCreateRequest} sandboxTransferTestClockCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxTransferTestClockCreate(sandboxTransferTestClockCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxTransferTestClockCreate(sandboxTransferTestClockCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/transfer/test_clock/get` endpoint to get a `test_clock` in the Sandbox environment.
       * @summary Get a test clock
       * @param {SandboxTransferTestClockGetRequest} sandboxTransferTestClockGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxTransferTestClockGet(sandboxTransferTestClockGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxTransferTestClockGet(sandboxTransferTestClockGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/sandbox/transfer/test_clock/list` endpoint to see a list of all your test clocks in the Sandbox environment, by ascending `virtual_time`. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired test clocks.
       * @summary List test clocks
       * @param {SandboxTransferTestClockListRequest} sandboxTransferTestClockListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxTransferTestClockList(sandboxTransferTestClockListRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxTransferTestClockList(sandboxTransferTestClockListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/sandbox/user/reset_login/` functions the same as `/sandbox/item/reset_login`, but will modify Items related to a User. This endpoint forces each Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/user/reset_login`, You can then use Plaid Link update mode to restore Items associated with the User to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
       * @summary Force item(s) for a Sandbox User into an error state
       * @param {SandboxUserResetLoginRequest} sandboxUserResetLoginRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sandboxUserResetLogin(sandboxUserResetLoginRequest, options) {
        return exports.PlaidApiFp(this.configuration).sandboxUserResetLogin(sandboxUserResetLoginRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Any Plaid experience a user sees such as connecting a bank account, verifying identity, or sharing a credit report is considered a session. Today, most sessions happen through Link and the token to start these Link session is a link token created and configured via `link/token/create`. Sessions are a higher level abstraction where configuration primarily happens in Plaid Dashboard.  Depending on the template id provided, the session may a Link session, specified by a Link token, or may be another experience in the future. A primary benefit is that configuration changes can be done in Dashboard with no code changes required.  Currently, this endpoint is only supported for Layer templates and Link but is reserved in the future to initialize other end-user Plaid experiences. The returned Link token is used as an parameter when initializing the Link SDK. For more details, see the [Link flow overview](https://plaid.com/docs/link/#link-flow-overview).
       * @summary Create a Session Token
       * @param {SessionTokenCreateRequest} sessionTokenCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      sessionTokenCreate(sessionTokenCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).sessionTokenCreate(sessionTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated.
       * @summary Report whether you initiated an ACH transaction
       * @param {SignalDecisionReportRequest} signalDecisionReportRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      signalDecisionReport(signalDecisionReportRequest, options) {
        return exports.PlaidApiFp(this.configuration).signalDecisionReport(signalDecisionReportRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to the error documentation on [Item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time.
       * @summary Evaluate a planned ACH transaction
       * @param {SignalEvaluateRequest} signalEvaluateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      signalEvaluate(signalEvaluateRequest, options) {
        return exports.PlaidApiFp(this.configuration).signalEvaluate(signalEvaluateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * When an Item is not initialized with Signal, call `/signal/prepare` to opt-in that Item to the Signal data collection process, developing a Signal score. This should be done on Items where Signal was added in the `additional_consented_products` array but not in the `products`, `optional_products`, or `required_if_supported_products` array. If `/signal/prepare` is skipped on an Item that is not initialized with Signal, the initial call to `/signal/evaluate` on that Item will be less accurate, because Signal will have access to less data for computing the Signal score.  If run on an Item that is already initialized with Signal, this endpoint will return a 200 response and will not modify the Item.
       * @summary Opt-in an Item to Signal
       * @param {SignalPrepareRequest} signalPrepareRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      signalPrepare(signalPrepareRequest, options) {
        return exports.PlaidApiFp(this.configuration).signalPrepare(signalPrepareRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
       * @summary Report a return for an ACH transaction
       * @param {SignalReturnReportRequest} signalReturnReportRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      signalReturnReport(signalReturnReportRequest, options) {
        return exports.PlaidApiFp(this.configuration).signalReturnReport(signalReturnReportRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use `/signal/schedule` to schedule a planned ACH transaction.
       * @summary Schedule a planned ACH transaction
       * @param {SignalScheduleRequest} signalScheduleRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      signalSchedule(signalScheduleRequest, options) {
        return exports.PlaidApiFp(this.configuration).signalSchedule(signalScheduleRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/statements/download` endpoint retrieves a single statement PDF in binary format.  The response will contain a `Plaid-Content-Hash` header containing a SHA 256 checksum of the statement. This can be used to verify that the file being sent by Plaid is the same file that was downloaded to your system.
       * @summary Retrieve a single statement.
       * @param {StatementsDownloadRequest} statementsDownloadRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      statementsDownload(statementsDownloadRequest, options) {
        return exports.PlaidApiFp(this.configuration).statementsDownload(statementsDownloadRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/statements/list` endpoint retrieves a list of all statements associated with an item.
       * @summary Retrieve a list of all statements associated with an item.
       * @param {StatementsListRequest} statementsListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      statementsList(statementsListRequest, options) {
        return exports.PlaidApiFp(this.configuration).statementsList(statementsListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/statements/refresh` initiates an on-demand extraction to fetch the statements for the provided dates.
       * @summary Refresh statements data.
       * @param {StatementsRefreshRequest} statementsRefreshRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      statementsRefresh(statementsRefreshRequest, options) {
        return exports.PlaidApiFp(this.configuration).statementsRefresh(statementsRefreshRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/beta/transactions/v1/enhance` endpoint enriches raw transaction data provided directly by clients.  The product is currently in beta.
       * @summary enhance locally-held transaction data
       * @param {TransactionsEnhanceGetRequest} transactionsEnhanceGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transactionsEnhance(transactionsEnhanceGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transactionsEnhance(transactionsEnhanceGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transactions/enrich` endpoint enriches raw transaction data generated by your own banking products or retrieved from other non-Plaid sources.
       * @summary Enrich locally-held transaction data
       * @param {TransactionsEnrichRequest} transactionsEnrichRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transactionsEnrich(transactionsEnrichRequest, options) {
        return exports.PlaidApiFp(this.configuration).transactionsEnrich(transactionsEnrichRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Note: All new implementations are encouraged to use `/transactions/sync` rather than `/transactions/get`. `/transactions/sync` provides the same functionality as `/transactions/get` and improves developer ease-of-use for handling transactions updates.  The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To find out when the Item was last updated, use the [Item Debugger](https://plaid.com/docs/account/activity/#troubleshooting-with-item-debugger) or call `/item/get`; the `item.status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn\'t. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
       * @summary Get transaction data
       * @param {TransactionsGetRequest} transactionsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transactionsGet(transactionsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transactionsGet(transactionsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on an Item that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/transactions/get` or `/transactions/sync`).   When using Recurring Transactions, for best results, make sure to use the [`days_requested`](https://plaid.com/docs/api/link/#link-token-create-request-transactions-days-requested) parameter to request at least 180 days of history when initializing Items with Transactions. Once all historical transactions have been fetched, call `/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.
       * @summary Fetch recurring transaction streams
       * @param {TransactionsRecurringGetRequest} transactionsRecurringGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transactionsRecurringGet(transactionsRecurringGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transactionsRecurringGet(transactionsRecurringGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/transactions/refresh` is an optional endpoint that initiates an on-demand extraction to fetch the newest transactions for an Item. The on-demand extraction takes place in addition to the periodic extractions that automatically occur one or more times per day for any Transactions-enabled Item. The Item must already have Transactions added as a product in order to call `/transactions/refresh`.  If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/transactions/sync` and `/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get` or `/transactions/sync`.  Note that the `/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) non-depository accounts and will result in a `PRODUCTS_NOT_SUPPORTED` error if called on an Item that contains only non-depository accounts from that institution.  As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.  `/transactions/refresh` is offered as an optional add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
       * @summary Refresh transaction data
       * @param {TransactionsRefreshRequest} transactionsRefreshRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transactionsRefresh(transactionsRefreshRequest, options) {
        return exports.PlaidApiFp(this.configuration).transactionsRefresh(transactionsRefreshRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transactions/rules/v1/create` endpoint creates transaction categorization rules.  Rules will be applied on the Item\'s transactions returned in `/transactions/get` response.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
       * @summary Create transaction category rule
       * @param {TransactionsRulesCreateRequest} transactionsRulesCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transactionsRulesCreate(transactionsRulesCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).transactionsRulesCreate(transactionsRulesCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transactions/rules/v1/list` returns a list of transaction rules created for the Item associated with the access token.
       * @summary Return a list of rules created for the Item associated with the access token.
       * @param {TransactionsRulesListRequest} transactionsRulesListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transactionsRulesList(transactionsRulesListRequest, options) {
        return exports.PlaidApiFp(this.configuration).transactionsRulesList(transactionsRulesListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transactions/rules/v1/remove` endpoint is used to remove a transaction rule.
       * @summary Remove transaction rule
       * @param {TransactionsRulesRemoveRequest} transactionsRulesRemoveRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transactionsRulesRemove(transactionsRulesRemoveRequest, options) {
        return exports.PlaidApiFp(this.configuration).transactionsRulesRemove(transactionsRulesRemoveRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transactions/sync` endpoint retrieves transactions associated with an Item and can fetch updates using a cursor to track which updates have already been seen.  For important instructions on integrating with `/transactions/sync`, see the [Transactions integration overview](https://plaid.com/docs/transactions/#integration-overview). If you are migrating from an existing integration using `/transactions/get`, see the [Transactions Sync migration guide](https://plaid.com/docs/transactions/sync-migration/).  This endpoint supports `credit`, `depository`, and some `loan`-type accounts (only those with account subtype `student`). For `investments` accounts, use `/investments/transactions/get` instead.   When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/transactions/sync` fails when retrieving a paginated update (e.g due to the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error), the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  If transactions data is not yet available for the Item, which can happen if the Item was not initialized with transactions during the `/link/token/create` call or if `/transactions/sync` was called within a few seconds of Item creation, `/transactions/sync` will return empty transactions arrays.   Plaid typically checks for new transactions data between one and four times per day, depending on the institution. To find out when transactions were last updated for an Item, use the [Item Debugger](https://plaid.com/docs/account/activity/#troubleshooting-with-item-debugger) or call `/item/get`; the `item.status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/transactions/refresh` endpoint.  To be alerted when new transactions are available, listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.
       * @summary Get incremental transaction updates on an Item
       * @param {TransactionsSyncRequest} transactionsSyncRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transactionsSync(transactionsSyncRequest, options) {
        return exports.PlaidApiFp(this.configuration).transactionsSync(transactionsSyncRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/beta/transactions/user_insights/v1/get` gets user insights for clients who have enriched data with `/transactions/enrich`.  The product is currently in beta.
       * @summary Obtain user insights based on transactions sent through /transactions/enrich
       * @param {TransactionsUserInsightsGetRequest} transactionsUserInsightsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transactionsUserInsightsGet(transactionsUserInsightsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transactionsUserInsightsGet(transactionsUserInsightsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/authorization/cancel` endpoint to cancel a transfer authorization. A transfer authorization is eligible for cancellation if it has not yet been used to create a transfer.
       * @summary Cancel a transfer authorization
       * @param {TransferAuthorizationCancelRequest} transferAuthorizationCancelRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferAuthorizationCancel(transferAuthorizationCancelRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferAuthorizationCancel(transferAuthorizationCancelRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/authorization/create` endpoint to authorize a transfer. This endpoint must be called prior to calling `/transfer/create`. The transfer authorization will expire if not used after one hour. (You can contact your account manager to change the default authorization lifetime.)   There are four possible outcomes to calling this endpoint:     - If the `authorization.decision` in the response is `declined`, the proposed transfer has failed the risk check and you cannot proceed with the transfer.     - If the `authorization.decision` is `user_action_required`, additional user input is needed, usually to fix a broken bank connection, before Plaid can properly assess the risk. You need to launch Link in update mode to complete the required user action. When calling `/link/token/create` to get a new Link token, instead of providing `access_token` in the request, you should set [`transfer.authorization_id`](https://plaid.com/docs/api/link/#link-token-create-request-transfer-authorization-id) as the `authorization.id`. After the Link flow is completed, you may re-attempt the authorization.    - If the `authorization.decision` is `approved`, and the `authorization.rationale_code` is `null`, the transfer has passed the risk check and you can proceed to call `/transfer/create`.      - If the `authorization.decision` is `approved` and the `authorization.rationale_code` is non-`null`, the risk check could not be run: you may proceed with the transfer, but should perform your own risk evaluation. For more details, see the response schema.  In Plaid\'s Sandbox environment the decisions will be returned as follows:    - To approve a transfer with `null` rationale code, make an authorization request with an `amount` less than the available balance in the account.    - To approve a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To get an authorization decision of `user_action_required`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).    - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.
       * @summary Create a transfer authorization
       * @param {TransferAuthorizationCreateRequest} transferAuthorizationCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferAuthorizationCreate(transferAuthorizationCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferAuthorizationCreate(transferAuthorizationCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * (Deprecated) Use the `/transfer/balance/get` endpoint to view a balance held with Plaid.
       * @summary (Deprecated) Retrieve a balance held with Plaid
       * @param {TransferBalanceGetRequest} transferBalanceGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferBalanceGet(transferBalanceGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferBalanceGet(transferBalanceGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancellation if the `cancellable` property returned by `/transfer/get` is `true`.
       * @summary Cancel a transfer
       * @param {TransferCancelRequest} transferCancelRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferCancel(transferCancelRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferCancel(transferCancelRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/capabilities/get` endpoint to determine the RTP eligibility information of an account to be used with Transfer. This endpoint works on all Transfer-capable Items, including those created by `/transfer/migrate_account`. To simulate RTP eligibility in Sandbox, log in using the username `user_good` and password `pass_good` and use the first two checking and savings accounts in the \"First Platypus Bank\" institution (ending in 0000 or 1111), which will return `true`. Any other account will return `false`.
       * @summary Get RTP eligibility information of a transfer
       * @param {TransferCapabilitiesGetRequest} transferCapabilitiesGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferCapabilitiesGet(transferCapabilitiesGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferCapabilitiesGet(transferCapabilitiesGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/configuration/get` endpoint to view your transfer product configurations.
       * @summary Get transfer product configuration
       * @param {TransferConfigurationGetRequest} transferConfigurationGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferConfigurationGet(transferConfigurationGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferConfigurationGet(transferConfigurationGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/create` endpoint to initiate a new transfer. This endpoint is retryable and idempotent; if a transfer with the provided `transfer_id` has already been created, it will return the transfer details without creating a new transfer. A transfer may still be created if a 500 error is returned; to detect this scenario, use [Transfer events](https://plaid.com/docs/transfer/reconciling-transfers/).
       * @summary Create a transfer
       * @param {TransferCreateRequest} transferCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferCreate(transferCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferCreate(transferCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Third-party sender customers can use `/transfer/diligence/document/upload` endpoint to upload a document on behalf of its end customer (i.e. originator) to Plaid. You’ll need to send a request of type multipart/form-data. You must provide the `client_id` in the `PLAID-CLIENT-ID` header and `secret` in the `PLAID-SECRET` header.
       * @summary Upload transfer diligence document on behalf of the originator
       * @param {TransferDiligenceDocumentUploadRequest} transferDiligenceDocumentUploadRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferDiligenceDocumentUpload(transferDiligenceDocumentUploadRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferDiligenceDocumentUpload(transferDiligenceDocumentUploadRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/diligence/submit` endpoint to submit transfer diligence on behalf of the originator (i.e., the end customer).
       * @summary Submit transfer diligence on behalf of the originator
       * @param {TransferDiligenceSubmitRequest} transferDiligenceSubmitRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferDiligenceSubmit(transferDiligenceSubmitRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferDiligenceSubmit(transferDiligenceSubmitRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.
       * @summary List transfer events
       * @param {TransferEventListRequest} transferEventListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferEventList(transferEventListRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferEventList(transferEventListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.
       * @summary Sync transfer events
       * @param {TransferEventSyncRequest} transferEventSyncRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferEventSync(transferEventSyncRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferEventSync(transferEventSyncRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transfer/get` endpoint fetches information about the transfer corresponding to the given `transfer_id` or `authorization_id`. One of `transfer_id` or `authorization_id` must be populated but not both.
       * @summary Retrieve a transfer
       * @param {TransferGetRequest} transferGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferGet(transferGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferGet(transferGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.
       * @summary Create a transfer intent object to invoke the Transfer UI
       * @param {TransferIntentCreateRequest} transferIntentCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferIntentCreate(transferIntentCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferIntentCreate(transferIntentCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.
       * @summary Retrieve more information about a transfer intent
       * @param {TransferIntentGetRequest} transferIntentGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferIntentGet(transferIntentGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferIntentGet(transferIntentGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/ledger/deposit` endpoint to deposit funds into Plaid Ledger.
       * @summary Deposit funds into a Plaid Ledger balance
       * @param {TransferLedgerDepositRequest} transferLedgerDepositRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferLedgerDeposit(transferLedgerDepositRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferLedgerDeposit(transferLedgerDepositRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/ledger/distribute` endpoint to move available balance between the ledgers of the platform and one of its originators.
       * @summary Move available balance between the ledgers of the platform and one of its originators
       * @param {TransferLedgerDistributeRequest} transferLedgerDistributeRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferLedgerDistribute(transferLedgerDistributeRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferLedgerDistribute(transferLedgerDistributeRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/ledger/get` endpoint to view a balance on the ledger held with Plaid.
       * @summary Retrieve Plaid Ledger balance
       * @param {TransferLedgerGetRequest} transferLedgerGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferLedgerGet(transferLedgerGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferLedgerGet(transferLedgerGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/ledger/withdraw` endpoint to withdraw funds from a Plaid Ledger balance.
       * @summary Withdraw funds from a Plaid Ledger balance
       * @param {TransferLedgerWithdrawRequest} transferLedgerWithdrawRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferLedgerWithdraw(transferLedgerWithdrawRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferLedgerWithdraw(transferLedgerWithdrawRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers.
       * @summary List transfers
       * @param {TransferListRequest} transferListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferList(transferListRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferList(transferListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/metrics/get` endpoint to view your transfer product usage metrics.
       * @summary Get transfer product usage metrics
       * @param {TransferMetricsGetRequest} transferMetricsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferMetricsGet(transferMetricsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferMetricsGet(transferMetricsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * As an alternative to adding Items via Link, you can also use the `/transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items. This endpoint is also required when adding an Item for use with wire transfers; if you intend to create wire transfers on this account, you must provide `wire_routing_number`. Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
       * @summary Migrate account into Transfers
       * @param {TransferMigrateAccountRequest} transferMigrateAccountRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferMigrateAccount(transferMigrateAccountRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferMigrateAccount(transferMigrateAccountRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/originator/create` endpoint to create a new originator and return an `originator_client_id`.
       * @summary Create a new originator
       * @param {TransferOriginatorCreateRequest} transferOriginatorCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferOriginatorCreate(transferOriginatorCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferOriginatorCreate(transferOriginatorCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/originator/funding_account/update` endpoint to update the funding account associated with the originator.
       * @summary Update the funding account associated with the originator
       * @param {TransferOriginatorFundingAccountUpdateRequest} transferOriginatorFundingAccountUpdateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferOriginatorFundingAccountUpdate(transferOriginatorFundingAccountUpdateRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferOriginatorFundingAccountUpdate(transferOriginatorFundingAccountUpdateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transfer/originator/get` endpoint gets status updates for an originator\'s onboarding process. This information is also available via the Transfer page on the Plaid dashboard.
       * @summary Get status of an originator\'s onboarding
       * @param {TransferOriginatorGetRequest} transferOriginatorGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferOriginatorGet(transferOriginatorGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferOriginatorGet(transferOriginatorGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transfer/originator/list` endpoint gets status updates for all of your originators\' onboarding. This information is also available via the Plaid dashboard.
       * @summary Get status of all originators\' onboarding
       * @param {TransferOriginatorListRequest} transferOriginatorListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferOriginatorList(transferOriginatorListRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferOriginatorList(transferOriginatorListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transfer/platform/originator/create` endpoint allows gathering information about the originator specific to the Scaled Platform Transfer offering, including the originator\'s agreement to legal terms required before accepting any further information related to the originator.
       * @summary Create an originator for scaled platform customers
       * @param {TransferPlatformOriginatorCreateRequest} transferPlatformOriginatorCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferPlatformOriginatorCreate(transferPlatformOriginatorCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferPlatformOriginatorCreate(transferPlatformOriginatorCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/platform/person/create` endpoint to create a person record associated with an originator and optionally submit person-specific requirements.
       * @summary Create a person associated with an originator
       * @param {TransferPlatformPersonCreateRequest} transferPlatformPersonCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferPlatformPersonCreate(transferPlatformPersonCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferPlatformPersonCreate(transferPlatformPersonCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transfer/platform/requirement/submit` endpoint allows platforms to submit onboarding requirements for an originator as part of the Scaled Platform Transfer offering.
       * @summary Submit onboarding requirements for Scaled Platform originators
       * @param {TransferPlatformRequirementSubmitRequest} transferPlatformRequirementSubmitRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferPlatformRequirementSubmit(transferPlatformRequirementSubmitRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferPlatformRequirementSubmit(transferPlatformRequirementSubmitRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transfer/questionnaire/create` endpoint generates a Plaid-hosted onboarding UI URL. Redirect the originator to this URL to provide their due diligence information and agree to Plaid’s terms for ACH money movement.
       * @summary Generate a Plaid-hosted onboarding UI URL.
       * @param {TransferQuestionnaireCreateRequest} transferQuestionnaireCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferQuestionnaireCreate(transferQuestionnaireCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferQuestionnaireCreate(transferQuestionnaireCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/recurring/cancel` endpoint to cancel a recurring transfer.  Scheduled transfer that hasn\'t been submitted to bank will be cancelled.
       * @summary Cancel a recurring transfer.
       * @param {TransferRecurringCancelRequest} transferRecurringCancelRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferRecurringCancel(transferRecurringCancelRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferRecurringCancel(transferRecurringCancelRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/recurring/create` endpoint to initiate a new recurring transfer. This capability is not currently supported for Transfer UI or Platform Payments (beta) customers.
       * @summary Create a recurring transfer
       * @param {TransferRecurringCreateRequest} transferRecurringCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferRecurringCreate(transferRecurringCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferRecurringCreate(transferRecurringCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transfer/recurring/get` fetches information about the recurring transfer corresponding to the given `recurring_transfer_id`.
       * @summary Retrieve a recurring transfer
       * @param {TransferRecurringGetRequest} transferRecurringGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferRecurringGet(transferRecurringGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferRecurringGet(transferRecurringGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/recurring/list` endpoint to see a list of all your recurring transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired recurring transfers.
       * @summary List recurring transfers
       * @param {TransferRecurringListRequest} transferRecurringListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferRecurringList(transferRecurringListRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferRecurringList(transferRecurringListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/refund/cancel` endpoint to cancel a refund.  A refund is eligible for cancellation if it has not yet been submitted to the payment network.
       * @summary Cancel a refund
       * @param {TransferRefundCancelRequest} transferRefundCancelRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferRefundCancel(transferRefundCancelRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferRefundCancel(transferRefundCancelRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Use the `/transfer/refund/create` endpoint to create a refund for a transfer. A transfer can be refunded if the transfer was initiated in the past 180 days.  Refunds come out of the available balance of the ledger used for the original debit transfer. If there are not enough funds in the available balance to cover the refund amount, the refund will be rejected. You can create a refund at any time. Plaid does not impose any hold time on refunds.
       * @summary Create a refund
       * @param {TransferRefundCreateRequest} transferRefundCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferRefundCreate(transferRefundCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferRefundCreate(transferRefundCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transfer/refund/get` endpoint fetches information about the refund corresponding to the given `refund_id`.
       * @summary Retrieve a refund
       * @param {TransferRefundGetRequest} transferRefundGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferRefundGet(transferRefundGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferRefundGet(transferRefundGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.
       * @summary Lists historical repayments
       * @param {TransferRepaymentListRequest} transferRepaymentListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferRepaymentList(transferRepaymentListRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferRepaymentList(transferRepaymentListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
       * @summary List the returns included in a repayment
       * @param {TransferRepaymentReturnListRequest} transferRepaymentReturnListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferRepaymentReturnList(transferRepaymentReturnListRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferRepaymentReturnList(transferRepaymentReturnListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.
       * @summary Retrieve a sweep
       * @param {TransferSweepGetRequest} transferSweepGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferSweepGet(transferSweepGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferSweepGet(transferSweepGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.
       * @summary List sweeps
       * @param {TransferSweepListRequest} transferSweepListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      transferSweepList(transferSweepListRequest, options) {
        return exports.PlaidApiFp(this.configuration).transferSweepList(transferSweepListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Returns user permissioned account data including identity and Item access tokens.
       * @summary Retrieve User Account
       * @param {UserAccountSessionGetRequest} userAccountSessionGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      userAccountSessionGet(userAccountSessionGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).userAccountSessionGet(userAccountSessionGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint should be called for each of your end users before they begin a Plaid Check or Income flow, or a Multi-Item Link flow. This provides you a single token to access all data associated with the user. You should only create one per end user.  The `consumer_report_user_identity` object must be present in order to create a Plaid Check Consumer Report for a user. If it is not provided during the `/user/create` call, it can be added later by calling `/user/update`. Plaid Check Consumer Reports can only be created for US-based users; the user\'s address country must be `US`.  If you call the endpoint multiple times with the same `client_user_id`, the first creation call will succeed and the rest will fail with an error message indicating that the user has been created for the given `client_user_id`.  Ensure that you store the `user_token` along with your user\'s identifier in your database, as it is not possible to retrieve a previously created `user_token`.
       * @summary Create user
       * @param {UserCreateRequest} userCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      userCreate(userCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).userCreate(userCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Returns Items associated with a User along with their corresponding statuses.
       * @summary Get Items associated with a User
       * @param {UserItemsGetRequest} userItemsGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      userItemsGet(userItemsGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).userItemsGet(userItemsGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * `/user/remove` deletes a user token and and associated information, including any Items associated with the token.  Any subsequent calls to retrieve information using the same user token will result in an error stating the user does not exist.
       * @summary Remove user
       * @param {UserRemoveRequest} userRemoveRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      userRemove(userRemoveRequest, options) {
        return exports.PlaidApiFp(this.configuration).userRemove(userRemoveRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint is used to create a third-party user token. This token can be shared with and used by a specified third-party client to access data associated with the user through supported endpoints.  Ensure you store the `third_party_user_token` along with the `user_token` and `third_party_client_id`, as it is not possible to retrieve a previously created `third_party_user_token`.
       * @summary Create a third-party user token
       * @param {UserThirdPartyTokenCreateRequest} userThirdPartyTokenCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      userThirdPartyTokenCreate(userThirdPartyTokenCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).userThirdPartyTokenCreate(userThirdPartyTokenCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint is used to delete a third-party user token. Once removed, the token can longer be used to access data associated with the user.   Any subsequent calls to retrieve information using the same third-party user token will result in an error stating the third-party user token does not exist.
       * @summary Remove a third-party user token
       * @param {UserThirdPartyTokenRemoveRequest} userThirdPartyTokenRemoveRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      userThirdPartyTokenRemove(userThirdPartyTokenRemoveRequest, options) {
        return exports.PlaidApiFp(this.configuration).userThirdPartyTokenRemove(userThirdPartyTokenRemoveRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint is used to update user information associated with an existing `user_token`. It can also be used to enable an existing `user_token` for use with Consumer Reports by Plaid Check, by adding a `consumer_report_user_identity` object to the user. Plaid Check Consumer Reports can only be created for US-based users; the user\'s address country must be `US`.
       * @summary Update user information
       * @param {UserUpdateRequest} userUpdateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      userUpdate(userUpdateRequest, options) {
        return exports.PlaidApiFp(this.configuration).userUpdate(userUpdateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Create an e-wallet. The response is the newly created e-wallet object.
       * @summary Create an e-wallet
       * @param {WalletCreateRequest} walletCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      walletCreate(walletCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).walletCreate(walletCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Fetch an e-wallet. The response includes the current balance.
       * @summary Fetch an e-wallet
       * @param {WalletGetRequest} walletGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      walletGet(walletGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).walletGet(walletGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint lists all e-wallets in descending order of creation.
       * @summary Fetch a list of e-wallets
       * @param {WalletListRequest} walletListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      walletList(walletListRequest, options) {
        return exports.PlaidApiFp(this.configuration).walletList(walletListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate transactions, the amount and reference for the transaction. Transactions will settle in seconds to several days, depending on the underlying payment rail.
       * @summary Execute a transaction using an e-wallet
       * @param {WalletTransactionExecuteRequest} walletTransactionExecuteRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      walletTransactionExecute(walletTransactionExecuteRequest, options) {
        return exports.PlaidApiFp(this.configuration).walletTransactionExecute(walletTransactionExecuteRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Fetch a specific e-wallet transaction
       * @summary Fetch an e-wallet transaction
       * @param {WalletTransactionGetRequest} walletTransactionGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      walletTransactionGet(walletTransactionGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).walletTransactionGet(walletTransactionGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time.
       * @summary List e-wallet transactions
       * @param {WalletTransactionListRequest} walletTransactionListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      walletTransactionList(walletTransactionListRequest, options) {
        return exports.PlaidApiFp(this.configuration).walletTransactionList(walletTransactionListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Create a new entity watchlist screening to check your customer against watchlists defined in the associated entity watchlist program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
       * @summary Create a watchlist screening for an entity
       * @param {WatchlistScreeningEntityCreateRequest} watchlistScreeningEntityCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningEntityCreate(watchlistScreeningEntityCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningEntityCreate(watchlistScreeningEntityCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Retrieve an entity watchlist screening.
       * @summary Get an entity screening
       * @param {WatchlistScreeningEntityGetRequest} watchlistScreeningEntityGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningEntityGet(watchlistScreeningEntityGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningEntityGet(watchlistScreeningEntityGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * List all changes to the entity watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
       * @summary List history for entity watchlist screenings
       * @param {WatchlistScreeningEntityHistoryListRequest} watchlistScreeningEntityHistoryListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningEntityHistoryList(watchlistScreeningEntityHistoryListRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningEntityHistoryList(watchlistScreeningEntityHistoryListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * List all hits for the entity watchlist screening.
       * @summary List hits for entity watchlist screenings
       * @param {WatchlistScreeningEntityHitListRequest} watchlistScreeningEntityHitListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningEntityHitList(watchlistScreeningEntityHitListRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningEntityHitList(watchlistScreeningEntityHitListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * List all entity screenings.
       * @summary List entity watchlist screenings
       * @param {WatchlistScreeningEntityListRequest} watchlistScreeningEntityListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningEntityList(watchlistScreeningEntityListRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningEntityList(watchlistScreeningEntityListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Get an entity watchlist screening program
       * @summary Get entity watchlist screening program
       * @param {WatchlistScreeningEntityProgramGetRequest} watchlistScreeningEntityProgramGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningEntityProgramGet(watchlistScreeningEntityProgramGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningEntityProgramGet(watchlistScreeningEntityProgramGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * List all entity watchlist screening programs
       * @summary List entity watchlist screening programs
       * @param {WatchlistScreeningEntityProgramListRequest} watchlistScreeningEntityProgramListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningEntityProgramList(watchlistScreeningEntityProgramListRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningEntityProgramList(watchlistScreeningEntityProgramListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Create a review for an entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
       * @summary Create a review for an entity watchlist screening
       * @param {WatchlistScreeningEntityReviewCreateRequest} watchlistScreeningEntityReviewCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningEntityReviewCreate(watchlistScreeningEntityReviewCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningEntityReviewCreate(watchlistScreeningEntityReviewCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * List all reviews for a particular entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
       * @summary List reviews for entity watchlist screenings
       * @param {WatchlistScreeningEntityReviewListRequest} watchlistScreeningEntityReviewListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningEntityReviewList(watchlistScreeningEntityReviewListRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningEntityReviewList(watchlistScreeningEntityReviewListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Update an entity watchlist screening.
       * @summary Update an entity screening
       * @param {WatchlistScreeningEntityUpdateRequest} watchlistScreeningEntityUpdateRequest The entity screening was successfully updated.
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningEntityUpdate(watchlistScreeningEntityUpdateRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningEntityUpdate(watchlistScreeningEntityUpdateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Create a new Watchlist Screening to check your customer against watchlists defined in the associated Watchlist Program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
       * @summary Create a watchlist screening for a person
       * @param {WatchlistScreeningIndividualCreateRequest} watchlistScreeningIndividualCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningIndividualCreate(watchlistScreeningIndividualCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningIndividualCreate(watchlistScreeningIndividualCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Retrieve a previously created individual watchlist screening
       * @summary Retrieve an individual watchlist screening
       * @param {WatchlistScreeningIndividualGetRequest} watchlistScreeningIndividualGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningIndividualGet(watchlistScreeningIndividualGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningIndividualGet(watchlistScreeningIndividualGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * List all changes to the individual watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
       * @summary List history for individual watchlist screenings
       * @param {WatchlistScreeningIndividualHistoryListRequest} watchlistScreeningIndividualHistoryListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningIndividualHistoryList(watchlistScreeningIndividualHistoryListRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningIndividualHistoryList(watchlistScreeningIndividualHistoryListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * List all hits found by Plaid for a particular individual watchlist screening.
       * @summary List hits for individual watchlist screening
       * @param {WatchlistScreeningIndividualHitListRequest} watchlistScreeningIndividualHitListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningIndividualHitList(watchlistScreeningIndividualHitListRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningIndividualHitList(watchlistScreeningIndividualHitListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * List previously created watchlist screenings for individuals
       * @summary List Individual Watchlist Screenings
       * @param {WatchlistScreeningIndividualListRequest} watchlistScreeningIndividualListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningIndividualList(watchlistScreeningIndividualListRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningIndividualList(watchlistScreeningIndividualListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Get an individual watchlist screening program
       * @summary Get individual watchlist screening program
       * @param {WatchlistScreeningIndividualProgramGetRequest} watchlistScreeningIndividualProgramGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningIndividualProgramGet(watchlistScreeningIndividualProgramGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningIndividualProgramGet(watchlistScreeningIndividualProgramGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * List all individual watchlist screening programs
       * @summary List individual watchlist screening programs
       * @param {WatchlistScreeningIndividualProgramListRequest} watchlistScreeningIndividualProgramListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningIndividualProgramList(watchlistScreeningIndividualProgramListRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningIndividualProgramList(watchlistScreeningIndividualProgramListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Create a review for the individual watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
       * @summary Create a review for an individual watchlist screening
       * @param {WatchlistScreeningIndividualReviewCreateRequest} watchlistScreeningIndividualReviewCreateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningIndividualReviewCreate(watchlistScreeningIndividualReviewCreateRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningIndividualReviewCreate(watchlistScreeningIndividualReviewCreateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * List all reviews for the individual watchlist screening.
       * @summary List reviews for individual watchlist screenings
       * @param {WatchlistScreeningIndividualReviewListRequest} watchlistScreeningIndividualReviewListRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningIndividualReviewList(watchlistScreeningIndividualReviewListRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningIndividualReviewList(watchlistScreeningIndividualReviewListRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Update a specific individual watchlist screening. This endpoint can be used to add additional customer information, correct outdated information, add a reference id, assign the individual to a reviewer, and update which program it is associated with. Please note that you may not update `search_terms` and `status` at the same time since editing `search_terms` may trigger an automatic `status` change.
       * @summary Update individual watchlist screening
       * @param {WatchlistScreeningIndividualUpdateRequest} watchlistScreeningIndividualUpdateRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      watchlistScreeningIndividualUpdate(watchlistScreeningIndividualUpdateRequest, options) {
        return exports.PlaidApiFp(this.configuration).watchlistScreeningIndividualUpdate(watchlistScreeningIndividualUpdateRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
       * @summary Get webhook verification key
       * @param {WebhookVerificationKeyGetRequest} webhookVerificationKeyGetRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof PlaidApi
       */
      webhookVerificationKeyGet(webhookVerificationKeyGetRequest, options) {
        return exports.PlaidApiFp(this.configuration).webhookVerificationKeyGet(webhookVerificationKeyGetRequest, options).then((request) => request(this.axios, this.basePath));
      }
    };
    exports.PlaidApi = PlaidApi2;
  }
});

// ../../node_modules/.pnpm/plaid@31.1.0/node_modules/plaid/dist/configuration.js
var require_configuration = __commonJS({
  "../../node_modules/.pnpm/plaid@31.1.0/node_modules/plaid/dist/configuration.js"(exports) {
    "use strict";
    init_esm();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Configuration = exports.PlaidEnvironments = void 0;
    exports.PlaidEnvironments = {
      production: "https://production.plaid.com",
      sandbox: "https://sandbox.plaid.com"
    };
    var Configuration2 = class {
      constructor(param = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
        if (!this.baseOptions)
          this.baseOptions = {};
        if (!this.baseOptions.headers)
          this.baseOptions.headers = {};
        this.baseOptions.headers = Object.assign({ ["User-Agent"]: `Plaid Node v31.1.0`, ["Plaid-Version"]: "2020-09-14" }, this.baseOptions.headers);
      }
      /**
       * Check if the given MIME is a JSON MIME.
       * JSON MIME examples:
       *   application/json
       *   application/json; charset=UTF8
       *   APPLICATION/JSON
       *   application/vnd.company+json
       * @param mime - MIME (Multipurpose Internet Mail Extensions)
       * @return True if the given MIME is JSON, false otherwise.
       */
      isJsonMime(mime) {
        const jsonMime = new RegExp("^(application/json|[^;/ 	]+/[^;/ 	]+[+]json)[ 	]*(;.*)?$", "i");
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === "application/json-patch+json");
      }
    };
    exports.Configuration = Configuration2;
  }
});

// ../../node_modules/.pnpm/plaid@31.1.0/node_modules/plaid/dist/index.js
var require_dist = __commonJS({
  "../../node_modules/.pnpm/plaid@31.1.0/node_modules/plaid/dist/index.js"(exports) {
    "use strict";
    init_esm();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_api(), exports);
    __exportStar(require_configuration(), exports);
  }
});

// src/server/services/plaid.ts
init_esm();
var import_plaid = __toESM(require_dist(), 1);
var PLAID_CLIENT_ID = process.env.PLAID_CLIENT_ID || "";
var PLAID_SECRET = process.env.PLAID_SECRET || "";
var PLAID_ENV = process.env.PLAID_ENV || "sandbox";
var PLAID_WEBHOOK_URL = process.env.PLAID_WEBHOOK_URL;
if (!PLAID_CLIENT_ID || !PLAID_SECRET) {
  console.warn(
    "Missing Plaid credentials. Set PLAID_CLIENT_ID and PLAID_SECRET environment variables."
  );
}
var configuration = new import_plaid.Configuration({
  baseOptions: {
    headers: {
      "PLAID-CLIENT-ID": PLAID_CLIENT_ID,
      "PLAID-SECRET": PLAID_SECRET
    }
  },
  basePath: import_plaid.PlaidEnvironments[PLAID_ENV]
});
var plaidClient = new import_plaid.PlaidApi(configuration);
var getInstitutionById = async (institutionId) => {
  try {
    const response = await plaidClient.institutionsGetById({
      country_codes: ["US"],
      institution_id: institutionId
    });
    const institution = response.data.institution;
    return {
      id: institution.institution_id,
      logo: institution.logo,
      name: institution.name,
      oauthSupported: institution.oauth,
      primaryColor: institution.primary_color,
      url: institution.url
    };
  } catch (error) {
    console.error("Error getting institution:", error);
    throw new Error(
      `Failed to get institution: ${error instanceof Error ? error.message : String(error)}`
    );
  }
};
var getAccounts = async (accessToken) => {
  try {
    const response = await plaidClient.accountsGet({
      access_token: accessToken
    });
    return response.data.accounts.map((account) => ({
      availableBalance: account.balances.available,
      balanceLastUpdated: /* @__PURE__ */ new Date(),
      currentBalance: account.balances.current,
      isoCurrencyCode: account.balances.iso_currency_code,
      limit: account.balances.limit,
      mask: account.mask,
      name: account.name,
      officialName: account.official_name,
      plaidAccountId: account.account_id,
      subtype: mapAccountSubtype(account.subtype),
      type: mapAccountType(account.type)
    }));
  } catch (error) {
    console.error("Error getting accounts:", error);
    throw new Error(
      `Failed to get accounts: ${error instanceof Error ? error.message : String(error)}`
    );
  }
};
var getTransactions = async (accessToken, bankConnection, bankAccounts, startDate, endDate) => {
  try {
    const accountMap = new Map(
      bankAccounts.map((account) => [account.plaidAccountId, account.id])
    );
    let hasMore = true;
    let cursor;
    let allTransactions = [];
    while (hasMore) {
      const request = {
        access_token: accessToken,
        end_date: endDate,
        start_date: startDate
      };
      if (cursor) {
        request.cursor = cursor;
      }
      const response = await plaidClient.transactionsSync(request);
      const data = response.data;
      const mappedTransactions = data.added.map((transaction) => {
        const bankAccountId = accountMap.get(transaction.account_id);
        if (!bankAccountId) {
          console.warn(
            `No matching bank account found for transaction ${transaction.transaction_id}`
          );
          return null;
        }
        return {
          amount: transaction.amount,
          bankAccountId,
          bankConnectionId: bankConnection.id,
          category: mapTransactionCategory(transaction.category),
          date: new Date(transaction.date),
          description: transaction.original_description,
          isoCurrencyCode: transaction.iso_currency_code,
          location: transaction.location ? JSON.stringify(transaction.location) : null,
          merchantName: transaction.merchant_name,
          name: transaction.name,
          originalCategory: transaction.category?.join(", "),
          originalDescription: transaction.original_description,
          originalMerchantName: transaction.merchant_name,
          paymentChannel: transaction.payment_channel,
          pending: transaction.pending,
          plaidTransactionId: transaction.transaction_id,
          subCategory: transaction.category && transaction.category.length > 1 ? transaction.category[1] : null,
          userId: bankConnection.userId
        };
      }).filter(Boolean);
      allTransactions = [...allTransactions, ...mappedTransactions];
      hasMore = data.has_more;
      cursor = data.next_cursor;
    }
    return allTransactions;
  } catch (error) {
    console.error("Error syncing transactions:", error);
    throw new Error(
      `Failed to sync transactions: ${error instanceof Error ? error.message : String(error)}`
    );
  }
};
var getItemDetails = async (accessToken) => {
  try {
    const response = await plaidClient.itemGet({
      access_token: accessToken
    });
    return {
      institutionId: response.data.item.institution_id,
      itemId: response.data.item.item_id,
      // Handle the case where status might not exist on the item type
      status: response.data.item.status || {
        transactions: { last_successful_update: null }
      }
    };
  } catch (error) {
    console.error("Error getting item details:", error);
    throw new Error(
      `Failed to get item details: ${error instanceof Error ? error.message : String(error)}`
    );
  }
};
function mapAccountType(plaidType) {
  const typeMap = {
    brokerage: "BROKERAGE",
    credit: "CREDIT",
    depository: "DEPOSITORY",
    investment: "INVESTMENT",
    loan: "LOAN",
    other: "OTHER"
  };
  return typeMap[plaidType.toLowerCase()] || "OTHER";
}
function mapAccountSubtype(plaidSubtype) {
  if (!plaidSubtype) return null;
  const subtypeMap = {
    "auto loan": "AUTO_LOAN",
    "cash management": "CASH_MANAGEMENT",
    cd: "CD",
    checking: "CHECKING",
    "credit card": "CREDIT_CARD",
    etf: "ETF",
    "health savings": "HEALTH_SAVINGS",
    "money market": "MONEY_MARKET",
    mortgage: "MORTGAGE",
    "mutual fund": "MUTUAL_FUND",
    paypal: "PAYPAL",
    prepaid: "PREPAID",
    retirement: "RETIREMENT",
    savings: "SAVINGS",
    stock: "STOCK",
    "student loan": "STUDENT_LOAN"
  };
  return subtypeMap[plaidSubtype.toLowerCase()] || "OTHER";
}
function mapTransactionCategory(plaidCategories) {
  if (!plaidCategories || plaidCategories.length === 0) return null;
  const primaryCategory = plaidCategories[0]?.toLowerCase();
  const categoryMap = {
    "bank fees": "BANK_FEES",
    entertainment: "ENTERTAINMENT",
    "food and drink": "FOOD_AND_DRINK",
    "general merchandise": "GENERAL_MERCHANDISE",
    "general services": "GENERAL_SERVICES",
    "government and non-profit": "GOVERNMENT_AND_NON_PROFIT",
    "home improvement": "HOME_IMPROVEMENT",
    income: "INCOME",
    "loan payments": "LOAN_PAYMENTS",
    medical: "MEDICAL",
    "personal care": "PERSONAL_CARE",
    transfer: "TRANSFER",
    transportation: "TRANSPORTATION",
    travel: "TRAVEL",
    utilities: "UTILITIES"
  };
  return categoryMap[primaryCategory] || "OTHER";
}

export {
  getInstitutionById,
  getAccounts,
  getTransactions,
  getItemDetails
};
/*! Bundled license information:

mime-db/index.js:
  (*!
   * mime-db
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015-2022 Douglas Christopher Wilson
   * MIT Licensed
   *)

mime-types/index.js:
  (*!
   * mime-types
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

axios/dist/node/axios.cjs:
  (*! Axios v1.8.1 Copyright (c) 2025 Matt Zabriskie and contributors *)
*/
//# sourceMappingURL=chunk-LRH2TIVL.mjs.map
